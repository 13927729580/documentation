<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. -->
<chapter lang="en" id="wizard">
<title>Reports Wizard</title>
    <para>Reports wizard is a visual tool for quick report creation including both data structure and template design. Click <guibutton>Create</guibutton> -&gt; <guibutton>Using wizard</guibutton> in the <guimenu>Reports</guimenu> screen to run the wizard.</para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/reports_wizard_main.png" align="center"/>
            </imageobject>
        </mediaobject>
        <para>Three types of reports can be created using the wizard:</para>
        <orderedlist>
            <listitem><para>Report for a single entity.</para></listitem>
            <listitem><para>Report for a list of given entities.</para></listitem>
            <listitem><para>Report for a list of entities filtered by query.</para></listitem>
        </orderedlist>
        <para>Report design is a three steps process:</para>
        <orderedlist>
            <listitem><para>Creating a data structure of a report.</para></listitem>
            <listitem><para>Editing of report regions.</para></listitem>
            <listitem><para>Saving the report.</para></listitem>
        </orderedlist>
        <para>The created report can be modified in the usual manner using the report editor and run through <link linkend="run_common">the generic report browser</link>, or using <code>TablePrintFormAction</code> and <code>EditorPrintFormAction</code> <link linkend="run_actions">actions</link>.</para>
        <para>The use cases below illustrate how to use the wizard. All the examples are based on the sample <application>Library</application> application which is available in the CUBA Studio samples. The <application>Library</application> application or any other sample CUBA application can be downloaded by clicking the <guibutton>Samples</guibutton> button in the project selection window.</para>
        <section id="single_entity_report">
            <title>Report for a Single Entity</title>
            <para>Let us assume that we want to get an information about the particular publication of a book, i.e. an instance of <code>library$BookPublication</code> entity.</para>
            <para>First, run the reports wizard and specify the report details:</para>
            <itemizedlist>
                <listitem><para><guilabel>Entity</guilabel> -  entity to be shown in the report - <code>library$BookPublication</code>.</para></listitem>
                <listitem><para><guilabel>Format of template file</guilabel> - report template format that defines the format of the output - DOCX. Note that XSLX and PDF formats are also available.</para></listitem>
                <listitem><para><guilabel>Report name</guilabel> - <code>'Publication details'</code>.</para></listitem>
            </itemizedlist>
            <para>Next, specify the report type: <guilabel>Report for single entity</guilabel>.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/single_entity_step_1.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>Then click <guibutton>Next</guibutton> button; the <guilabel>Select attributes for the simple report region</guilabel> window appears. Specify the attributes of the <code>BookPublication</code> entity and linked entities that should be reflected in the report (<code>Publication.Book.Name</code>, <code>Publication.Publisher.Name</code>, <code>Publication.Year</code> and <code>Publication.City.Name</code>). In order to do this, select them in the left column and move them to the right clicking <inlinemediaobject><imageobject><imagedata fileref="img/attributes_selection_arrow.png"/></imageobject></inlinemediaobject> or by double-click.</para>
            <para>The order of the attributes in the report will correspond the order specified in the right hand side list. To change the display order, move the attributes up and down by clicking <inlinemediaobject><imageobject><imagedata fileref="img/attributes_selection_up.png"/></imageobject></inlinemediaobject>/<inlinemediaobject><imageobject><imagedata fileref="img/attributes_selection_down.png"/></imageobject></inlinemediaobject>.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/single_entity_attributes.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>Click <guibutton>ОК</guibutton> to move to the second stage - report regions editing.</para>
            <para>The appeared screen contains a list of named regions - bands that display related data. The wizard enables adding several plain-text regions to the template in order to display different data sets.</para>
            <para>A set of entity attributes loaded to a particular region can be modified by clicking the link represented as the list of the selected attributes. You can also add a new region by clicking <guibutton>Add simple region</guibutton>.</para>
            <para>If the entity contains collection attributes, <guibutton>Add tabulated region</guibutton>, button will appear. It enables adding a region for tabular data display.</para>
            <para>In both cases, the selection dialog will appear with a list of attributes of the <code>library$BookPublication</code> entity, allowing you to add or remove attributes from the set.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/single_entity_step_2.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>At this stage, we already can run the report and see how the report looks. Click <guibutton>Run</guibutton> button, pick the instance of <code>library$BookPublication</code> and see the result..</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/single_entity_test_running.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>When all report regions are configured you can move on to the third stage: saving the report. At this point, you can view the complete report template, or change the name and format of the output file to any of three available types: DOCX, HTML, PDF.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/single_entity_step_3.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>After clicking the <guibutton>Save</guibutton> button, the standard report editor comes up. Now you can fine-tune the report in the usual manner. Once editing is complete, click <guibutton>Save and close</guibutton> in the report editor.</para>
            <para>The report is now added to the <guilabel>General</guilabel> reports group in the reports browser, where you can run it from by clicking the <guibutton>Run</guibutton> buttons.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/single_entity_reports_list.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>Additionally, we can enable the report run on the publications browser. In order to do this, we want to add the <code>bookpublication-browse.xml</code> button to the <guibutton>Print details</guibutton> screen descriptor:</para>
            <programlisting language="xml">
                <![CDATA[
<groupTable id="bookPublicationTable"
    ...
    <buttonsPanel>
        ...
        <button id="printDetails"
        caption="msg://printDetails"/>]]>
            </programlisting>
            <para>Then we need to implement <code>TablePrintFormAction</code>  in the controller:</para>
            <programlisting language="java">
                <![CDATA[
@Inject
private Button printDetails;

@Override
public void init(Map<String, Object> params) {
    TablePrintFormAction action = new TablePrintFormAction("report", this, bookPublicationTable);
          bookPublicationTable.addAction(action);
          printDetails.setAction(action);
    }]]>
            </programlisting>
            <para>Now you can run the report for any publication by selecting it in the table and simply pressing the <guibutton>Print details</guibutton> button.</para>.
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/single_entity_running.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>The output is as follows:</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/single_entity_result.png" align="center"/>
                </imageobject>
            </mediaobject>
        </section>
        <section id="list_of_entities_report">
            <title>Report for a List of Entities</title>
            <para>Reports wizard allows you to create two types of reports for a list of entity instances:</para>
            <orderedlist>
                <listitem><para>report for manually selected instances of a particular entity</para></listitem>
                <listitem><para>report for entity instances filtered by a certain request.</para></listitem>
            </orderedlist>
            <para>Let us have a look at the first report type. Let us assume we want to obtain a list of all book instances in the library (<code>library$BookInstance</code> entity) with titles and library departments they belong to.</para>
            <para>At the first stage, we specify the report details:</para>
            <itemizedlist>
                <listitem><para><guilabel>Entity</guilabel> -  report entity - <code>library$BookInstance</code>.</para></listitem>
                <listitem><para><guilabel>Format of template file</guilabel> - output format - XSLX.</para></listitem>
                <listitem><para><guilabel>Report name</guilabel> - report name - <code>'Book items location'</code>.</para></listitem>
            </itemizedlist>
            <para>After that, select the type of the report (<guilabel>Report for list of entities</guilabel>) and click <guibutton>Next</guibutton>.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/list_of_entities_step_1.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>As per the task, we select <code>BookItem.Publication.Book.Name</code>and <code>BookItem.LibraryDepartment.Name</code> in the attributes selection window.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/list_of_entities_attributes.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>Click <guibutton>ОК</guibutton> and move to the second stage of report regions editing.</para>
            <para>The report template for a list of entities restricted to have only one region that displays data in tabular form. Adding new regions is not allowed, but you can edit an existing set of data by clicking on the link with the list of attributes, or remove an existing region and recreate it.</para>
            <para>In this case, we do not need to make any changes. Click <guibutton>Next</guibutton> -> <guibutton>Save</guibutton> to save the report. The report looks as follows in the report editor:</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/list_of_entities_editor.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>Once the report is saved, you can run it from the reports browser.</para>
            <para>In addition, we can add a button to run the report from the book items browser, which can be opened by clicking the <guibutton>Show items</guibutton> button in the publications browser. In order to do this, we will set the <code>multiselect</code> attribute for the book instances table to <code>true</code> to be able to specify a set of records for the report and then add the source code of the button:</para>
            <programlisting language="xml">
                <![CDATA[
      <table id="bookInstanceTable"
             multiselect="true">
             ...
                  <buttonsPanel>
                  ...
                      <button id="printList"
                      caption="msg://printList"/>]]>
            </programlisting>
            <para>After that, inject the <code>Button</code> component in the screen controller:</para>
            <programlisting language="java">
                <![CDATA[
@Inject
private Button printList;]]>
            </programlisting>
            <para>Next, add the following implementation within the overridden <code>init()</code> method:</para>
            <programlisting language="java">
                <![CDATA[
TablePrintFormAction action = new TablePrintFormAction("report", this, bookInstanceTable);
    bookInstanceTable.addAction(action);
    printList.setAction(action);]]>
            </programlisting>
            <para>Now the report can be run from the book items browser by selecting items for the report in the table and pressing the <guibutton>Print list</guibutton>  button. <guibutton>Print selected</guibutton> option exports the selected items, <guibutton>Print all</guibutton> option prints all instances selected by the current filter.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/list_of_entities_running.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>The output is as follows:</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/list_of_entities_result.png" align="center"/>
                </imageobject>
            </mediaobject>
        </section>
        <section id="query_report">
            <title>Report for a List of Entities Filtered by Query</title>
            <para>Now let us have a look at the second <link linkend="list_of_entities_report">report type</link> for a list of entities filtered by query. To demonstrate the use case of this report type use we will being complications to our task. As before the report should contain a list of books (with their titles and department names), but only added after a certain date.</para>
            <para>Let us set the details of the report like in the previous case:</para>
            <itemizedlist>
                <listitem><para><guilabel>Entity</guilabel> - report entity - <code>library$BookInstance</code>.</para></listitem>
                <listitem><para><guilabel>Format of template file</guilabel> - output file format - XSLX.</para></listitem>
                <listitem><para><guilabel>Report name</guilabel> - <code>'Recently added book items'</code>.</para></listitem>
            </itemizedlist>
            <para>Then select the <guilabel>Report for list of entities, selected by query</guilabel> report type.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/query_step_1.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>The selected report type enables us to select the list of entities that match the specified conditions. In order to set the query, click <guilabel>Set query</guilabel> link below.</para>
            <para>The <guilabel>Define</guilabel> query window appears. As you can see the window is similar to the generic filter window. Here you specify conditions, combine them into AND/OR groups and configure their settings.</para>
            <para>In order to add new query conditions, click <guibutton>Add</guibutton>. Select <code>Created at</code> attribute in the appeared window. Now the attribute is added to the query conditions tree and the right hand side panel displays its properties. Select an operator (>=).</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/query_parameter.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>After saving the query, click <guibutton>Next</guibutton> and move to <code>library$BookInstance</code> attributes selection. We move <code>BookItem.Publication.Book.Name</code> and <code>BookItem.LibraryDepartment.Name</code>. After saving the query, click <guibutton>Next</guibutton> and move to <code>library$BookInstance</code> attributes selection. We move <code>BookItem.Publication.Book.Name</code> and <code>BookItem.LibraryDepartment.Name</code> attributes to the right. Click <guibutton>OK</guibutton> to move on to accomplish the first stage.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/query_step_2.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>Press <guibutton>Next</guibutton> -> <guibutton>Save</guibutton> to save the report. The report will look as follows:</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/query_editor.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>The editor allows making the report structure more sophisticated by adding new bands and data sets, as well as configuring the report template design, localization, access rights.</para>
            <para>For instance, we can switch to <guilabel>Parameters and Values</guilabel> tab and modify the query parameter in the <guilabel>Parameters</guilabel> list: <code>Date</code> instead of the standard <code>CreateTs1</code>.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/query_parameter_rename.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>After all, let us add the <guibutton>Report</guibutton> button that runs the report right from the library departments browser.</para>
            <para>In order to do this, we need to define a button in the <code>librarydepartment-browse.xml</code> screen descriptor:</para>
            <programlisting language="xml">
                <![CDATA[
<table id="libraryDepartmentTable"
    ...
    <buttonsPanel id="buttonsPanel">
        ...
        <button id="reportBtn"
         caption="msg://reportBtn"/>
     </buttonsPanel>
</table>]]>
            </programlisting>
            <para>After that, inject the button in the screen controller:</para>
            <programlisting language="java">
                <![CDATA[
@Inject
private Button reportBtn;]]>
            </programlisting>
            <para>and assign <code>RunReportAction</code> to the button in the overridden <code>init()</code> method:</para>
            <programlisting language="java">
                <![CDATA[
reportBtn.setAction(new RunReportAction("report", this));]]>
            </programlisting>
            <para>The <guibutton>Report</guibutton> button will appear in the library departments browser, displaying the list of all reports available in the system in one click. In order to run the report, select <guilabel>Recently added book items</guilabel> in the list, specify the date and click <guibutton>Run report</guibutton>.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/query_running.png" align="center"/>
                </imageobject>
            </mediaobject>
            <para>The output is as follows:</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/query_result.png" align="center"/>
                </imageobject>
            </mediaobject>
        </section>
    </chapter>
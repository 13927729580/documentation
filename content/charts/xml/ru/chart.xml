<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="chart" lang="ru">
  <title>Отображение диаграмм</title>
  <para>Подсистема отображения диаграмм платформы CUBA поддерживает большое количество типов диаграмм: круговые, линейные, пузырьковые, лепестковые, диаграммы с накоплением и прочие. Имеется возможность экспорта диаграмм. Для большинства типов диаграмм поддерживается прокрутка и зуммирование. На момент написания настоящего руководства подсистема отображения диаграмм работает только в блоке <structname>Web Client</structname> для <application>Vaadin7</application>.</para>
  <para>Библиотека <application>AmCharts</application>, на которой основана реализация подсистемы отображения диаграмм, распространяется по лицензии, позволяющей использовать ее бесплатно при сохранении ссылки на сайт библиотеки. Для своего проекта Вы можете <ulink url="http://www.amcharts.com/online-store/">купить</ulink> лицензию на <application>AmCharts</application> и убрать ссылку.</para>
  <section id="chart_configuration">
    <title>Конфигурация диаграмм</title>
    <para>Для отображения диаграмм  используется компонент <code>Chart</code>, являющийся универсальным холстом. Вид
      диаграммы задается его свойством <code>configuration</code> типа <code>AbstractChart</code>. </para>
    <figure>
      <title>Иерархия видов диаграмм</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="img/chart/charts_hierarchy_dia.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Диаграммы можно описывать в XML-дескрипторе экрана. Для этого необходимо подключить соответствующий <code>namespace</code>:<programlisting language="xml">&lt;window xmlns=&quot;http://schemas.haulmont.com/cuba/window.xsd&quot;
        xmlns:chart=&quot;http://schemas.haulmont.com/charts/charts.xsd&quot;
        ...&gt;</programlisting></para>
    <para>Соответствие элементов XML видам диаграмм:</para>
    <itemizedlist>
      <listitem>
        <para><code>chart:xyChart</code> - XYChart</para>
      </listitem>
      <listitem>
        <para><code>chart:serialChart</code> - SerialChart</para>
      </listitem>
      <listitem>
        <para><code>chart:pieChart</code> - PieChart</para>
      </listitem>
      <listitem>
        <para><code>chart:funnelChart</code> - FunnelChart</para>
      </listitem>
      <listitem>
        <para><code>chart:gaugeChart</code> - AngularGaugeChart</para>
      </listitem>
      <listitem>
        <para><code>chart:radarChart</code> - RadarChart</para>
      </listitem>
    </itemizedlist>
    <para>Каждый вид диаграммы имеет свой набор атрибутов и методов, которые  повторяют функционал соответствующих
      диаграмм библиотеки <application>AmCharts</application>. Документация по свойствам и методам диаграмм находится по
      адресу  <ulink url="http://docs.amcharts.com/3/javascriptcharts">docs.amcharts.com/3/javascriptcharts</ulink>. </para>
    <para>Все атрибуты конфигурации могут иметь значение <code>null</code>, вместо таких значений будут использоваться значения по умолчанию (кроме случаев, указанных в документации AmCharts). </para>
  </section>
  <section id="chart_data_binding">
    <title>Связь с данными</title>
    <para>Реализовано два варианта передачи  данных в диаграмму: через интерфейс  <code>DataProvider</code>, или через механизм источников данных. </para>
    <itemizedlist>
      <listitem>
        <para>Интерфейс <code>DataProvider</code> имеет стандартную реализацию: класс <code>ListDataProvider</code>. Он  содержит список экземпляров <code>DataItem</code>, каждый из которых содержит набор пар ключ-значение.  Экземпляр <code>DataProvider</code> передается методу <code>setDataProvider()</code> конфигурации диаграммы. Данный способ предоставления данных для диаграммы наиболее универсален, однако требует создания экземпляров <code>DataProvider</code> и <code>DataItem</code> в коде контроллера экрана.</para>
      </listitem>
      <listitem>
        <para>Источник данных типа <code>CollectionDatasource</code> устанавливается для компонента <code>Chart</code> вызовом метода <code>setDatasource()</code>. Данный вариант требует наличия сущности, представляющей данные диаграммы. Он удобен, когда такая сущность уже есть в модели данных приложения, а также когда данные диаграммы нужно отобразить и в  виде таблицы.</para>
      </listitem>
    </itemizedlist>
    <para>В главе <xref linkend="chart_example"/> проиллюстрированы оба способа получения данных.</para>
    <para>Используемые для отображения  свойства сущности или значения, содержащиеся в экземпляре <code>DataProvider</code>, задаются в атрибутах диаграммы, причем атрибуты различаются для разных типов диаграмм. Например для компонента <sgmltag>chart:pieChart</sgmltag> необходимо задать атрибуты <sgmltag>valueField</sgmltag> и <sgmltag>titleField</sgmltag>.
В качестве значений могут выступать типы <code>Integer</code>, <code>Long</code>, <code>Double</code>, <code>String</code>, <code>Boolean</code>, <code>Date</code>. </para>
    <para>Динамическое добавление данных в существующий график не поддерживается, возможно только полностью перерисовать график с новыми данными. Для этого необходимо воспользоваться методом <code>repaint()</code>.
</para>
  </section>
  <section id="chart_listeners">
    <title>События</title>
    <para>Имеется возможность настроить реакцию на различные типы событий. Доступны следующие типы слушателей событий:</para>
    <itemizedlist>
      <listitem>
        <para><code>AxisZoomListener</code> - масштабирование оси графика.</para>
      </listitem>
      <listitem>
        <para><code>ChartClickListener</code> - щелчок по холсту.</para>
      </listitem>
      <listitem>
        <para><code>RightClickListener</code> - щелчок по холсту правой клавишей мыши.</para>
      </listitem>
      <listitem>
        <para><code>CursorPeriodSelectListener</code> - выбор периода отображения курсором.</para>
      </listitem>
      <listitem>
        <para><code>CursorZoomListener</code> - масштабирование области графика курсором.</para>
      </listitem>
      <listitem>
        <para><code>GraphClickListener</code> - щелчок по графику.</para>
      </listitem>
      <listitem>
        <para><code>GraphItemClickListener</code> - щелчок по элементу графика.</para>
      </listitem>
      <listitem>
        <para><code>LegendItemHideListener</code> - скрытие элемента легенды.</para>
      </listitem>
      <listitem>
        <para><code>LegendItemShowListener</code> - показ элемента легенды.</para>
      </listitem>
      <listitem>
        <para><code>LegendItemClickListener</code> - щелчок по элементу легенды.</para>
      </listitem>
      <listitem>
        <para><code>SliceClickListener</code> - щелчок по элементу круговой диаграммы.</para>
      </listitem>
      <listitem>
        <para><code>SliceRightClickListener</code> - щелчок по элементу круговой диаграммы правой клавишей мыши.</para>
      </listitem>
      <listitem>
        <para><code>SlicePullInListener</code> - элемент круговой диаграммы соединён  с диаграммой.</para>
      </listitem>
      <listitem>
        <para><code>SlicePullOutListener</code> - элемент круговой диаграммы отсоединён  от диаграммы.</para>
      </listitem>
      <listitem>
        <para><code>ZoomListener</code> - масштабирование холста.</para>
      </listitem>
    </itemizedlist>
    <para>Пример использования событий проиллюстрирован в разделе    <xref linkend="section_use_of_events"/>.</para>
  </section>
  <section id="chart_example">
    <title>Пример работы с диаграммами</title>
    <para>В данной главе мы рассмотрим применение подсистемы отображения диаграмм в приложении-примере
      Библиотека, который может быть загружен с помощью CUBA Studio.</para>
    <section id="chart_project_setup">
      <title>Настройка проекта приложения</title>
      <orderedlist>
        <listitem>
          <para>Запустите <application>CUBA Studio</application>, перейдите в окно <guimenu>Open project > Samples</guimenu>
            и загрузите проект Library.</para>
        </listitem>
        <listitem>
          <para>Откройте проект Library в Studio.</para>
        </listitem>
        <listitem>
          <para>Откройте окно свойств проекта <guibutton>Project properties</guibutton> -&gt; <guibutton>Edit</guibutton> и в списке <guilabel>Base projects</guilabel> включите проект <structname>charts</structname>, затем сохраните изменения. <application>Studio</application> предложит пересоздать скрипты Gradle - согласитесь.</para>
        </listitem>
        <listitem>
          <para>Запустите <guimenu>Run</guimenu> -&gt; <guimenu>Deploy</guimenu>. На этом этапе будет произведена
            сборка приложения, и оно будет развернуто на сервере Tomcat в подкаталоге <filename>build/tomcat</filename>.</para>
        </listitem>
        <listitem>
          <para>Создайте базу данных приложения, запустив <guimenu>Run</guimenu> -&gt; <guimenu>Create database</guimenu>.</para>
        </listitem>
        <listitem>
          <para>Запустите <guimenu>Build</guimenu> -&gt; <guimenu>Create or update IDEA project files</guimenu> чтобы создать проектные файлы для <application>IntelliJ IDEA</application>.</para>
        </listitem>
      </orderedlist>
      <para>После выполнения вышеописанных действий функциональность для отображения диаграмм подключена к приложению и готова к работе. </para>
    </section>
    <section>
      <title>Создание сервиса для извлечения данных</title>
      <para>В данном разделе мы создадим сервис, позволяющий извлечь из базы  данные для построения диаграмм. </para>
      <orderedlist>
        <listitem>
          <para>Один из методов сервиса будет возвращать список неперсистентных сущностей, поэтому начнем с создания и регистрации класса этой сущности.</para>
          <para>Создайте в  пакете <code>com.sample.library.entity</code> модуля <structname>global</structname> класс  <code>BooksByGenre</code>: </para>
          <programlisting language="java"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/chart/BooksByGenre.java" encoding="UTF-8" parse="text"/></programlisting>
          <para>Экземпляр этого класса содержит количество книг определенного жанра. Далее необходимо зарегистрировать класс сущности в файле <filename>metadata.xml</filename> модуля <structname>global</structname>:</para>
          <programlisting language="xml">&lt;metadata-model root-package=&quot;com.sample.library&quot;&gt;
        &lt;class&gt;com.sample.library.entity.BooksByGenre&lt;/class&gt;
    &lt;/metadata-model&gt;</programlisting>
        </listitem>
        <listitem>
          <para>Для создания интерфейса и класса сервиса можно воспользоваться CUBA Studio. Для этого откройте вкладку <guilabel>Services</guilabel>  на панели навигатора и нажмите на кнопку <guibutton>New</guibutton>. В открывшемся окне установите в поле <guilabel>Interface</guilabel> значение <userinput>com.sample.library.service.StatisticsService</userinput>. В полях <guilabel>Bean</guilabel> и <guilabel>Service name</guilabel> будут сгенерированы подходящие значения <userinput>com.sample.library.service.StatisticsServiceBean</userinput> и <userinput>library_StatisticsService</userinput> соответственно. Сохраните изменения. </para>
          <para>Откройте интерфейс сервиса <code>StatisticsService</code> в IDE и объявите в нем методы получения данных из базы:</para>
          <programlisting language="java"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/chart/StatisticsService.java" encoding="UTF-8" parse="text"/></programlisting>
        </listitem>
        <listitem>
          <para>Далее откройте класс сервиса <code>StatisticsServiceBean</code> и замените его содержимое на следующий код:</para>
          <programlisting language="java"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/chart/StatisticsServiceBean.java" encoding="UTF-8" parse="text"/></programlisting>
          <para>Метод <code>getCountOfBooksByGenre()</code> возвращает количество книг каждого жанра в виде списка сущностей <code>BooksByGenre</code>. Метод <code>getTopPublishers(int count)</code> сортирует издателей по убыванию количества экземпляров выпущенных ими книг, находящихся в библиотеке, и возвращает первые <code>count</code> издателей. Метод <code>getCountOfBooksByPublisherAndYear()</code> возвращает количество книг, выпущенных издателями в определенном году.</para>
        </listitem>
      </orderedlist>
    </section>
    <section id="qs_adding_charts">
      <title>Создание диаграмм</title>
      <simplesect>
        <title>XML-дескриптор экрана</title>
        <para>Откройте в CUBA Studio вкладку <guilabel>Screens</guilabel> и создайте экран в модуле <structname>web</structname>. Введите значение  <userinput>com/sample/library/web/charts/statistics.xml</userinput> в поле <guilabel>Reference</guilabel>. В полях <guilabel>Id</guilabel>, <guilabel>Controller Name</guilabel> и <guilabel>Messages Pack</guilabel> будут сгенерированы подходящие значения. Сохраните изменения. Далее перейдите на вкладку <guilabel>XML</guilabel> и замените ее содержимое на следующий код:</para>
        <programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/chart/statistics.xml" encoding="UTF-8" parse="text"/></programlisting>
        <para>В корневой элемент дескриптора экрана добавлен атрибут <sgmltag>xmlns:chart</sgmltag>:</para>
        <programlisting language="xml">&lt;window xmlns:chart=&quot;http://schemas.haulmont.com/charts/charts.xsd&quot;
    ...
    &gt;</programlisting>
        <para>Созданный нами экран содержит панель с двумя вкладками. На первой находится круговая диаграмма, представляющая распределение книг по жанрам:</para>
        <programlisting language="xml">&lt;chart:pieChart id=&quot;pieChart&quot;
                    angle=&quot;30&quot;
                    balloonText=&quot;[[genre]] - [[percents]]%&quot;
                    datasource=&quot;pieDs&quot;
                    depth3D=&quot;15&quot;
                    height=&quot;100%&quot;
                    titleField=&quot;genre&quot;
                    valueField=&quot;countOfBooks&quot;
                    width=&quot;100%&quot;&gt;
        &lt;chart:exportConfig menuTop=&quot;0px&quot;&gt;
            &lt;chart:menuItems&gt;
                &lt;chart:menu format=&quot;PNG&quot;
                            icon=&quot;VAADIN/resources/amcharts/images/export.png&quot;/&gt;
            &lt;/chart:menuItems&gt;
        &lt;/chart:exportConfig&gt;
    &lt;/chart:pieChart&gt;</programlisting>
        <para>Даграмма получает данные из источника <code>pieDs</code>, указанного в атрибуте <code>datasource</code>. Для отображения названий и значений используются атрибуты <code>genre</code> и <code>countOfBooks</code> сущности <code>BooksByGenre</code>, список экземпляров которой находится в источнике данных. С источником данных соединена также таблица, поэтому она отображает те же данные, что и диаграмма.</para>
        <para>Компонент <sgmltag>pieChart</sgmltag> содержит следующие атрибуты:</para>
        <itemizedlist>
          <listitem>
            <para><sgmltag>angle</sgmltag> - определяет угол наклона диаграммы. Может принимать значения от <literal>0</literal> до <literal>90</literal>.</para>
          </listitem>
          <listitem>
            <para><sgmltag>balloonText</sgmltag> - определяет текст всплывающей подсказки при наведении на отделяемую часть диаграммы. Доступны для использования тэги <literal>[[value]]</literal>, <literal>[[title]]</literal>, <literal>[[persents]]</literal>, <literal>[[description]]</literal>, а также ключи из <code>DataItem</code>, список которых хранится в экземпляре <code>DataProvider</code>, либо имена атрибутов сущности в источнике данных.</para>
          </listitem>
          <listitem>
            <para><sgmltag>depth3D</sgmltag> - толщина диграммы. При использовании совместно с атрибутом <sgmltag>angle</sgmltag> позволяет создать эффект объема.</para>
          </listitem>
          <listitem>
            <para><sgmltag>titleField</sgmltag> - ключ из набора пар, содержащихся в объектах <code>DataItem</code>, список которых хранится в  экземпляре <code>DataProvider</code>, по которому будет взято значение для заголовка сектора в круговой диаграмме.</para>
          </listitem>
          <listitem>
            <para><sgmltag>valueField</sgmltag> - ключ из набора пар, содержащихся в объектах <code>DataItem</code>, список которых хранится в  экземпляре <code>DataProvider</code>, по которому будет взято значение для сектора.</para>
          </listitem>
        </itemizedlist>
        <para>Компонент <code>pieChart</code> содержит следующие элементы:</para>
        <itemizedlist>
          <listitem>
            <para><sgmltag>chart:legend</sgmltag> - определяет легенду графика. Атрибут <sgmltag>position</sgmltag> определяет положение легенды относительно диаграммы, <sgmltag>markerType</sgmltag> -  форму маркера, помечающего информацию о каждом секторе диаграммы.</para>
          </listitem>
          <listitem>
            <para><sgmltag>chart:exportConfig</sgmltag> - добавляет возможность сохранить полученный график. Атрибуты <sgmltag>menuTop</sgmltag>, <sgmltag>menuLeft</sgmltag>, <sgmltag>menuRight</sgmltag>, <sgmltag>menuBottom</sgmltag> позволяют задать положение кнопки сохранения. В примере кнопка располагается в правом верхнем углу диаграммы.</para>
            <para>Элемент <sgmltag>chart:menuItems</sgmltag> содержит настройки   сохранения. Кроме используемого в примере формата <filename>png</filename> поддерживается сохранение в форматах <filename>jpg</filename>, <filename>svg</filename> и <filename>pdf</filename>. Атрибут <sgmltag>icon</sgmltag> содержит путь к изображению, которое будет использоваться в качестве кнопки импорта.</para>
          </listitem>
        </itemizedlist>
        <para>Вторая вкладка содержит график, отражающий количество книг, выпущенных в разные годы несколькими издательствами:</para>
        <programlisting language="xml">&lt;chart:serialChart id=&quot;stackedChart&quot;
                       categoryField=&quot;year&quot;
                       height=&quot;100%&quot;
                       width=&quot;100%&quot;&gt;
       &lt;chart:chartCursor/&gt;
       &lt;chart:legend markerType=&quot;TRIANGLE_RIGHT&quot;
                     position=&quot;TOP&quot;
                     valueAlign=&quot;LEFT&quot;/&gt;
       &lt;chart:categoryAxis startOnAxis=&quot;true&quot;
                           title=&quot;msg://year&quot;/&gt;
       &lt;chart:valueAxes&gt;
          &lt;chart:axis position=&quot;LEFT&quot;
                      stackType=&quot;REGULAR&quot;
                      title=&quot;msg://countOfBooks&quot;/&gt;
       &lt;/chart:valueAxes&gt;
       &lt;chart:exportConfig menuTop=&quot;0px&quot;&gt;
          &lt;chart:menuItems&gt;
             &lt;chart:menu format=&quot;PNG&quot;
                         icon=&quot;VAADIN/resources/amcharts/images/export.png&quot;/&gt;
          &lt;/chart:menuItems&gt;
       &lt;/chart:exportConfig&gt;
    &lt;/chart:serialChart&gt;</programlisting>
        <para>Эта диаграмма получает данные через <code>DataProvider</code>, созданный в контроллере (см. ниже), поэтому атрибут <code>datasource</code> не указан.</para>
        <para>Атрибуты <sgmltag>chart:serialChart</sgmltag>:</para>
        <itemizedlist>
          <listitem>
            <para><sgmltag>categoryField</sgmltag> - ключ из набора пар, содержащихся в объектах <code>DataItem</code>, список которых хранится в  экземпляре <code>DataProvider</code>, по которому будут взяты значения для  подписи оси категорий.</para>
          </listitem>
        </itemizedlist>
        <para>Элементы <sgmltag>chart:serialChart</sgmltag>: </para>
        <itemizedlist>
          <listitem>
            <para><sgmltag>chart:chartCursor</sgmltag> - необязательный элемент, добавляющий на график курсор, который следует за движениями мыши и отображает всплывающую подсказку со значением графика, соответствующим точке нахождения курсора.</para>
          </listitem>
          <listitem>
            <para><sgmltag>chart:categoryAxis</sgmltag> - элемент, описывающий ось категорий. Установка атрибуту <sgmltag>startOnAxis</sgmltag> значения <literal>true</literal> дает указание начинать отрисовывать график сразу от оси значений. По умолчанию этот атрибут имеет значение <literal>false</literal>. В этом случае между осью значений и графиком имеется некоторый помежуток. Атрибут <sgmltag>title</sgmltag> задает заголовок оси категорий.</para>
          </listitem>
          <listitem>
            <para><sgmltag>chart:valueAxes</sgmltag> - элемент, описывающий вертикальные оси значений. В данном случае используется только одна ось, описываемая элементом <sgmltag>chart:axis</sgmltag>. Атрибут <sgmltag>position</sgmltag> задает положение оси значений относительно диаграммы. Установка атрибуту <sgmltag>stackType</sgmltag> значения <literal>REGULAR</literal> говорит о том, что используется диаграмма с накоплением. По умолчанию значение этого атрибута - <literal>none</literal>, в таком случае используется диаграмма без накопления.</para>
          </listitem>
        </itemizedlist>
      </simplesect>
      <simplesect>
        <title>Контроллер экрана</title>
        <para>Перейдите на вкладку <guilabel>Controller</guilabel> и замените ее содержимое на следующий код:</para>
        <programlisting language="java"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/chart/Statistics.java" encoding="UTF-8" parse="text"/></programlisting>
        <para>В методе <code>initPieChart()</code> происходит заполнение источника данных <code>pieDs</code> данными, полученными из сервиса. Метод <code>refresh()</code> производит инициализацию источника данных. Этот метод необходимо вызвать, несмотря на атрибут <code>refreshMode=&quot;NEVER&quot;</code>, установленный в XML-дескрипторе. </para>
        <para>В методе <code>initStackedChart(List&lt;String&gt; allPublishers)</code> происходит установка данных в диаграмму с накоплением. Диаграммы подобного типа показывают отношение отдельных составляющих к их совокупному значению. В метод передается список издателей, выпустивших наибольшее количество экземпляров книг, находящихся в библиотеке. Для каждого издателя строится график, представляющий количество книг, выпущенных в разные годы. Графику соответствует экземпляр класса <code>Graph</code>. Рассмотрим методы настройки графиков:</para>
        <itemizedlist>
          <listitem>
            <para><code>setFillAlphas(0.6)</code> - устанавливает степень непрозрачности заливки.</para>
          </listitem>
          <listitem>
            <para><code>setLineAlpha(0.4)</code> - устанавливает толщину линии графика. Допустимые значения от <literal>0</literal> до <literal>1</literal>.</para>
          </listitem>
          <listitem>
            <para><code>setTitle(publisher)</code> - устанавливает заголовок графика.</para>
          </listitem>
          <listitem>
            <para><code>setType(GraphType.LINE)</code> - устанавливает тип отбражения данных.</para>
          </listitem>
          <listitem>
            <para><code>setValueField(publisher)</code> - ключ из набора пар, содержащихся в объектах <code>DataItem</code>, список которых хранится в  экземпляре <code>DataProvider</code>, по которому будет взято значение для графика.</para>
          </listitem>
          <listitem>
            <para><code>setBaloonText(publisher + &quot; - [[year]] year: [[&quot; + publisher + &quot;]] books&quot;)</code> - устанавливает значение всплывающей подсказки.</para>
          </listitem>
        </itemizedlist>
      </simplesect>
      <simplesect>
        <title>Скриншоты диаграмм</title>
        <para>Посмотрим, как созданный нами экран выглядит в работающем приложении. Добавьте созданный экран в меню, затем  пересоберите проект командой <guimenu>Run</guimenu> -&gt; <guimenu>Restart application server</guimenu> и зайдите в систему. Откройте экран со статистикой.</para>
        <figure>
          <title>Круговая диаграмма</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/chart/pie_chart.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure>
          <title>Диаграмма с накоплением</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/chart/stacked_chart.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>На диаграмме с накоплением проиллюстрирована работа курсора, который выводит подробную информацию о количестве книг, выпущенных издателями в выбранном году.</para>
      </simplesect>
    </section>
    <section id="section_use_of_events">
      <title>Использование событий</title>
      <para>Проиллюстрируем использование событий. Добавим в экран,  созданный в разделе <xref linkend="qs_adding_charts"/>, обработку отделения элемента круговой диаграммы пользователем.  Откройте XML-дескриптор экрана в IDE, затем инжектируйте диаграмму:</para>
      <programlisting language="java">@Inject
    private Chart pieChart;</programlisting>
      <para>Далее добавьте слушателя в методе <code>initPieChart()</code>:</para>
      <programlisting language="java"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/chart/SlicePullOutListener.java" encoding="UTF-8" parse="text"/></programlisting>
      <para>Для просмотра результата пересоберите проект командой <guimenu>Run</guimenu> -&gt; <guimenu>Restart application server</guimenu> и зайдите в систему. Откройте экран и нажмите на один из элементов круговой диаграммы для его отделения.</para>
      <figure>
        <title>Диаграмма с обработкой события отделения элемента</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/chart/chart_with_event.png"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>
</chapter>

<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<section id="portal">
  <title>Компоненты портала</title>
  <para>В данном руководстве <firstterm>порталом</firstterm> называется клиентский <link linkend="app_tiers">блок</link>, способный решать следующие задачи:<itemizedlist>
      <listitem>
        <para>предоставлять альтернативный веб-интерфейс, как правило, предназначенный для пользователей за пределами организации;</para>
      </listitem>
      <listitem>
        <para>предоставлять интерфейс для интеграции с мобильными приложениями и со сторонними системами.</para>
      </listitem>
    </itemizedlist></para>
  <para>Конкретное приложение может содержать несколько портальных модулей, предназначенных для различных целей, например, в случае приложения, автоматизирующего бизнес такси, это может быть публичный веб-сайт для клиентов, интеграционный модуль мобильного приложения заказа такси, интеграционный модуль мобильного приложения водителей, и т.д. </para>
  <para><link linkend="base_projects">Базовый проект</link> <structname>cuba</structname> платформы содержит в своем составе модуль <structname>portal</structname>, который является заготовкой для создания порталов в проектах. Он, во-первых, предоставляет базовую функциональность клиентского блока для работы с <structname>Middleware</structname>, а во-вторых, включает в себя универсальный <link linkend="rest_api">REST API</link> для работы с сущностями.</para>
  <section>
    <title>Базовая функциональность</title>
    <para>Рассмотрим основные компоненты, предоставляемые платформой для построения портала.<itemizedlist>
        <listitem>
          <para><code>PortalAppContextLoader</code> - загрузчик <code>
              <link linkend="appContext">AppContext</link>
            </code>, должен быть зарегистрирован в элементе <sgmltag>listener</sgmltag> файла <filename>web.xml</filename>.</para>
        </listitem>
        <listitem>
          <para><code>PortalDispatcherServlet</code> - центральный сервлет, распределяющий запросы по контроллерам <application>Spring MVC</application>, как для веб-интерфейса, так и для REST API. Набор файлов конфигурации контекста Spring определяется свойством приложения <property>
              <link linkend="cuba.dispatcherSpringContextConfig">cuba.dispatcherSpringContextConfig</link>
            </property>. Данный сервлет должен быть зарегистрирован в <filename>web.xml</filename> и отображен на корневой URL веб-приложения.</para>
        </listitem>
        <listitem>
          <para><code>App</code> - объект, содержащий информацию о текущем HTTP запросе и ссылку на объект <code>Connection</code>. Экземпляр <code>App</code> может быть получен в прикладном коде вызовом статического метода <code>App.getInstance()</code>.</para>
        </listitem>
        <listitem>
          <para><code>Connection</code> - позволяет выполнять логин и логаут пользователя на <structname>Middleware</structname>.</para>
        </listitem>
        <listitem>
          <para><code>PortalSession</code> - специфичесий для портала объект <link linkend="userSession">пользовательской сессии</link>. Возвращается интерфейсом инфраструктуры <code>
              <link linkend="userSessionSource">UserSessionSource</link>
            </code>, а также статическим методом <code>PortalSessionProvider.getUserSession()</code>.</para>
          <para>Имеет дополнительный метод <code>isAuthenticated()</code>, возвращающий <code>true</code>, если данная сессия принадлежит неанонимному, т.е. явно зарегистрировавшемуся с логином и паролем, пользователю.</para>
          <para>При первом обращении некоторого пользователя к порталу <code>SecurityContextHandlerInterceptor</code> создает для него (или привязывает уже имеющуюся) анонимную сессию, регистрируясь на <structname>Middleware</structname> с именем пользователя, указанным в свойстве приложения <property>
              <link linkend="cuba.portal.anonymousUserLogin">cuba.portal.anonymousUserLogin</link>
            </property>. Регистрация производится методом <code>
              <link linkend="login">loginTrusted()</link>
            </code>, поэтому в блоке портала необходимо установить также свойство <property>
              <link linkend="cuba.trustedClientPassword">cuba.trustedClientPassword</link>
            </property>. Таким образом, любой анонимный пользователь портала может работать с сервисами <structname>Middleware</structname> с правами пользователя <property>cuba.portal.anonymousUserLogin</property>.</para>
          <para>Если портал содержит страницу регистрации пользователя с именем и паролем, то после выполнения <code>Connection.login()</code> при обработке запросов <code>SecurityContextHandlerInterceptor</code> устанавливает в потоке выполнения пользовательскую сессию явно зарегистрированного пользователя, и работа с <structname>Middleware</structname> происходит от его имени.</para>
        </listitem>
        <listitem>
          <para><code>PortalLogoutHandler</code> - обрабатывает навигацию на страницу логаута. Должен быть зарегистрирован в файле <filename>portal-security-spring.xml</filename> проекта.</para>
        </listitem>
      </itemizedlist></para>
    <para>Пример портала, содержащего страницу регистрации пользователей, включен в шаблон проекта,  рассмотренный в  <xref linkend="qs_setup"/></para>
  </section>
  <section id="rest_api">
    <title>REST API</title>
    <para>Универсальный REST API платформы позволяет выполнять загрузку и сохранение  любых сущностей модели данных приложения посредством отправки простых HTTP запросов. Это открывает возможность легкой интеграции со сторонними приложениями самого широкого спектра − от JavaScript кода, выполняющегося в  браузере, до произвольных систем, работающих на Java, .NET, PHP или любой другой платформе. </para>
    <para>Основные возможности API:<itemizedlist>
        <listitem>
          <para>загрузка экземпляров сущностей из базы данных по идентификатору или по JPQL запросу с параметрами</para>
        </listitem>
        <listitem>
          <para>сохранение новых и измененных экземпляров, удаление экземпляров</para>
        </listitem>
        <listitem>
          <para>получение описания модели данных в формате HTML</para>
        </listitem>
        <listitem>
          <para>представление данных в форматах JSON и XML на выбор</para>
        </listitem>
        <listitem>
          <para>аутентификация пользователя</para>
        </listitem>
        <listitem>
          <para>вызов сервисов</para>
        </listitem>
      </itemizedlist></para>
    <para>Все функции работают с данными в кодировке UTF-8. </para>
    <section>
      <title>Включение в проект</title>
      <para>REST API реализован в модуле <structname>portal</structname> базового проекта <structname>cuba</structname>, поэтому для его использования необходимо создать модуль <structname>portal</structname> в проекте приложения. Пример содержится в шаблоне проекта,  рассмотренном в  <xref linkend="qs_setup"/> </para>
      <para>Основные элементы настройки:<itemizedlist>
          <listitem>
            <para>Добавить контроллеры REST API в контекст Spring, определяемый файлом <filename>
                <link linkend="dispatcher-spring.xml">portal-dispather-spring.xml</link>
              </filename>:<programlisting language="xml">&lt;context:component-scan base-package=&quot;com.haulmont.cuba.portal.restapi&quot;/&gt;</programlisting></para>
          </listitem>
          <listitem>
            <para>Установить режим доступа в <filename>portal-security-spring.xml</filename>:<programlisting language="xml">&lt;intercept-url pattern=&quot;/api/**&quot; access=&quot;IS_AUTHENTICATED_ANONYMOUSLY&quot;/&gt;</programlisting></para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section>
      <title>Описание функций</title>
      <para>При стандартных настройках модуля <structname>portal</structname> все запросы к REST API должны иметь URL, начинающийся с <literal>{host:port}/app-portal/api</literal>.</para>
      <para>Все функции требуют наличия сессии аутентифицированного пользователя, то есть сначала  необходимо выполнить логин, и передавать полученный идентификатор сессии в последующие запросы.</para>
      <section id="rest_api.login">
        <title>Логин</title>
        <para>Логин можно выполнить либо GET, либо POST запросом.</para>
        <variablelist>
          <varlistentry>
            <term>GET запрос</term>
            <listitem>
              <para>В случае GET запроса сформируйте URL <code>{host:port}/app-portal/api/login</code> с параметрами:</para>
              <itemizedlist>
                <listitem>
                  <para><emphasis role="bold">u</emphasis> − логин пользователя</para>
                </listitem>
                <listitem>
                  <para><emphasis role="bold">p</emphasis> − пароль пользователя</para>
                </listitem>
                <listitem>
                  <para><emphasis role="bold">l</emphasis> −  локаль пользователя (опционально)</para>
                </listitem>
              </itemizedlist>
              <para>Например:</para>
              <programlisting>http://localhost:8080/app-portal/api/login?u=admin&amp;p=admin&amp;l=ru</programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>POST запрос</term>
            <listitem>
              <para>Для выполнения логина через POST необходимо выполнить запрос по адресу <code>{host:port}/app-portal/api/login</code>, при этом в теле запроса передается JSON (заголовок <code>Content-Type</code> имеет значение <code>application/json</code>) или форма (заголовок <code>Content-Type</code> имеет значение <code>application/x-www-form-urlencoded</code>)</para>
              <para>Пример  формата JSON:</para>
              <programlisting language="json">{
  &quot;username&quot; : &quot;admin&quot;,
  &quot;password&quot; : &quot;admin&quot;,
  &quot;locale&quot; : &quot;en&quot;
}</programlisting>
              <para>Пример формы:</para>
              <programlisting>username: admin
password: admin
locale: en</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>В ответ сервис вернет <code>userSessionId</code> в теле ответа и статус 200, либо статус 401, если аутентификация не удалась.</para>
      </section>
      <section id="rest_api.logout">
        <title>Логаут</title>
        <para>Логаут также можно выполнить либо GET, либо POST запросом.</para>
        <variablelist>
          <varlistentry>
            <term>GET запрос</term>
            <listitem>
              <para>В случае GET запроса сформируйте URL <code>{host:port}/app-portal/api/logout</code> с параметром <emphasis role="bold">session</emphasis> - идентификатором текущей сессии, полученным вызовом <code>login</code>.</para>
              <para>Например:</para>
              <programlisting>http://localhost:8080/app-portal/api/logout?session=64f7d59d-2cf5-acfb-f4d3-f55b7882da72</programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>POST запрос</term>
            <listitem>
              <para>Для выполнения логина через POST необходимо выполнить запрос по адресу <code>{host:port}/app-portal/api/logout</code>, при этом в теле запроса передается JSON (заголовок <code>Content-Type</code> имеет значение <code>application/json</code>) или форма (заголовок <code>Content-Type</code> имеет значение <code>application/x-www-form-urlencoded</code>)</para>
              <para>Пример  формата JSON:</para>
              <programlisting language="json">{
  &quot;session&quot; : &quot;64f7d59d-2cf5-acfb-f4d3-f55b7882da72&quot;
}</programlisting>
              <para>Пример формы:</para>
              <programlisting>session: 64f7d59d-2cf5-acfb-f4d3-f55b7882da72</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>В ответ сервис вернет  статус 200.</para>
      </section>
      <section id="rest_api.find">
        <title>Загрузка экземпляра персистентного объекта из базы данных по идентификатору</title>
        <para>Для получения объекта необходимо выполнить GET запрос <code>{host:port}/app-portal/api/find.&lt;format&gt;?e=&lt;entityRef&gt;&amp;s=&lt;sessionId&gt;</code> с параметрами:</para>
        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">e</emphasis> − описание требуемого объекта в формате <code>&lt;entity-id&gt;</code> или <code>&lt;entity-id-view&gt;</code>(см. класс <code>EntityLoadInfo</code>), например, <code>sales$Order-43c61345-d23c-48fe-ab26-567504072f05-_local</code>. То есть формат позволяет указать  требуемое <link linkend="views">представление</link> загруженного объекта.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">s</emphasis> − идентификатор текущей сессии.</para>
          </listitem>
        </itemizedlist>
        <para>Элемент запроса <emphasis role="bold">format</emphasis>  задает формат получения результата. Принимает два значения: <code>xml</code> или <code>json</code>.</para>
        <para>Пример запроса, возвращающего результат в формате <code>xml</code>:</para>
        <programlisting>http://localhost:8080/app-portal/api/find.xml?e=sales$Order-60885987-1b61-4247-94c7-dff348347f93-orderWithCustomer&amp;s=c38f6bf4-fae7-4ee6-a412-9d93ff243f23</programlisting>
        <para>Пример запроса, возвращающего результат в формате <code>json</code></para>
        <programlisting>http://localhost:8080/app-portal/api/find.json?e=sales$Order-60885987-1b61-4247-94c7-dff348347f93-orderWithCustomer&amp;s=c38f6bf4-fae7-4ee6-a412-9d93ff243f23</programlisting>
      </section>
      <section id="rest_api.query">
        <title>Выполнение JPQL запроса для выборки данных</title>
        <para>Для выполнения запроса необходимо выполнить GET запрос <code>{host:port}/app-portal/api/query.&lt;format&gt;?e=&lt;entity&gt;&amp;s=&lt;sessionId&gt;&amp;q=&lt;encoded query string&gt;&amp;param1=&lt;value 1&gt;$param1_type=&lt;type 1&gt;&amp;paramN=&lt;value N&gt;&amp;paramN_type=&lt;type N&gt;&amp;view=&lt;viewName&gt;&amp;firstResult=&lt;firstResult&gt;&amp;maxResults=&lt;maxResults&gt;</code> с параметрами:</para>
        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">e</emphasis> − имя сущности</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">q</emphasis> − строка запроса к данным на <link linkend="jpql">JPQL</link>. Запрос может содержать параметры. Их значения указываются как значения одноименных параметров HTTP запроса.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">s</emphasis> − идентификатор текущей сессии</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">view</emphasis> −  опционально, <link linkend="views">представление</link>, с которым требуется загружать данные</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">max</emphasis> − опционально, максимальное количество строк возвращаемых данных (аналогично JPA   <code>setMaxResults</code>)</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">first</emphasis> − опционально, номер первой строки возвращаемых данных (аналогично JPA <code>setFirstResult</code>)</para>
          </listitem>
        </itemizedlist>
        <para><emphasis role="bold">format</emphasis>  задает формат получения результата. Принимает два значения: <code>xml</code> или <code>json</code>.</para>
        <para>Например:</para>
        <programlisting>http://localhost:8080/app-portal/api/query.json?e=sales$Customer&amp;q=select%20c%20from%20sales$Customer%20c&amp;s=748e5d3f-1eaf-4b38-bf9d-8d838587367d&amp;view=_local</programlisting>
        <programlisting>http://localhost:8080/app-portal/api/query.json?e=sales$Customer&amp;q=select%20c%20from%20sales$Customer%20c%20where%20c.name=:specName&amp;s=748e5d3f-1eaf-4b38-bf9d-8d838587367d&amp;specName=Петров</programlisting>
        <para>Для каждого из передаваемых параметров можно явно указать его тип, добавив в запрос одноименный параметр с суффиксом <code>_type</code>. Например:</para>
        <programlisting>http://localhost:8080/app-portal/api/query.json?e=sales$Customer&amp;q=select%20c%20from%20sales$Customer%20c%20where%20c.name=:specName&amp;s=748e5d3f-1eaf-4b38-bf9d-8d838587367d&amp;specName=Петров&amp;specName_type=string</programlisting>
        <para>Указание типа параметра не является обязательным, но позволяет  избежать ошибок парсинга, если система не сможет определить тип.</para>
        <para>В общем случае тип стоит указывать лишь для строковых параметров, которые по какой-либо причине имеют формат более узких типов (дат, чисел, uuid), но должны интерпретироваться именно как строки.</para>
        <para>Список доступных типов можно увидеть в описании мета-модели (пункт меню <guimenu>Помощь</guimenu> −&gt; <guimenu>Модель данных</guimenu>) или получив <link linkend="getHTMLModel">HTML-описание модели</link>.</para>
      </section>
      <section id="rest_api.commit">
        <title>Коммит новых и измененных экземпляров, удаление</title>
        <para>Функция коммита позволяет выполнять операции над переданными ей объектами и возвращает их старое и новое состояния. Формат результата определяется тем, какой формат (JSON или XML) был использован для запроса (заголовок <code>Content-Type</code>). </para>
        <variablelist>
          <varlistentry>
            <term>Формат JSON</term>
            <listitem>
              <para>В качестве заголовка  <code>Content-Type</code> следует использовать  значение <code>application/json</code></para>
              <para>Создание  сущности покупателя с автоматически сгенерированным идентификатором:</para>
              <programlisting language="json">{
  &quot;commitInstances&quot;: [{
      &quot;id&quot;: &quot;NEW-sales$Customer&quot;,
      &quot;name&quot;: &quot;Saltikov&quot;,
      &quot;email&quot;: &quot;saltikov@mail.com&quot;
      }
  ]
}</programlisting>
              <para>Создание  сущности покупателя с указанным идентификатором:</para>
              <programlisting language="json">{
  &quot;commitInstances&quot;: [{
      &quot;id&quot;: &quot;NEW-sales$Customer-b32a6412-d4d9-11e2-a20b-87b22b1460c7&quot;,
      &quot;name&quot;: &quot;Titov&quot;,
      &quot;email&quot;: &quot;titov@mail.com&quot;
      }
  ]
}</programlisting>
              <para>Создание  сущности заказа с указанием ссылки на новую сущность покупателя и заполнение атрибутами сущности данного покупателя:</para>
              <programlisting language="json">{
  &quot;commitInstances&quot;: [{
      &quot;id&quot;: &quot;NEW-sales$Order&quot;,
      &quot;amount&quot;: 15,
      &quot;customer&quot;:
          {&quot;id&quot;: &quot;NEW-sales$Customer-b32e43e8-d4d9-11e2-8c8b-2b2939d67fff&quot;
          }
      },{
          &quot;id&quot;: &quot;sales$Customer-b32e43e8-d4d9-11e2-8c8b-2b2939d67fff&quot;,
          &quot;name&quot;: &quot;Dudkin&quot;,
          &quot;email&quot;: &quot;dudkin@mail.com&quot;
         }
  ]
}</programlisting>
              <para>Изменение одновременно двух сущностей покупателей:</para>
              <programlisting language="json">{
  &quot;commitInstances&quot;: [{
        &quot;id&quot;: &quot;sales$Customer-b32e43e8-d4d9-11e2-8c8b-2b2939d67fff&quot;,
        &quot;email&quot;: &quot;dudkin@mail.ru&quot;
      },
      {
        &quot;id&quot;: &quot;sales$Customer-32261b09-b7f7-4b8c-88cc-6dee6fa8e6ab&quot;,
        &quot;email&quot;: &quot;saltikov@mail.ru&quot;
      }
  ]
}</programlisting>
              <para>Удаление сущности покупателя с поддержкой <link linkend="soft_deletion">мягкого удаления</link>:</para>
              <programlisting language="json">{
  &quot;removeInstances&quot;: [{
      &quot;id&quot;: &quot;sales$Customer-b32e43e8-d4d9-11e2-8c8b-2b2939d67fff&quot;
      }
  ],
  &quot;softDeletion&quot;: &quot;true&quot;
}</programlisting>
              <itemizedlist>
                <listitem>
                  <para>Массив <code>commitInstances</code> содержит создаваемые или изменяемые сущности. </para>
                  <itemizedlist>
                    <listitem>
                      <para>При создании  сущности в качестве значения поля <code>id</code> указывается значение  <code>NEW-&lt;entityName&gt;</code> или <code>NEW-&lt;entityName&gt;-&lt;entityId&gt;</code>.</para>
                    </listitem>
                    <listitem>
                      <para>При изменении сущности в качестве значения поля <code>id</code> указывается значение <code>&lt;entityName&gt;-&lt;entityId&gt;</code>. </para>
                    </listitem>
                    <listitem>
                      <para>Далее в списке элементов через запятую указываются названия атрибутов создаваемой или изменяемой сущности и их значения.</para>
                      <para>Если при изменении сущности требуется установить какой-либо атрибут в <code>null</code>, то в идентификаторе необходимо указать также представление, включающее этот  атрибут. Например:<programlisting language="json">{
  &quot;commitInstances&quot;: [{
      &quot;id&quot;: &quot;sales$Customer-b32a6412-d4d9-11e2-a20b-87b22b1460c7-customer-edit&quot;,
      &quot;name&quot;: &quot;John Doe&quot;,
      &quot;channel&quot;: null
      }
  ]
}</programlisting>Здесь представление <code>customer-edit</code> должно содержать атрибут <code>channel</code>, в противном случае его значение не изменится. Для установки в <code>null</code> локального атрибута можно указать всегда доступное  представление <code>_local</code>.</para>
                        <para>В случае запроса в формате XML установка поля в null осуществляется с помощью атрибута <code>null="true"</code>. Пример:</para>
                        <programlisting language="xml"><![CDATA[
<CommitRequest xmlns="http://schemas.haulmont.com/cuba/5.3/restapi-commit-v2.xsd">
    <commitInstances>
        <instance id="Order-9873c8a8-d4e7-11e2-85c0-33423bc08c84">
            <field name="amount" null="true"/>
            <reference name="customer" null="true"/>
        </instance>
    </commitInstances>
</CommitRequest>
]]>                        </programlisting>
                    </listitem>
                  </itemizedlist>
                </listitem>
                <listitem>
                  <para>Массив <code>removeInstances</code> содержит удаляемые объекты. При удалении объекта обязательно указывать значение поля <code>id</code>. Перед удалением будет выполнен <code>merge()</code> переданных объектов, что позволяет, например, проверить, не изменилась ли версия удаляемого объекта.</para>
                </listitem>
                <listitem>
                  <para>Поле <code>softDeletion</code> управляет режимом <link linkend="soft_deletion">мягкого удаления</link>.</para>
                </listitem>
              </itemizedlist>
              <para>Функция вызывается посредством POST обращения к <code>{host:port}/app-portal/api/commit?s=&lt;sessionId&gt;</code>.  JSON передается в теле запроса. Функция возвращает массив объектов JSON. Например, при изменении поля <code>email</code> у сущности  покупателя будет возвращен следующий массив объектов JSON:</para>
              <programlisting language="json"><![CDATA[
[
   {"id":"sales$Customer-32261b09-b7f7-4b8c-88cc-6dee6fa8e6ab",
       "createTs":"2013-06-14T14:07:15.040",
       "createdBy":"admin",
       "deleteTs":null,
       "deletedBy":null,
       "email":"saltikovvvv@mail.ru",
       "name":"Saltikov",
       "updateTs":"2013-06-14T15:07:03.463",
       "updatedBy":"admin",
       "version":"3"
   }
]
                  ]]></programlisting>
              <para>Первым внутри пары возвращается переданный объект, вторым −  модифицированный объект.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Формат XML</term>
            <listitem>
              <para>В качестве заголовка  <code>Content-Type</code> следует использовать  значение <code>text/xml</code></para>
              <para>Пример формата XML</para>
              <programlisting language="xml"><![CDATA[
<CommitRequest>
  <commitInstances>
      <instance id="sales$Order-9873c8a8-d4e7-11e2-85c0-33423bc08c84">
          <field name="date">2015-01-30</field>
          <field name="amount">3500.00</field>
          <reference name="customer" id="sales$Customer-32261b09-b7f7-4b8c-88cc-6dee6fa8e6ab"/>
      </instance>
  </commitInstances>
  <removeInstances>
      <instance id="sales$Customer-d67c10f0-4d28-4904-afca-4bc45654985d"/>
  </removeInstances>
  <softDeletion>true</softDeletion>
</CommitRequest>
                 ]]></programlisting>
              <para>Семантика полей XML-документа определяется в схеме <ulink url="http://schemas.haulmont.com/cuba/5.4/restapi-commit.xsd">http://schemas.haulmont.com/cuba/5.4/restapi-commit.xsd</ulink>.</para>
              <para>Функция вызывается посредством POST обращения к <code>{host:port}/app-portal/api/commit?s=&lt;sessionId&gt;</code>. XML  передается в теле запроса. Функция возвращает массив объектов XML вида</para>
              <programlisting language="xml"><![CDATA[
<instances>
   <instance ...>
   <instance ...>
</instances>              ]]></programlisting>
              <para>Схема, содержащая  описание результата вызова функции, находится  по адресу <ulink url="http://schemas.haulmont.com/cuba/5.4/restapi-instances.xsd">http://schemas.haulmont.com/cuba/5.4/restapi-instances.xsd</ulink></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="rest_download_file">
        <title>Загрузка файла из хранилища</title>
        <para>Для загрузки файла из <link linkend="file_storage">FileStorage</link> необходимо выполнить GET запрос <code>{host:port}/app-portal/api/download?f=&lt;fileDescriptorId&gt;&amp;s=&lt;sessionId&gt;</code> с параметрами:<itemizedlist>
            <listitem>
              <para><emphasis role="bold">f</emphasis> − идентификатор соответствующего экземпляра <code>FileDescriptor</code>.</para>
            </listitem>
            <listitem>
              <para><emphasis role="bold">s</emphasis> − идентификатор текущей сессии.</para>
            </listitem>
          </itemizedlist></para>
      </section>
      <section id="getHTMLModel">
        <title>Получение описания модели данных в формате HTML</title>
        <para>Обращение GET по адресу <code>/printDomain?s=&lt;sessionId&gt;</code> позволяет разработчику получить описание модели данных. Сервис возвращает простой HTML, содержайщий список имен базовых типов данных, описание всех сущностей метамодели, их атрибутов и определенных для сущностей <link linkend="views">представлений</link>.</para>
      </section>
      <section id="rest_api.deployViews">
        <title>Cоздание новых представлений на сервере</title>
        <para>Запрос POST по адресу <code>/deployViews?s=&lt;sessionId&gt;</code> позволяет загрузить на сервер нужные клиенту определения объектов-<link linkend="views">представлений</link>. Объекты-представления отсылаются в виде стандартного xml-описания представления, используемого в платформе. XML помещается в тело запроса. Подробнее о формате см. <xref linkend="views"/></para>
      </section>
      <section id="rest_api.invokeService">
          <title>Вызов сервисов</title>
          <para>Доступные для вызова методы <link linkend="services">сервисов</link> перечислены в конфигурационном файле, имя которого задается свойством cuba.restServicesConfig.</para>
          <para>Пример файла конфигурации сервисов для REST API:</para>
          <programlisting language="xml"><![CDATA[
<services xmlns="http://schemas.haulmont.com/cuba/5.4/rest-services.xsd">
   <service name="refapp_PortalTestService">
      <method name="findAllCars"/>
      <method name="updateCarVin"/>
   </service>
</services>]]></programlisting>
          <para>Вызов метода сервиса можно осуществить как с помощью GET, так и с помощью POST запроса. POST запрос дополнительно позволяет передавать сущность или коллекцию сущностей в вызываемый метод.</para>
          <section>
              <title>Вызов сервиса с помощью GET запроса</title>
              <para>Формат запроса:</para>
              <programlisting><![CDATA[{host:port}/app-portal/api/service.<format>?service=<serviceName>&method=<methodName>&view=<view>&param0=<value 0>&paramN=<value N>&param0_type=<type 0>&paramN_type=<type N>&s=<sessionId>]]></programlisting>
            <itemizedlist>
                <listitem><code>format</code> - задает формат вывода результата. Принимает два значения: <code>xml</code> или <code>json</code></listitem>
                <listitem><code>service</code> - имя вызываемого сервиса</listitem>
                <listitem><code>method</code> - имя вызываемого метода</listitem>
                <listitem><code>view</code> - имя представления, по которому будет построено отображение результата, если метод возвращает сущность или коллекцию сущностей</listitem>
                <listitem><code>param0 .. paramN</code> - значения параметров метода</listitem>
                <listitem><code>param0_type .. paramN_type</code> - типы параметров метода</listitem>
                <listitem><code>s</code> - идентификатор текущей сессии</listitem>
            </itemizedlist>
            <para>Если сервис имеет лишь один метод с указанным именем и количеством параметров, то явное определение типов параметров не обязательно. В противном случае указывать типы параметров необходимо.</para>
          </section>
          <section>
              <title>Вызов сервиса с помощью POST запроса</title>
              <para>Формат запроса:</para><programlisting><![CDATA[{host:port}/app-portal/api/service?s=<sessionId>]]></programlisting>
              <itemizedlist>
                  <listitem><code>s</code> - идентификатор текущей сессии</listitem>
              </itemizedlist>
              <para>В теле запроса передается JSON или XML с описанием вызова метода.</para>
              <variablelist>
                  <varlistentry>
                      <term>Формат JSON</term>
                      <listitem>
                          <para>В качестве заголовка <code>Content-Type</code> следует использовать значение <code>application/json</code>.</para>
                          <programlisting language="json"><![CDATA[
{
  "service": "refapp_PortalTestService",
  "method": "updateCarVin",
  "view": "carEdit",
  "params": {
    "param0": {
      "id": "ref$Car-32261b09-b7f7-4b8c-88cc-6dee6fa8e6ab",
      "vin": "WV00001",
      "colour" : {
        "id": "ref$Colour-b32a6412-d4d9-11e2-a20b-87b22b1460c7",
        "name": "Red"
      },
      "driverAllocations": [
        {
          "id": "ref$DriverAllocation-b32e43e8-d4d9-11e2-8c8b-2b2939d67fff"
        },
        {
          "id": "NEW-ref$DriverAllocation"
        }
      ]
    },
    "param1": "WV00001",
    "param0_type": "com.haulmont.refapp.core.entity.Car",
    "param1_type": "java.lang.String"
  }
}
                          ]]>
                          </programlisting>
                          <para>Свойства передаваемого объекта:</para>
                          <itemizedlist>
                              <listitem><code>service</code> - имя вызываемого сервиса</listitem>
                              <listitem><code>method</code> - имя вызываемого метода</listitem>
                              <listitem><code>view</code> - имя представления, по которому будет построено отображение результата, если метод возвращает сущность или коллекцию сущностей</listitem>
                              <listitem><code>param0 .. paramN</code> - значения параметров метода</listitem>
                              <listitem><code>param0_type .. paramN_type</code> - типы параметров метода</listitem>
                          </itemizedlist>
                      </listitem>
                  </varlistentry>
                  <varlistentry>
                      <term>Формат XML</term>
                      <listitem>
                          <para>В качестве заголовка <code>Content-Type</code> следует использовать значение <code>text/xml</code>.</para>
                          <programlisting language="xml"><![CDATA[
<ServiceRequest xmlns="http://schemas.haulmont.com/cuba/5.4/restapi-service-v2.xsd">
   <service>refapp_PortalTestService</service>
   <method>updateCarVin</method>
   <view>carEdit</view>
   <params>
      <param name="param0">
         <instance id="ref$Car-32261b09-b7f7-4b8c-88cc-6dee6fa8e6ab">
            <field name="vin">WV00000</field>
            <reference name="colour">
                <instance id="ref$Colour-b32a6412-d4d9-11e2-a20b-87b22b1460c7">
                    <field name="name">Red</field>
                </instance>
            </reference>
            <collection name="driverAllocations">
                <instance id="ref$DriverAllocation-b32e43e8-d4d9-11e2-8c8b-2b2939d67fff"/>
                <instance id="NEW-ref$DriverAllocation"/>
            </collection>
         </instance>
      </param>
      <param name="param1">WV00001</param>
      <param name="param0_type">com.haulmont.refapp.core.entity.Car</param>
      <param name="param1_type">java.lang.String</param>
   </params>
</ServiceRequest>]]>
                          </programlisting>
                          <para>Основные элементы передаваемого документа:</para>
                          <itemizedlist>
                              <listitem><code>service</code> - имя вызываемого сервиса</listitem>
                              <listitem><code>method</code> - имя вызываемого метода</listitem>
                              <listitem><code>view</code> - имя представления, по которому будет построено отображение результата, если метод возвращает сущность или коллекцию сущностей</listitem>
                              <listitem><code>param</code> - значение параметра метода или тип параметра. Имя параметра (атрибут <code>name</code>) должно быть вида param0 .. paramN или param0_type .. paramN_type</listitem>
                          </itemizedlist>
                          <para>Если сервис имеет лишь один метод с указанным именем и количеством параметров, то явное определение типов параметров не обязательно. В противном случае указывать типы параметров необходимо.</para>
                          <para>Элемент <code><![CDATA[<param>]]></code> может содержать в себе как текст (для задания значений простых типов данных), так и вложенный
                          элемент  <code><![CDATA[<instance>]]></code> для сущности или  <code><![CDATA[<instances>]]></code> для коллекции сущностей.</para>
                          <para>Семантика полей XML-документа определяется в схеме <ulink url="http://schemas.haulmont.com/cuba/5.4/restapi-service-v2.xsd">http://schemas.haulmont.com/cuba/5.4/restapi-service-v2.xsd</ulink></para>
                      </listitem>
                  </varlistentry>
              </variablelist>
          </section>
          <section>
              <title>Поддерживаемые типы параметров метода сервиса</title>
              <itemizedlist>
                  <listitem>примитивные типы Java. В качестве имени типа указывается <code>long</code>, <code>int</code>, <code>boolean</code> и т.д.</listitem>
                  <listitem>обертки для примитивных типов Java. В качестве имени типа указывается полное имя класса: <code>java.lang.Boolean</code>, <code>java.lang.Integer</code> и т.д.</listitem>
                  <listitem>строка (<code>java.lang.String</code>)</listitem>
                  <listitem>дата (<code>java.util.Date</code>)</listitem>
                  <listitem>UUID (<code>java.util.UUID</code>)</listitem>
                  <listitem>BigDecimal (<code>java.math.BigDecimal</code>)</listitem>
                  <listitem>сущность (только для POST запросов). В качестве имени типа указывается полное имя класса, напр. <code>com.haulmont.cuba.security.entity.User</code></listitem>
                  <listitem>коллекция сущностей (только для POST запросов). В качестве имени типа указывается полное имя класса/интерфейса коллекции, напр. <code>java.util.List</code></listitem>
              </itemizedlist>
          </section>
          <section>
              <title>Результат вызова сервиса</title>
              <para>В зависимости от объявления вызова метода, результат будет в формате JSON или XML. В настоящее временя поддерживается возврат из методов простых типов данных, сущностей и коллекций сущностей.</para>
              <variablelist>
                  <varlistentry>
                      <term>Пример результата в формате JSON:</term>
                      <listitem>
                          <para>Результат имеет простой тип данных:</para>
                          <programlisting language="json"><![CDATA[
{
   "result": "10"
}
]]>                          </programlisting>
                          <para>Результатом является сущность:</para>
                          <programlisting language="json"><![CDATA[
{
   "result": {
      "id" : "ref$Colour-b32e43e8-d4d9-11e2-8c8b-2b2939d67fff",
	   "name": "Red"
	}
}	]]>                          </programlisting>
                      </listitem>
                  </varlistentry>
                  <varlistentry>
                      <term>Пример результата в формате XML:</term>
                      <listitem>
                          <para>Результат имеет простой тип данных:</para>
                          <programlisting language="xml"><![CDATA[
<result>
   10
</result>
]]>                          </programlisting>
                          <para>Результатом является сущность:</para>
                          <programlisting language="xml"><![CDATA[
<result>
   <instance id="ref$Colour-b32a6412-d4d9-11e2-a20b-87b22b1460c7">
      <field name="name">Red</field>
   </instance>
</result>
]]>                          </programlisting>
                          <para>Схема, содержащая описание результата вызова сервиса, находится по адресу <ulink url="http://schemas.haulmont.com/cuba/5.4/restapi-service-v2.xsd">http://schemas.haulmont.com/cuba/5.4/restapi-service-v2.xsd</ulink></para>
                      </listitem>
                  </varlistentry>
              </variablelist>
          </section>
       </section>
    </section>
  </section>
</section>

<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<appendix>
  <title>Конфигурационные файлы</title>
  <para>В данном приложении описаны основные конфигурационные файлы, входящие в состав CUBA-приложений.</para>
  <section id="context.xml">
    <title>context.xml</title>
    <para>Файл <filename>context.xml</filename> является дескриптором развертывания приложения на сервере <application>Apache Tomcat</application>. В развернутом приложении этот файл располагается  в подкаталоге <filename>META-INF</filename> каталога веб-приложения или WAR-файла, например, <filename>tomcat/webapps/app-core/META-INF/context.xml</filename>. В проекте файлы данного типа находятся в каталогах <filename>/web/META-INF</filename> модулей <structname>core</structname>, <structname>web</structname>, <structname>portal</structname>.</para>
    <para>Основное предназначение файла для блока <structname>Middleware</structname> - определить источник данных и поместить его в JNDI под именем, заданным свойством приложения <property>
        <link linkend="cuba.dataSourceJndiName">cuba.dataSourceJndiName</link>
      </property>.</para>
    <para>Пример определения источника данных для <application>PostgreSQL</application>:<programlisting language="xml">&lt;Resource
  name=&quot;jdbc/CubaDS&quot;
  type=&quot;javax.sql.DataSource&quot;
  maxActive=&quot;100&quot;
  maxIdle=&quot;2&quot;
  maxWait=&quot;5000&quot;
  driverClassName=&quot;org.postgresql.Driver&quot;
  username=&quot;cuba&quot;
  password=&quot;cuba&quot;
  url=&quot;jdbc:postgresql://localhost/sales&quot;/&gt;</programlisting></para>
    <para>Пример определения источника данных для <application>Microsoft SQL Server</application>:<programlisting language="xml">&lt;Resource
  name=&quot;jdbc/CubaDS&quot;
  type=&quot;javax.sql.DataSource&quot;
  maxActive=&quot;100&quot;
  maxIdle=&quot;2&quot;
  maxWait=&quot;5000&quot;
  driverClassName=&quot;net.sourceforge.jtds.jdbc.Driver&quot;
  username=&quot;sa&quot;
  password=&quot;saPass1&quot;
  url=&quot;jdbc:jtds:sqlserver://localhost/sales&quot;/&gt;</programlisting></para>
    <para>Пример определения источника данных для <application>Oracle</application>:<programlisting language="xml">&lt;Resource
name=&quot;jdbc/CubaDS&quot;
type=&quot;javax.sql.DataSource&quot;
maxActive=&quot;100&quot;
maxIdle=&quot;2&quot;
maxWait=&quot;5000&quot;
driverClassName=&quot;oracle.jdbc.OracleDriver&quot;
username=&quot;sales&quot;
password=&quot;sales&quot;
url=&quot;jdbc:oracle:thin:@//localhost:1521/orcl&quot;/&gt;</programlisting></para>
    <para>Для всех <link linkend="app_tiers">блоков</link>, являющихся веб-приложениями, данный файл может содержать код, отключающий сериализацию HTTP-сессий:<programlisting language="xml">&lt;Manager className=&quot;org.apache.catalina.session.PersistentManager&quot; debug=&quot;0&quot; distributable=&quot;false&quot;
       saveOnRestart=&quot;false&quot;&gt;
  &lt;Store className=&quot;org.apache.catalina.session.FileStore&quot;/&gt;
&lt;/Manager&gt;</programlisting></para>
  </section>
  <section id="datatypes.xml">
    <title>datatypes.xml</title>
    <para>Файл <filename>datatypes.xml</filename> определяет доступные типы данных атрибутов сущностей, см. <xref linkend="datatype"/></para>
    <para>Файл по умолчанию расположен в пакете <code>com.haulmont.chile.core.datatypes</code> <link linkend="base_projects">базового проекта</link> <structname>cuba</structname>. Если в прикладном проекте в <link linkend="app_modules">модуле</link> <structname>global</structname> создать аналогичный файл в корне CLASSPATH, то  типы данных будут загружены  из него.</para>
    <warning>
      <para>Механизм загрузки не поддерживает расширение, т.е. все типы данных загружаются из одного файла - либо из корня CLASSPATH, либо из пакета  <code>com.haulmont.chile.core.datatypes</code>.</para>
    </warning>
    <para>Доступные типы данных описываются в элементах <sgmltag>datatype</sgmltag>. Обязательным атрибутом является только class, в котором указывается класс типа данных, реализующий интерфейс <code>Datatype</code>. Набор остальных атрибутов зависит от класса, объекту которого при создании передается соответствующий XML элемент, и разбор атрибутов происходит в этом классе.</para>
    <para>Типичные атрибуты:<itemizedlist>
        <listitem>
          <para><sgmltag>format</sgmltag> - формат преобразования в строку без учета локали</para>
        </listitem>
        <listitem>
          <para><sgmltag>groupingSeparator</sgmltag> - символ-разделитель групп разрядов числа при форматировании без учета локали</para>
        </listitem>
        <listitem>
          <para><sgmltag>decimalSeparator</sgmltag> - символ-разделитель целой и дробной части числа при форматировании без учета локали</para>
        </listitem>
      </itemizedlist></para>
    <para>Пример:<programlisting language="xml">&lt;datatypes&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.BooleanDatatype&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.IntegerDatatype&quot;
            format=&quot;0&quot; groupingSeparator=&quot;&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.LongDatatype&quot;
            format=&quot;0&quot; groupingSeparator=&quot;&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.DoubleDatatype&quot;
            format=&quot;0.###&quot; decimalSeparator=&quot;.&quot; groupingSeparator=&quot;&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.BigDecimalDatatype&quot;
            format=&quot;0.####&quot; decimalSeparator=&quot;.&quot; groupingSeparator=&quot;&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.StringDatatype&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.DateTimeDatatype&quot;
            format=&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.DateDatatype&quot;
            format=&quot;yyyy-MM-dd&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.TimeDatatype&quot;
            format=&quot;HH:mm:ss&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.UUIDDatatype&quot;/&gt;

  &lt;datatype class=&quot;com.haulmont.chile.core.datatypes.impl.ByteArrayDatatype&quot;/&gt;

&lt;/datatypes&gt;</programlisting></para>
  </section>
  <section id="dispatcher-spring.xml">
    <title>dispatcher-spring.xml</title>
    <para>Файлы данного типа определяют конфигурацию дополнительного контейнера <application>Spring Framework</application> для клиентских блоков, содержащих контроллеры <application>Spring MVC</application>. </para>
    <para>Набор файлов <filename>dispatcher-spring.xml</filename>, включая определенные в <link linkend="base_projects">базовых проектах</link>, задается в свойстве приложения <property>
        <link linkend="cuba.dispatcherSpringContextConfig">cuba.dispatcherSpringContextConfig</link>
      </property>. Последовательность перечисления файлов важна, так как каждый последующий файл может переопределять конфигурацию бинов, заданную в предыдущих файлах.</para>
    <para>Контейнер контроллеров Spring MVC создается таким образом, что основной контейнер (конфигурируемый файлами <filename>
        <link linkend="spring.xml">spring.xml</link>
      </filename>) является родительским по отношению к нему. Это означает, что бины контейнера контроллеров могут обращаться к бинам основного контейнера, а бины основного контейнера &quot;не видят&quot; контейнер контроллеров.</para>
  </section>
  <section id="menu.xml">
    <title>menu.xml</title>
    <para>Файлы данного типа используются в <link linkend="app_tiers">блоках</link> <structname>Web Client</structname> и <structname>Desktop Client</structname>, реализующих <link linkend="gui_framework">универсальный пользовательский интерфейс</link>, для описания структуры главного меню приложения.</para>
    <para>Схема XML доступна по адресу <ulink url="http://schemas.haulmont.com/cuba/5.4/menu.xsd">http://schemas.haulmont.com/cuba/5.4/menu.xsd</ulink></para>
    <para>Набор файлов <filename>menu.xml</filename>, включая определенные в <link linkend="base_projects">базовых проектах</link>, задается в свойстве приложения <property>
        <link linkend="cuba.menuConfig">cuba.menuConfig</link>
      </property>. </para>
    <para>Рассмотрим структуру файла.</para>
    <para><sgmltag>menu-config</sgmltag> - корневой элемент</para>
    <para>Элементы <sgmltag>menu-config</sgmltag>, образующие древовидную структуру:<itemizedlist>
        <listitem>
          <para><sgmltag>menu</sgmltag> - раскрывающееся меню, содержащее пункты и другие раскрывающиеся меню</para>
          <para>Атрибуты menu:<itemizedlist>
              <listitem>
                <para><sgmltag>id</sgmltag> - идентификатор элемента, использующийся для формирования локализованного  названия (см. ниже)</para>
              </listitem>
              <listitem>
                <para id="menu_insertBefore_insertAfter"><sgmltag>insertBefore</sgmltag>, <sgmltag>insertAfter</sgmltag> - идентификатор элемента или пункта меню, перед которым или после которого нужно вставить данный элемент. Используется в прикладном проекте для вставки элемента в нужное место меню, определенного в аналогичных файлах базовых проектов. Разумеется, использование одного из этих атрибутов для конкретного элемента исключает возможность использования второго атрибута для данного элемента.</para>
                <para>Атрибуты <sgmltag>insertBefore</sgmltag>, <sgmltag>insertAfter</sgmltag> в Studio поддерживаются только для  элементов <sgmltag>menu</sgmltag> верхнего уровня. Поэтому если вы задали эти атрибуты вручную для других элементов, не открывайте дизайнер меню Studio, иначе они будут удалены.</para>
              </listitem>
            </itemizedlist></para>
          <para>Элементы menu:<itemizedlist>
              <listitem>
                <para><sgmltag>menu</sgmltag></para>
              </listitem>
              <listitem>
                <para><sgmltag>item</sgmltag> - пункт меню, см. далее</para>
              </listitem>
              <listitem>
                <para><sgmltag>separator</sgmltag> - разделитель</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para><sgmltag>item</sgmltag> - пункт меню</para>
          <para>Атрибуты <sgmltag>item</sgmltag>:<itemizedlist>
              <listitem>
                <para><sgmltag>id</sgmltag> - идентификатор элемента, использующийся для формирования локализованного названия (см. ниже), и для связи с элементом файла <filename>
                    <link linkend="screens.xml">screens.xml</link>
                  </filename>, в котором зарегистрированы экраны UI. При выборе пункта меню в главном окне приложения будет открыт соответствующий экран.</para>
              </listitem>
              <listitem>
                <para><sgmltag>shortcut</sgmltag> - горячая клавиша для вызова данного пункта меню. Возможные модификаторы - <literal>ALT</literal>, <literal>CTRL</literal>, <literal>SHIFT</literal> - отделяются символом &quot;<literal>-</literal>&quot;. Например:<programlisting>shortcut=&quot;ALT-C&quot;
shortcut=&quot;ALT-CTRL-C&quot;
shortcut=&quot;ALT-CTRL-SHIFT-C&quot;</programlisting></para>
                <para>Горячие клавиши можно также задавать в <link linkend="app_properties">свойствах приложения</link> и использовать в <filename>menu.xml</filename> следующим образом:<programlisting>shortcut=&quot;${sales.menu.customer}&quot;</programlisting></para>
              </listitem>
              <listitem>
                <para><sgmltag>openType</sgmltag> - тип открытия экрана, возможные значения соответствуют перечислению <code>WindowManager.OpenType</code>: <code>NEW_TAB</code>, <code>THIS_TAB</code>, <code>DIALOG</code>, <code>NEW_WINDOW</code>.</para>
                <para>По умолчанию - <code>NEW_TAB</code>. </para>
                <para>Значение <code>NEW_WINDOW</code> поддерживается только в <structname>Desktop Client</structname>, в <structname>Web Client</structname> оно эквивалентно <code>NEW_TAB</code>.</para>
              </listitem>
              <listitem>
                <para><sgmltag>insertBefore</sgmltag>, <sgmltag>insertAfter</sgmltag> - идентификатор элемента или пункта меню, перед которым или после которого нужно вставить данный элемент. </para>
                <para>Атрибуты <sgmltag>insertBefore</sgmltag>, <sgmltag>insertAfter</sgmltag> для элемента <sgmltag>item</sgmltag> не поддерживаются в Studio. Поэтому если вы задали эти атрибуты вручную, не открывайте дизайнер меню Studio, иначе они будут удалены.</para>
              </listitem>
              <listitem>
                <para><sgmltag>resizable</sgmltag> - актуально для типа открытия экрана <code>DIALOG</code> - задает окну возможность изменения размера. Возможные значения: <code>true</code>, <code>false</code>.</para>
                <para>По умолчанию главное меню не влияет на возможность изменения размера диалоговых окон.</para>
              </listitem>
            </itemizedlist></para>
          <para>Элементы <sgmltag>item</sgmltag>:<itemizedlist>
              <listitem>
                <para><sgmltag>param</sgmltag> - задает параметр экрана, передаваемый в мэп метода <code>init()</code> <link linkend="screen_controller">контроллера</link>. Параметры, заданные в <filename>menu.xml</filename>, переопределяют одноименные параметры, заданные в <link linkend="screens.xml">
                    <filename>screens.xml</filename>
                  </link>.</para>
                <para>Атрибуты <sgmltag>param</sgmltag>:<itemizedlist>
                    <listitem>
                      <para><sgmltag>name</sgmltag> - имя параметра</para>
                    </listitem>
                    <listitem>
                      <para><sgmltag>value</sgmltag> - значение параметра. Строковое значение может преобразовываться в некоторый объект по следующим правилам:<itemizedlist>
                          <listitem>
                            <para>Если строка представляет собой идентификатор сущности, записанный по правилам класса <code>EntityLoadInfo</code>, то загружается указанный экземпляр сущности.</para>
                          </listitem>
                          <listitem>
                            <para>Если строка имеет вид <code>${some_name}</code>, то значением параметра будет  свойство приложения <property>some_name</property>.</para>
                          </listitem>
                          <listitem>
                            <para>Строки <literal>true</literal> и <literal>false</literal> преобразуются в соответствующие значения типа <code>Boolean</code>.</para>
                          </listitem>
                          <listitem>
                            <para>Если ничего из вышеперечисленного не подходит, значением параметра становится сама строка.</para>
                          </listitem>
                        </itemizedlist></para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
              <listitem>
                <para><sgmltag>permissions</sgmltag> - элемент, позволяющий задать набор разрешений текущего пользователя, при которых данный пункт меню доступен. Данный механизм имеет смысл  использовать только если необходимо привязать доступность пункта к специфическим разрешениям, или не к одному, а к нескольким разрешениям сразу. В большинстве случаев достаточно стандартной возможности подсистемы безопасности управлять доступностью пунктов меню по идентификаторам экранов.</para>
                <para>Данный элемент должен содержать вложенные элементы <sgmltag>permission</sgmltag>, каждый из которых описывает одно требуемое разрешение. Пункт меню доступен только при наличии всех требуемых разрешений.</para>
                <para>Атрибуты <sgmltag>permission</sgmltag>:<itemizedlist>
                    <listitem>
                      <para><sgmltag>type</sgmltag> - тип требуемого разрешения, задаваемый значением перечисления <code>PermissionType</code>: <code>SCREEN</code>, <code>ENTITY_OP</code>, <code>ENTITY_ATTR</code>, <code>SPECIFIC</code>, <code>UI</code>.</para>
                    </listitem>
                    <listitem>
                      <para><sgmltag>target</sgmltag> - объект, на который проверяется наличие разрешения. Зависит от типа разрешения:<itemizedlist>
                          <listitem>
                            <para><code>SCREEN</code> - идентификатор экрана, например <code>sales$Customer.lookup</code>.</para>
                          </listitem>
                          <listitem>
                            <para><code>ENTITY_OP</code> - строка вида <code>{entity_name}:{op}</code>, где <code>{op}</code> - <code>read</code>, <code>create</code>, <code>update</code>, <code>delete</code>. Например: <code>sales$Customer:create</code>.</para>
                          </listitem>
                          <listitem>
                            <para><code>ENTITY_ATTR</code> - строка вида <code>{entity_name}:{attribute}</code>, например <code>sales$Customer:name</code>.</para>
                          </listitem>
                          <listitem>
                            <para><code>SPECIFIC</code> - идентификатор специфического разрешения, например <code>sales.runInvoicing</code>.</para>
                          </listitem>
                          <listitem>
                            <para><code>UI</code> - путь к визуальному компоненту экрана.</para>
                          </listitem>
                        </itemizedlist></para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </itemizedlist></para>
    <para>Пример файла меню:<programlisting language="xml">&lt;menu-config xmlns=&quot;http://schemas.haulmont.com/cuba/5.4/menu.xsd&quot;&gt;

  &lt;menu id=&quot;sales&quot; insertBefore=&quot;administration&quot;&gt;
      &lt;item id=&quot;sales$Customer.lookup&quot;/&gt;
      &lt;separator/&gt;
      &lt;item id=&quot;sales$Order.lookup&quot;/&gt;
  &lt;/menu&gt;

&lt;/menu-config&gt;</programlisting></para>
    <para>Локализованное название элемента меню формируется следующим образом: к идентификатору элемента добавляется префикс <literal>menu-config</literal> с точкой на конце, и полученная строка используется как ключ в <link linkend="main_message_pack">главном пакете сообщений</link>. Например:<programlisting>menu-config.sales=Sales
menu-config.sales$Customer.lookup=Customers</programlisting></para>
  </section>
  <section id="metadata.xml">
    <title>metadata.xml</title>
    <para>Файлы данного типа используются для регистрации неперсистентных сущностей и присвоения <link linkend="meta_annotations">мета-аннотаций</link>, см. <xref linkend="metadata_framework"/></para>
    <para>Схема XML доступна по адресу <ulink url="http://schemas.haulmont.com/cuba/5.4/metadata.xsd">http://schemas.haulmont.com/cuba/5.4/metadata.xsd</ulink></para>
    <para>Набор файлов <filename>metadata.xml</filename>, включая определенные в <link linkend="base_projects">базовых проектах</link>, задается в свойстве приложения <property>
        <link linkend="cuba.metadataConfig">cuba.metadataConfig</link>
      </property>. </para>
    <para>Рассмотрим структуру файла.</para>
    <para><sgmltag>metadata</sgmltag> - корневой элемент.</para>
    <para>Элементы <sgmltag>metadata</sgmltag>:<itemizedlist>
        <listitem>
          <para><sgmltag>metadata-model</sgmltag> - описатель метамодели проекта.</para>
          <para>Атрибут <sgmltag>
              <sgmltag>metadata-model</sgmltag>
            </sgmltag>: <itemizedlist>
              <listitem>
                <para><sgmltag>root-package</sgmltag> - корневой пакет проекта.</para>
              </listitem>
            </itemizedlist></para>
          <para>Элементы <code>metadata-model</code>:<itemizedlist>
              <listitem>
                <para><sgmltag>class</sgmltag> - класс неперсистентной сущности.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para><sgmltag>annotations</sgmltag> - корень элементов присвоения <link linkend="meta_annotations">мета-аннотаций</link> сущностей.</para>
          <para>Элементы <sgmltag>annotations</sgmltag>:<itemizedlist>
              <listitem>
                <para><sgmltag>entity</sgmltag> - элемент сущности, которой присваиваются мета-аннотации.</para>
                <para>Атрибуты <sgmltag>entity</sgmltag>:<itemizedlist>
                    <listitem>
                      <para><sgmltag>class</sgmltag> - класс сущности.</para>
                    </listitem>
                  </itemizedlist></para>
                <para>Элементы <sgmltag>entity</sgmltag>:<itemizedlist>
                    <listitem>
                      <para><sgmltag>annotation</sgmltag> - элемент мета-аннотации.</para>
                      <para>Атрибуты <sgmltag>annotation</sgmltag>:<itemizedlist>
                          <listitem>
                            <para><sgmltag>name</sgmltag> - имя мета-аннотации.</para>
                          </listitem>
                          <listitem>
                            <para><sgmltag>value</sgmltag> - значение мета-аннотации.</para>
                          </listitem>
                        </itemizedlist></para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </itemizedlist></para>
    <para>Пример:<programlisting language="xml">&lt;metadata xmlns=&quot;http://schemas.haulmont.com/cuba/5.4/metadata.xsd&quot;&gt;

  &lt;metadata-model root-package=&quot;com.sample.sales&quot;&gt;
      &lt;class&gt;com.sample.sales.entity.SomeTransientEntity&lt;/class&gt;
      &lt;class&gt;com.sample.sales.entity.OtherTransientEntity&lt;/class&gt;
  &lt;/metadata-model&gt;

  &lt;annotations&gt;
      &lt;entity class=&quot;com.haulmont.cuba.security.entity.User&quot;&gt;
          &lt;annotation name=&quot;com.haulmont.cuba.core.entity.annotation.TrackEditScreenHistory&quot;
                      value=&quot;true&quot;/&gt;
          &lt;annotation name=&quot;com.haulmont.cuba.core.entity.annotation.EnableRestore&quot;
                      value=&quot;true&quot;/&gt;
      &lt;/entity&gt;
  &lt;/annotations&gt;

&lt;/metadata&gt;</programlisting></para>
  </section>
  <section id="permissions.xml">
    <title>permissions.xml</title>
    <para>Файлы данного типа используются в блоках <structname>Web Client</structname> и <structname>Desktop Client</structname> для регистрации специфических <link linkend="permissions">разрешений</link> пользователей. </para>
    <para>Набор файлов <filename>permissions.xml</filename>, включая определенные в <link linkend="base_projects">базовых проектах</link>, задается в свойстве приложения <property>
        <link linkend="cuba.permissionConfig">cuba.permissionConfig</link>
      </property>. </para>
    <para>Схема XML доступна по адресу <ulink url="http://schemas.haulmont.com/cuba/5.4/permissions.xsd">http://schemas.haulmont.com/cuba/5.4/permissions.xsd</ulink>.</para>
    <para>Рассмотрим структуру файла.</para>
    <para><sgmltag>permission-config</sgmltag> - корневой элемент.</para>
    <para>Элементы <sgmltag>permission-config</sgmltag>:</para>
    <itemizedlist>
      <listitem>
        <para><code>specific</code> - описатель специфических разрешений.</para>
        <para>Элементы <code>specific</code>:<itemizedlist>
            <listitem>
              <para><code>category</code> - категория разрешений, используется для группировки в экране управления разрешениями <link linkend="roles">роли</link>. Атрибут <code>id</code> используется как ключ для получения локализованного названия категории.</para>
            </listitem>
            <listitem>
              <para><code>permission</code> - именованное разрешение. Атрибут <code>id</code> используется для получения значения разрешения  методом <code>Security.isSpecificPermitted()</code>, а также как ключ для получения локализованного названия разрешения для отображения в экране управления разрешениями <link linkend="roles">роли</link>.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
    </itemizedlist>
    <para>Пример:<programlisting language="xml">&lt;permission-config xmlns=&quot;http://schemas.haulmont.com/cuba/5.4/permissions.xsd&quot;&gt;
  &lt;specific&gt;
      &lt;category id=&quot;app&quot;&gt;
          &lt;permission id=&quot;app.doSomething&quot;/&gt;
          &lt;permission id=&quot;app.doSomethingOther&quot;/&gt;
      &lt;/category&gt;
  &lt;/specific&gt;
&lt;/permission-config&gt;</programlisting> </para>
  </section>
  <section id="persistence.xml">
    <title>persistence.xml</title>
    <para>Файлы данного типа являются стандартными для JPA и используются для регистрации персистентных сущностей и задания параметров функционирования фреймворка <link linkend="orm">ORM</link>.</para>
    <para>Набор файлов <filename>persistence.xml</filename>, включая определенные в <link linkend="base_projects">базовых проектах</link>, задается в свойстве приложения <property>
        <link linkend="cuba.persistenceConfig">cuba.persistenceConfig</link>
      </property>. </para>
    <para>На старте блока <structname>Middleware</structname> из заданных файлов собирается один <filename>persistence.xml</filename> и сохраняется в <link linkend="work_dir">рабочем каталоге</link> приложения. Параметры ORM могут переопределяться каждым следующим файлом списка, поэтому порядок указания файлов важен. Существует несколько параметров, жестко определяемых типом используемой СУБД (заданным в <property>
        <link linkend="cuba.dbmsType">cuba.dbmsType</link>
      </property>), которые невозможно переопределить в <filename>persistence.xml</filename>, это:<itemizedlist>
        <listitem>
          <para><literal>openjpa.jdbc.DBDictionary</literal></para>
        </listitem>
        <listitem>
          <para><literal>openjpa.jdbc.MappingDefaults</literal></para>
        </listitem>
      </itemizedlist>Кроме того, при выключенном свойстве приложения <property>
        <link linkend="cuba.disableOrmXmlGeneration">cuba.disableOrmXmlGeneration</link>
      </property> и наличии <link linkend="extension">расширенных сущностей</link> на старте приложения в рабочем каталоге создается файл <filename>orm.xml</filename> и путь к нему записывается в параметр <literal>openjpa.MetaDataFactory</literal>. В этом случае параметр <literal>openjpa.MetaDataFactory</literal> также нельзя задать в <filename>persistence.xml</filename> заранее. </para>
    <para>Пример файла:<programlisting language="xml">&lt;persistence xmlns=&quot;http://java.sun.com/xml/ns/persistence&quot; version=&quot;1.0&quot;&gt;
  &lt;persistence-unit name=&quot;sales&quot; transaction-type=&quot;RESOURCE_LOCAL&quot;&gt;
      &lt;class&gt;com.sample.sales.entity.Customer&lt;/class&gt;
      &lt;class&gt;com.sample.sales.entity.Order&lt;/class&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;</programlisting></para>
  </section>
  <section id="remoting-spring.xml">
    <title>remoting-spring.xml</title>
    <para>Файлы данного типа определяют конфигурацию дополнительного контейнера <application>Spring Framework</application> для блока <structname>Middleware</structname>, который предназначен для экспорта сервисов и других компонентов среднего слоя, доступных клиентскому уровню (далее <firstterm>контейнер удаленного доступа</firstterm>). </para>
    <para>Набор файлов <filename>remoting-spring.xml</filename>, включая определенные в <link linkend="base_projects">базовых проектах</link>, задается в свойстве приложения <property>
        <link linkend="cuba.remotingSpringContextConfig">cuba.remotingSpringContextConfig</link>
      </property>. Последовательность перечисления файлов важна, так как каждый последующий файл может переопределять конфигурацию бинов, заданную в предыдущих файлах.</para>
    <para>Контейнер удаленного доступа создается таким образом, что основной контейнер (конфигурируемый файлами <filename>
        <link linkend="spring.xml">spring.xml</link>
      </filename>) является родительским по отношению к нему. Это означает, что бины контейнера удаленного доступа могут обращаться к бинам основного контейнера, а бины основного контейнера &quot;не видят&quot; контейнер удаленного доступа.</para>
    <para>Основная задача контейнера удаленного доступа - сделать сервисы <structname>Middleware</structname> доступными клиентскому уровню с помощью механизма <application>Spring HttpInvoker</application>. Для этого в <filename>cuba-remoting-spring.xml</filename> базового проекта <structname>cuba</structname> определяется бин <literal>servicesExporter</literal> типа <code>RemoteServicesBeanCreator</code>, который получает из основного контейнера все классы сервисов и экспортирует их. В дополнение к обычным аннотированным сервисам контейнер удаленного доступа экспортирует некоторые специфические бины, такие как <code>LoginService</code>.</para>
    <para>Кроме того, <filename>cuba-remoting-spring.xml</filename> определяет базовый пакет, начиная с которого производится поиск аннотированных классов контроллеров <application>Spring MVC</application>, используемых для загрузки-выгрузки файлов.</para>
    <para>В прикладном проекте определять файл типа <filename>remoting-spring.xml</filename> необходимо только в том случае, если создаются специфические контроллеры <application>Spring MVC</application>. Сервисы прикладного проекта в любом случае будут импортированы стандартным бином <literal>servicesExporter</literal>, определенным в базовом проекте <structname>cuba</structname>.</para>
  </section>
  <section id="screens.xml">
    <title>screens.xml</title>
    <para>Файлы данного типа используются в <link linkend="app_tiers">блоках</link> <structname>Web Client</structname> и <structname>Desktop Client</structname>, реализующих <link linkend="gui_framework">универсальный пользовательский интерфейс</link>, для регистрации <link linkend="screen_xml">XML-дескрипторов</link> экранов.</para>
    <para>Схема XML доступна по адресу <ulink url="http://schemas.haulmont.com/cuba/5.4/screens.xsd">http://schemas.haulmont.com/cuba/5.4/screens.xsd</ulink></para>
    <para>Набор файлов <filename>screens.xml</filename>, включая определенные в <link linkend="base_projects">базовых проектах</link>, задается в свойстве приложения <property>
        <link linkend="cuba.windowConfig">cuba.windowConfig</link>
      </property>. </para>
    <para>Рассмотрим структуру файла.</para>
    <para><sgmltag>screen-config</sgmltag> - корневой элемент</para>
    <para>Элементы <sgmltag>screen-config</sgmltag>:<itemizedlist>
        <listitem>
          <para><sgmltag>screen</sgmltag> - описатель экрана</para>
          <para>Атрибуты <sgmltag>screen</sgmltag>:<itemizedlist>
              <listitem>
                <para><sgmltag>id</sgmltag> - идентификатор экрана, по которому он доступен в программном коде (например, в методах <code>IFrame.openWindow()</code> и т.п.) и в <filename>
                    <link linkend="menu.xml">menu.xml</link>
                  </filename>.</para>
              </listitem>
              <listitem>
                <para><sgmltag>template</sgmltag> - путь к файлу <link linkend="screen_xml">XML-дескриптора</link> экрана. Загрузка производится по правилам интерфейса <code>
                    <link linkend="resources">Resources</link>
                  </code>.</para>
              </listitem>
              <listitem>
                <para><sgmltag>class</sgmltag> - если атрибут <sgmltag>template</sgmltag> не указан, в данном атрибуте нужно указать имя класса, реализующего либо <code>Callable</code>, либо <code>Runnable</code>. </para>
                <para>В случае <code>Callable</code> метод <code>call()</code> должен возвращать экземпляр созданного <code>Window</code>, который будет возвращен вызывающему коду как результат <code>WindowManager.openWindow()</code>. Класс может содержать конструктор с параметрами для передачи ему строковых значений, заданных вложенным элементом <sgmltag>param</sgmltag> (см. ниже). </para>
              </listitem>
              <listitem>
                <para><sgmltag>multipleOpen</sgmltag> - опциональный атрибут, задающий возможность многократного открытия экрана. Если равен <literal>false</literal> или не задан, и в главном окне уже открыт экран с данным идентификатором, то вместо открытия нового экземпляра экрана отобразится имеющийся. Значение <literal>true</literal> позволяет открывать произвольное количество одинаковых экранов.</para>
              </listitem>
            </itemizedlist></para>
          <para>Элементы <sgmltag>screen</sgmltag>:<itemizedlist>
              <listitem>
                <para><sgmltag>param</sgmltag> - задает параметр экрана, передаваемый в мэп метода <code>init()</code> <link linkend="screen_controller">контроллера</link>. Параметры, передаваемые из вызывающего кода в методы <code>openWindow()</code>, переопределяют одноименные параметры, заданные в <filename>screens.xml</filename>.</para>
                <para>Атрибуты <sgmltag>param</sgmltag>:<itemizedlist>
                    <listitem>
                      <para><sgmltag>name</sgmltag> - имя параметра</para>
                    </listitem>
                    <listitem>
                      <para><sgmltag>value</sgmltag> - значение параметра. Строки <literal>true</literal> и <literal>false</literal> автоматически преобразуются в значения типа <code>Boolean</code>.</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para><sgmltag>include</sgmltag> - включение другого файла типа <filename>screens.xml</filename></para>
          <para><para>Атрибуты <sgmltag>include</sgmltag>:<itemizedlist>
                <listitem>
                  <para><sgmltag>file</sgmltag> - путь к файлу по правилам интерфейса <code>
                      <link linkend="resources">Resources</link>
                    </code></para>
                </listitem>
              </itemizedlist></para></para>
        </listitem>
      </itemizedlist></para>
    <para>Пример файла <filename>screens.xml</filename>:<programlisting language="xml">&lt;screen-config xmlns=&quot;http://schemas.haulmont.com/cuba/5.4/screens.xsd&quot;&gt;

  &lt;screen id=&quot;sales$Customer.lookup&quot; template=&quot;/com/sample/sales/gui/customer/customer-browse.xml&quot;/&gt;
  &lt;screen id=&quot;sales$Customer.edit&quot; template=&quot;/com/sample/sales/gui/customer/customer-edit.xml&quot;/&gt;

  &lt;screen id=&quot;sales$Order.lookup&quot; template=&quot;/com/sample/sales/gui/order/order-browse.xml&quot;/&gt;
  &lt;screen id=&quot;sales$Order.edit&quot; template=&quot;/com/sample/sales/gui/order/order-edit.xml&quot;/&gt;

&lt;/screen-config&gt;</programlisting></para>
  </section>
  <section id="spring.xml">
    <title>spring.xml</title>
    <para>Файлы данного типа определяют конфигурацию основного контейнера <application>Spring Framework</application> для каждого <link linkend="app_tiers">блока приложения</link>. </para>
    <para>Набор файлов <filename>spring.xml</filename>, включая определенные в <link linkend="base_projects">базовых проектах</link>, задается в свойстве приложения <property>
        <link linkend="cuba.springContextConfig">cuba.springContextConfig</link>
      </property>. Последовательность перечисления файлов важна, так как каждый последующий файл может переопределять конфигурацию бинов, заданную в предыдущих файлах.</para>
    <para>Основная часть конфигурирования контейнера возложена на аннотации бинов (такие как <code>@ManagedBean</code>, <code>@Servic</code>e, <code>@Inject</code> и др.), поэтому обязательной частью <filename>spring.xml</filename> в прикладном проекте является только элемент <sgmltag>context:component-scan</sgmltag>, в котором задается базовый пакет Java, с которого начинается поиск аннотированных классов. Например:<programlisting language="xml">&lt;context:component-scan base-package=&quot;com.sample.sales&quot;/&gt;</programlisting></para>
    <para>Остальное содержимое зависит от того, для какого блока приложения конфигурируется контейнер: например, для <structname>Middleware</structname> это регистрация <link linkend="jmx_beans">JMX-бинов</link>, для блоков клиентского уровня - <link linkend="service_import">импорт сервисов</link>.</para>
  </section>
  <section id="views.xml">
    <title>views.xml</title>
    <para>Файлы данного типа используются для описания представлений, см. <xref linkend="views"/></para>
    <para>Схема XML доступна по адресу <ulink url="http://schemas.haulmont.com/cuba/5.4/view.xsd">http://schemas.haulmont.com/cuba/5.4/view.xsd</ulink></para>
    <para><sgmltag>views</sgmltag> - корневой элемент</para>
    <para>Элементы <sgmltag>views</sgmltag>:<itemizedlist>
        <listitem>
          <para><sgmltag>view</sgmltag> - описатель <code>View</code></para>
          <para>Атрибуты <sgmltag>view</sgmltag>:<itemizedlist>
              <listitem>
                <para><sgmltag>class</sgmltag> - класс сущности.</para>
              </listitem>
              <listitem>
                <para><code>entity</code> - имя сущности, например <code>sales$Order</code>. Может быть использован <emphasis>вместо</emphasis> атрибута <code>class</code>. </para>
              </listitem>
              <listitem>
                <para><sgmltag>name</sgmltag> - имя представления, должно быть уникальным в пределах сущности.</para>
              </listitem>
              <listitem>
                <para><sgmltag>systemProperties</sgmltag> - признак включения системных атрибутов сущности (входящих в состав <link linkend="base_entity_classes">базовых интерфейсов</link> персистентных сущностей <code>BaseEntity</code> и  <code>Updatable</code>). Необязательный атрибут, по умолчанию <literal>false</literal>.</para>
              </listitem>
              <listitem>
                <para><sgmltag>overwrite</sgmltag> - признак того, что данный описатель должен переопределить представление с таким же классом и именем, уже развернутое в репозитории. Необязательный атрибут, по умолчанию <literal>false</literal>.</para>
              </listitem>
              <listitem>
                <para><sgmltag>extends</sgmltag> - указывает имя представления той же сущности, от которого нужно унаследовать атрибуты. Порядок следования описателей в файле при этом не важен. Например, при указании <literal>extends=&quot;_local&quot;</literal> в текущее представление будут включены все <link linkend="local_attribute">локальные атрибуты</link> сущности. Необязательный атрибут.</para>
              </listitem>
            </itemizedlist></para>
          <para>Элементы <sgmltag>view</sgmltag>:<itemizedlist>
              <listitem>
                <para><sgmltag>property</sgmltag> - описатель <code>ViewProperty</code>.</para>
                <para>Атрибуты <sgmltag>property</sgmltag>:<itemizedlist>
                    <listitem>
                      <para><sgmltag>name</sgmltag> - имя атрибута сущности.</para>
                    </listitem>
                    <listitem>
                      <para><sgmltag>view</sgmltag> - для ссылочного атрибута указывает имя представления, с которым должна загружаться ассоциированная сущность. Порядок следования описателей в файле при этом не важен.</para>
                    </listitem>
                    <listitem>
                      <para><sgmltag>lazy</sgmltag> - для ссылочных атрибутов признак того, что данный атрибут нужно не  включать в Fetch Plan, а загружать отдельным SQL запросом, инициированным обращением к атрибуту. Необязательный атрибут, по умолчанию <literal>false</literal>.</para>
                      <para>Рекомендуется использовать <sgmltag>lazy</sgmltag> для атрибутов-коллекций, если таких атрибутов больше одного для данного графа представлений. Т.е. устанавливайте  <literal>lazy = &quot;true&quot;</literal> для всех коллекций, кроме одной.</para>
                    </listitem>
                  </itemizedlist></para>
                <para>Элементы <sgmltag>property</sgmltag>:<itemizedlist>
                    <listitem>
                      <para><sgmltag>property</sgmltag> - описатель атрибута связанной сущности. Таким способом можно определить неименованное представление для связанной сущности прямо внутри  текущего описателя (inline). </para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para><sgmltag>include</sgmltag> - включение другого файла типа views.xml</para>
          <para>Атрибуты <sgmltag>include</sgmltag>:<itemizedlist>
              <listitem>
                <para><sgmltag>file</sgmltag> - путь к файлу по правилам интерфейса <code>
                    <link linkend="resources">Resources</link>
                  </code></para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </itemizedlist></para>
    <para>Пример:<programlisting language="xml">&lt;views xmlns=&quot;http://schemas.haulmont.com/cuba/5.4/view.xsd&quot;&gt;

  &lt;view class=&quot;com.sample.sales.entity.Order&quot;
        name=&quot;orderWithCustomer&quot;
        extends=&quot;_local&quot;&gt;
      &lt;property name=&quot;customer&quot; view=&quot;_minimal&quot;/&gt;
  &lt;/view&gt;

  &lt;view class=&quot;com.sample.sales.entity.Item&quot;
        name=&quot;itemsInOrder&quot;&gt;
      &lt;property name=&quot;quantity&quot;/&gt;
      &lt;property name=&quot;product&quot; view=&quot;_minimal&quot;/&gt;
  &lt;/view&gt;

  &lt;view class=&quot;com.sample.sales.entity.Order&quot;
        name=&quot;orderWithCustomerDefinedInline&quot;
        extends=&quot;_local&quot;&gt;
      &lt;property name=&quot;customer&quot;&gt;
          &lt;property name=&quot;name&quot;/&gt;
          &lt;property name=&quot;email&quot;/&gt;
      &lt;/property&gt;
  &lt;/view&gt;

&lt;/views&gt;</programlisting></para>
    <para>См. также свойство приложения <property>
        <link linkend="cuba.viewsConfig">cuba.viewsConfig</link>
      </property></para>
  </section>
  <section id="web.xml">
    <title>web.xml</title>
    <para>Файл <filename>web.xml</filename> является стандартным дескриптором веб-приложения <application>Java EE</application>, и должен быть создан для блоков <structname>Middleware</structname>, <structname>Web Client</structname> и <structname>Web Portal</structname>.</para>
    <para>В проекте приложения файлы <filename>web.xml</filename> располагаются в каталогах <filename>web/WEB-INF</filename> соответствующих <link linkend="app_modules">модулей</link>.</para>
    <para>Рассмотрим содержимое <filename>web.xml</filename> блока <structname>Middleware</structname> (модуль <structname>core</structname> проекта):<programlisting language="xml">&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;
         version=&quot;2.5&quot;&gt;

  &lt;!-- Application properties config files --&gt;
  &lt;context-param&gt;
      &lt;param-name&gt;appPropertiesConfig&lt;/param-name&gt;
      &lt;param-value&gt;
          classpath:cuba-app.properties
          classpath:app.properties
          file:${catalina.home}/conf/app-core/local.app.properties
      &lt;/param-value&gt;
  &lt;/context-param&gt;

  &lt;listener&gt;
      &lt;listener-class&gt;com.haulmont.cuba.core.sys.AppContextLoader&lt;/listener-class&gt;
  &lt;/listener&gt;

  &lt;servlet&gt;
      &lt;servlet-name&gt;remoting&lt;/servlet-name&gt;
      &lt;servlet-class&gt;com.haulmont.cuba.core.sys.remoting.RemotingServlet&lt;/servlet-class&gt;
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;remoting&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/remoting/*&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;

  &lt;servlet&gt;
      &lt;servlet-name&gt;restapi&lt;/servlet-name&gt;
      &lt;servlet-class&gt;com.haulmont.cuba.core.sys.restapi.RestApiServlet&lt;/servlet-class&gt;
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;restapi&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/api/*&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</programlisting></para>
    <para>В элементах <sgmltag>context-param</sgmltag> задаются инициализирующие параметры объекта <code>ServletContext</code> данного веб-приложения. Здесь определен параметр <literal>appPropertiesConfig</literal>, значением которого является список <link linkend="app_properties_files">файлов свойств приложения</link>.</para>
    <para>В элементе <sgmltag>listener</sgmltag> задается класс слушателя, реализующего интерфейс <code>ServletContextListener</code>. В блоке <structname>Middleware</structname> CUBA-приложения в качестве слушателя должен использоваться класс <code>AppContextLoader</code>, выполняющий инициализацию <code>
        <link linkend="appContext">AppContext</link>
      </code>.</para>
    <para>Далее следуют определения сервлетов, среди которых обязательным для <structname>Middleware</structname> является класс <code>RemotingServlet</code>, связанный с контейнером удаленного доступа (см. <xref linkend="remoting-spring.xml"/>). Данный сервлет отображен на URL <literal>/remoting/*</literal>.</para>
    <para>Рассмотрим содержимое <filename>web.xml</filename> блока <structname>Web Client</structname> (модуль <structname>web</structname> проекта):<programlisting language="xml">&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;
         version=&quot;2.5&quot;&gt;

  &lt;context-param&gt;
      &lt;description&gt;Vaadin production mode&lt;/description&gt;
      &lt;param-name&gt;productionMode&lt;/param-name&gt;
      &lt;param-value&gt;false&lt;/param-value&gt;
  &lt;/context-param&gt;

  &lt;context-param&gt;
      &lt;param-name&gt;appPropertiesConfig&lt;/param-name&gt;
      &lt;param-value&gt;
          classpath:cuba-web-app.properties
          classpath:web-app.properties
          file:${catalina.home}/conf/app/local.app.properties
      &lt;/param-value&gt;
  &lt;/context-param&gt;

  &lt;listener&gt;
      &lt;listener-class&gt;com.haulmont.cuba.web.sys.WebAppContextLoader&lt;/listener-class&gt;
  &lt;/listener&gt;

  &lt;servlet&gt;
      &lt;servlet-name&gt;app_servlet&lt;/servlet-name&gt;
      &lt;servlet-class&gt;com.haulmont.cuba.web.sys.CubaApplicationServlet&lt;/servlet-class&gt;
      &lt;init-param&gt;
          &lt;param-name&gt;application&lt;/param-name&gt;
          &lt;param-value&gt;com.haulmont.sales.web.App&lt;/param-value&gt;
      &lt;/init-param&gt;
      &lt;init-param&gt;
          &lt;param-name&gt;widgetset&lt;/param-name&gt;
          &lt;param-value&gt;com.haulmont.cuba.web.toolkit.ui.WidgetSet&lt;/param-value&gt;
      &lt;/init-param&gt;
      &lt;init-param&gt;
          &lt;param-name&gt;UI&lt;/param-name&gt;
          &lt;param-value&gt;com.haulmont.cuba.web.AppUI&lt;/param-value&gt;
      &lt;/init-param&gt;
      &lt;init-param&gt;
          &lt;param-name&gt;UIProvider&lt;/param-name&gt;
          &lt;param-value&gt;com.haulmont.cuba.web.sys.CubaUIProvider&lt;/param-value&gt;
      &lt;/init-param&gt;
  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;app_servlet&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;

  &lt;filter&gt;
      &lt;filter-name&gt;cuba_filter&lt;/filter-name&gt;
      &lt;filter-class&gt;com.haulmont.cuba.web.sys.CubaHttpFilter&lt;/filter-class&gt;
  &lt;/filter&gt;

  &lt;filter-mapping&gt;
      &lt;filter-name&gt;cuba_filter&lt;/filter-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;

&lt;/web-app&gt;</programlisting></para>
    <para>В данном файле определены два параметра: <literal>appPropertiesConfig</literal>, значением которого является список <link linkend="app_properties_files">файлов свойств приложения</link>, и <literal>productionMode</literal>, отключающий режим отладки фреймворка <application>Vaadin</application>.</para>
    <para>В качестве <code>ServletContextListener</code> в блоке <structname>Web Client</structname> используется класс <code>WebAppContextLoader</code>.</para>
    <para>Далее определяется сервлет <code>CubaApplicationServlet</code>, входящий в состав основанной на фреймворке <application>Vaadin</application> реализации <link linkend="gui_framework">универсального пользовательского интерфейса</link>. Сервлет имеет несколько параметров, в том числе:<itemizedlist>
        <listitem>
          <para><literal>application</literal> - задает специфический для проекта класс клиентского приложения, который должен быть наследником <code>com.haulmont.cuba.web.App</code></para>
        </listitem>
        <listitem>
          <para><literal>widgetset</literal> - задает набор <application>GWT</application> компонентов, используемых на стороне веб-браузера</para>
        </listitem>
      </itemizedlist></para>
    <para>После определения сервлетов  подключается фильтр <code>CubaHttpFilter</code>, необходимый для  функционирования блока <structname>Web Client</structname>.</para>
  </section>
</appendix>

<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="chapter_quickStart" lang="en">
  <title>Quick Start </title>
  <para>Let us create a simple application for managing information about customers and orders as first introduction to CUBA platform. The goal of this exercise  is to demonstrate basic steps for creating data model and user interface as well as application deployment.  </para>
  <para>Make sure that the necessary software is already installed and set up on your computer, See    <xref linkend="chapter_setup"/>.</para>
  <para>Key stages of our application development: </para>
  <orderedlist>
    <listitem>
      <para>Data model development including creation of domain  <glossterm linkend="entity">entities</glossterm> and corresponding database tables. </para>
    </listitem>
    <listitem>
      <para>User interface screens development enabling to create, view, update and delete entities  from data model. </para>
    </listitem>
  </orderedlist>
  <section id="quick_start">
    <title>Application Details </title>
    <para>The application is designed to maintain information about the customers and their orders. </para>
    <para>A customer has the following attributes</para>
    <itemizedlist>
      <listitem>
        <para>Name</para>
      </listitem>
      <listitem>
        <para>E-mail</para>
      </listitem>
    </itemizedlist>
    <para>Order attributes:</para>
    <itemizedlist>
      <listitem>
        <para>Ownership by a customer </para>
      </listitem>
      <listitem>
        <para>Date</para>
      </listitem>
      <listitem>
        <para>Amount</para>
      </listitem>
    </itemizedlist>
    <para>The application UI should contain: </para>
    <itemizedlist>
      <listitem>
        <para>Customers list browser screen;</para>
      </listitem>
      <listitem>
        <para>Customer information editor screen, containing as well the list of this customer&apos;s orders;</para>
      </listitem>
      <listitem>
        <para>Full orders list browser screen;</para>
      </listitem>
      <listitem>
        <para>Order editor screen.</para>
      </listitem>
    </itemizedlist>
    <para>The application should support user interface in English and Russian. </para>
  </section>
  <section id="qs_in_studio">
    <title>Creating Applications in CUBA Studio </title>
    <para>This section describes application creation process using  <application>CUBA Studio</application>. Similar information is provided in the videos available here: <ulink url="https://www.cuba-platform.com/en/quickstart"> https://www.cuba-platform.com/quickstart</ulink>. </para>
    <section id="qs_studio_setup">
      <title>Creating a Project</title>
      <orderedlist>
        <listitem>
          <para>Start CUBA Studio and open its web interface (See  <xref linkend="cubaStudio_install"/>).</para>
        </listitem>
        <listitem>
          <para>Click   <guibutton>Open project</guibutton> in the start window.  </para>
        </listitem>
        <listitem>
          <para>Click <guibutton>New</guibutton> in the appeared <guilabel>Select project</guilabel> window.</para>
        </listitem>
        <listitem>
          <para>Specify the name of the directory for the new project in the <guilabel>Project name</guilabel> field of the <guilabel>New project</guilabel> window – for example, <userinput>sales</userinput>. The name should contain only Latin letters, numbers and underscores. Think carefully on the project name at this stage, as changing it later on will require complex manual intervention. </para>
        </listitem>
        <listitem>
          <para>The following fields below will be automatically populated: </para>
          <itemizedlist>
            <listitem>
              <para><guilabel>Project path</guilabel> – the path to the new project directory. You can select the directory manually by clicking on the <guibutton>...</guibutton> button next to the field. The  <guilabel>Folder select</guilabel> window will appear with the list of folders already contained in the Studio workspace. You can select one of those, or create a new directory by clicking the <guibutton>+</guibutton> button.   </para>
            </listitem>
            <listitem>
              <para><guilabel>Project namespace</guilabel> – the namespace which will be used as a prefix for entity names and database tables.</para>
            </listitem>
            <listitem>
              <para><guilabel>Root package</guilabel> − the root package of Java classes. It can be adjusted later, but the classes generated at project creation will not be moved.  </para>
            </listitem>
            <listitem>
              <para><guilabel>Base projects version</guilabel> – the platform version used in the project. It will be automatically downloaded from the repository on project build.  </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>Click <guibutton>OK</guibutton>. Empty project will be created in the specified <userinput>sales</userinput> directory and Studio main window will open. </para>
        </listitem>
        <listitem>
          <para>Assemble the project: select option  <guimenu>Build</guimenu> −&gt; <guimenu>Assemble project</guimenu> in Studio main menu. On this stage all required libraries will be downloaded and project <link linkend="artifact">artifacts</link> will be assembled in  <filename>build</filename> subdirectories of the modules.  </para>
        </listitem>
        <listitem>
          <para>Create the database on the local  <application>HyperSQL </application>server: select option  <guimenu>Run</guimenu> −&gt; <guimenu>Create database </guimenu>in menu. The DB name is the same as project namespace by default. </para>
        </listitem>
        <listitem>
          <para>Select <guimenu>Run</guimenu> −&gt; <guimenu>Deploy</guimenu> menu option.    <application>Tomcat</application> server with the built application will be installed in the project<filename> build</filename> subdirectory. </para>
        </listitem>
        <listitem>
          <para>Select <guimenu>Run</guimenu> −&gt; <guimenu>Start application server </guimenu>option. The link next to the  <guilabel>Web application</guilabel> caption in the status panel will become available in a few seconds so you will be able to open the application directly from Studio. </para>
          <para>The username and password  are  − admin / admin.</para>
          <para>The launched application contains two main menu items  (<guimenu>Administration</guimenu> and <guimenu>Help</guimenu>), as well as security and administration subsystems functionality. </para>
        </listitem>
      </orderedlist>
    </section>
    <section id="qs_create_entities">
      <title>Creating Entities </title>
      <para>Go to the <guilabel>Entities</guilabel> tab in the navigation bar and click  <guibutton>New entity</guibutton>. The entity editor page will be displayed in the workspace. </para>
      <para>Let us create the <code>Customer</code> <glossterm linkend="entity">entity</glossterm> class.</para>
      <itemizedlist>
        <listitem>
          <para>Enter the name of the entity class – <userinput>Customer</userinput> – in the  <guilabel>Class Name</guilabel> field.</para>
        </listitem>
        <listitem>
          <para>The entity name and the database table name will be automatically generated in  <guilabel>Name</guilabel> and <guilabel>Table</guilabel> fields.</para>
        </listitem>
        <listitem>Leave the existing value – <link linkend="standardEntity">StandardEntity</link>- in the <guilabel>Parent class</guilabel>field.</listitem>
        <listitem>
          <para>Leave the <guilabel>Inheritance strategy</guilabel>  field blank. </para>
        </listitem>
        <listitem>
          <para>Click  <guibutton>...</guibutton> button next to the entity name to open the  <guilabel>Localized message</guilabel> window. Specify <link linkend="localization">localization</link> for the entity name in the available languages in it. </para>
        </listitem>
      </itemizedlist>
      <para>Next, let us create entity attributes. To do this, click the  <guibutton>New</guibutton> button below the <guilabel>Attributes</guilabel> table.</para>
      <itemizedlist>
        <listitem>
          <para><guilabel>Create attribute</guilabel> window will appear. Enter the name  of the entity attribute −  <userinput>name</userinput>, in the <guilabel>Name</guilabel> field. Select <link linkend="datatype">DATATYPE</link> value in the  <guilabel>Attribute type</guilabel> list, specify <userinput>String</userinput> attribute type in <guilabel>Type</guilabel> field and then set the length of the text attribute  to 100 characters in the <guilabel>Length</guilabel> field. Check the  <guilabel>Mandatory</guilabel> box. If the box is checked, the attribute will be required. The name of the column will automatically generate in the <guilabel>Column</guilabel> field in the database. Now click <guibutton>...</guibutton> button next to the attribute name to open the  <guilabel>Localized message</guilabel> window. Localize the attribute name in the available languages. Click  <guibutton>Add</guibutton> to add the attribute. </para>
        </listitem>
        <listitem>
          <para><code>email</code> attribute is created in the same way but the value in  <guilabel>Length</guilabel> field should be set to  <userinput>50</userinput>.</para>
        </listitem>
      </itemizedlist>
      <para>After creating the attributes, go to  <guilabel>Instance name</guilabel> tab in the entity designer to specify  <link linkend="namePattern">Name pattern</link>. Select the  <guilabel>name</guilabel> attribute in  <guilabel>Available attributes </guilabel>list and click the button with the right arrow on it. </para>
      <para><classname>Customer</classname> entity creation is now finished. Click  <guibutton>Apply</guibutton> in the upper left corner of entity designer to save the changes. </para>
      <para>When the new entity is saved, a message prompting database update appears on the screen, and the  <guibutton>Generate DB scripts</guibutton> button becomes available at the bottom of the  <guilabel>Entities</guilabel> panel. This message may be ignored.</para>
      <para>Let us create the  <code>Order</code> entity. Click <guibutton>New entity</guibutton> option on  the  <guilabel>Entities</guilabel> panel. Enter the  <guilabel>Name</guilabel> of the entity class − <userinput>Order</userinput>. The entity should have the following attributes: </para>
      <itemizedlist>
        <listitem>
          <para><guilabel>Name</guilabel> − <userinput>customer</userinput>, <guilabel>Attribute type</guilabel> − <link linkend="associationType">ASSOCIATION</link>, <guilabel>Type</guilabel> − <userinput>Customer</userinput>, <guilabel>Cardinality</guilabel> − <link linkend="manyToOne">MANY_TO_ONE</link>.</para>
        </listitem>
        <listitem>
          <para><guilabel>Name</guilabel> − <userinput>date</userinput>, <guilabel>Attribute type</guilabel> − <link linkend="datatype">DATATYPE</link>, <guilabel>Type</guilabel> − <userinput>Date</userinput>. Check <guilabel>Mandatory</guilabel> box for  <code>date</code> attribute.</para>
        </listitem>
        <listitem>
          <para><guilabel>Name</guilabel> − <userinput>amount</userinput>, <guilabel>Attribute type</guilabel> − <link linkend="datatype">DATATYPE</link>, <guilabel>Type</guilabel> − <userinput>BigDecimal</userinput>.</para>
        </listitem>
      </itemizedlist>
      <para>Specify <link linkend="localization">localized</link> name for each of the attributes. </para>
    </section>
    <section id="qs_create_db_tables">
      <title>Creating Database Tables </title>
      <para>It is sufficient to click <guibutton>Generate DB scripts</guibutton> button in  <guilabel>Entities</guilabel> tab on the navigation panel to <link linkend="db_update_in_dev">create database tables</link>. After that,  <guilabel>Database update scripts </guilabel>page will open. Both incremental DB update scripts from the current state  (<guilabel>Update scripts</guilabel>) and initial DB creation scripts  (<guilabel>Init tables</guilabel>, <guilabel>Init constraints</guilabel>, <guilabel>Init data</guilabel>) will be generated on this page. Click  <guibutton>Apply</guibutton> to save the generated scripts. To run update scripts stop the running application using the command  <guimenu>Run</guimenu> −&gt; <guimenu>Stop application server</guimenu>, then select  <guimenu>Run</guimenu> −&gt; <guimenu>Update database</guimenu>.</para>
    </section>
    <section id="qs_create_ui">
      <title>Creating the Application User Interface </title>
      <para>Now we will create the  screens for customers and orders data management. </para>
      <section id="qs_create_customer_screens">
        <title>Screens for Customer</title>
        <para>Select <classname>com.sample.sales.entity.Customer</classname> class in the  <guilabel>Entities</guilabel> tab on the navigation panel to create standard screens for viewing and editing Customers. Click    <guibutton>Create standard screens</guibutton>. After that, <guilabel>Create standard screens</guilabel> window will appear. All fields in this screen are already populated with default values, there is no need to change them. Click on <guibutton>Create</guibutton> button. <filename>customer-edit.xml</filename> and <filename>customer-browse.xml </filename>files will appear in GUI Module in   <guilabel>Screens</guilabel> tab of the navigation panel. Specify headers  <glossterm linkend="localization">localization</glossterm> for these files. For this, select one of the files and click  <guibutton>Edit</guibutton>. This will bring up<guilabel> Properties</guilabel>  tab on the <guilabel>Screen designer </guilabel>page. Click <guibutton>...</guibutton> button  next to the  <guilabel>Caption</guilabel> field and specify localized screen names. Do the same for the other screen.  </para>
      </section>
      <section id="qs_create_order_screens">
        <title>Screens for Order</title>
        <para><code>Order</code> entity has the following feature: since one of the attributes is<code> Order.customer</code> <link linkend="associationType">reference</link> attribute, you should define <code>Order</code>  <link linkend="views">entity view</link> including this attribute  (standard <code>_local</code> view does not include reference attributes). Go to  <guilabel>Entities</guilabel> tab on the navigation panel, select <code>Order</code> entity and click on  <guibutton>New view</guibutton>  button.  <guilabel>View designer</guilabel>,  page where the view is defined will display. Enter  <userinput>orderWithCustomer </userinput>as view name,  click on  <code>customer</code> attribute and select  <code>_minimal</code> view for the  <code>Customer</code> entity in the appeared panel on the right. Click <guibutton>Apply</guibutton> in the upper left corner. </para>
        <para>After that select  <code>Order</code> entity and click  <guibutton>Create standard screens</guibutton> option. Select <userinput>orderWithCustomer</userinput> as <guilabel>Browse view</guilabel> and <guilabel>Edit view</guilabel> in the appeared <guilabel>Create standard screens</guilabel> window and click  <guibutton>Create</guibutton>. Studio will generate screen files in GUI Module package. </para>
      </section>
      <section id="qs_create_menu">
        <title>Application Menu</title>
        <para>At the moment of their creation, the screens were added to the  <guimenu>application</guimenu> menu item of the default application menu. Let us rename it. Switch to the <guilabel>Main menu</guilabel> tab on the navigation panel and click  <guibutton>Edit</guibutton>. The   <guilabel>Menu designer</guilabel> page will open. Select the <guilabel>application</guilabel> menu item to view its properties. </para>
        <para>Enter the new value of the menu identifier − <literal>shop</literal> − in the <code>Id</code> field, click  <guilabel>Caption edit</guilabel> and set the localized name of the menu item. Click  <guibutton>OK</guibutton>.</para>
        <para>After editing the menu, click  <guibutton>OK</guibutton> in the top right corner of the workspace.</para>
      </section>
      <section id="qs_customer_edit_with_orders">
        <title>Customer Editor With a List of Orders </title>
        <para>Do the following to display the list of Orders in the Customer’s edit screen: </para>
        <itemizedlist>
          <listitem>
            <para>Go to <guilabel>Screens</guilabel> tab on the navigation panel. Choose  <filename>customer-edit.xml</filename> file and click  <guibutton>Edit</guibutton>.</para>
          </listitem>
          <listitem>
            <para>Go to <guilabel>Datasources</guilabel> tab on  <guilabel>Screens designer</guilabel> page and click  <guibutton>New</guibutton>.</para>
          </listitem>
          <listitem>
            <para>Select the newly created data source in the list. Its attributes will appear in the right part of the page. </para>
          </listitem>
          <listitem>
            <para>Specify <userinput>collectionDatasource</userinput> in the <guilabel>Type</guilabel> field.</para>
          </listitem>
          <listitem>
            <para>In <guilabel>Id</guilabel> field enter the data source identifier value − <userinput>ordersDs</userinput>.</para>
          </listitem>
          <listitem>
            <para>Select  <userinput>com.sample.sales.entity.Order</userinput> entity in the <guilabel>Entity</guilabel> list.</para>
          </listitem>
          <listitem>
            <para>Select   <userinput>_local</userinput> view in the <guilabel>View</guilabel> list.</para>
          </listitem>
          <listitem>
            <para>Enter the following query in the    <guilabel>Query</guilabel> field: <code>select o from sales$Order o where o.customer.id = :ds$customerDs order by o.date</code>. The query contains orders selection criterion with <code>ds$customerDs</code> parameter. The parameter value named like  <code>ds${datasource_name}</code> will contain id of the entity selected in  <code>datasource_name</code> datasource at the moment, in this case it is the id of the Customer being edited.  </para>
          </listitem>
          <listitem>
            <para>Click  <guibutton>Apply</guibutton> to save the changes. </para>
          </listitem>
          <listitem>
            <para>Next go to  <guilabel>Layout</guilabel> tab in the screen designer and find <code>Label</code> component in the components palette. Drag this component to the screen components hierarchy panel and place it between   <code>fieldGroup</code> and <code>windowActions</code>. Go to <guilabel>Properties</guilabel> tab in the properties panel. Enter <userinput>msg://orders</userinput> in the <guilabel>value</guilabel> field. Click  <guibutton>...</guibutton> button next to the <guilabel>value</guilabel> field and define the localized value.</para>
            <tip>
              <title>Tip</title>
              <para>If the application is not intended to be used in multiple languages, the value in the  <guilabel>value</guilabel> field can be entered in the required language. </para>
            </tip>
          </listitem>
          <listitem>
            <para>Drag <code>Table</code> from the components palette to components hierarchy panel and place it between <code>label</code> and <code>windowActions</code>. Select this component in the hierarchy and specify table size in properties on <guilabel>Layout</guilabel> tab: set  <userinput>100%</userinput> in <guilabel>width</guilabel> field and<userinput> 200px</userinput> in  <guilabel>height</guilabel> field. Go to <guilabel>Properties</guilabel> tab. Set  <userinput>ordersTable </userinput>value as id, choose  <userinput>orderDs </userinput>from the list of available datasources.   Next, click the  <guibutton>edit</guibutton> button for  <guilabel>columns</guilabel>. The table columns editor window  will appear on the screen. Select  the <userinput>date</userinput> value from the drop-down list in the first line of the  <guilabel>ID</guilabel> column, and <userinput>amount</userinput>  in the second one. Click  <guibutton>OK</guibutton>.</para>
          </listitem>
          <listitem>
            <para>Click <guibutton>Apply</guibutton> in the upper left corner of the desktop panel to save the changes in Customer edit screen. </para>
          </listitem>
        </itemizedlist>
        <para>Now let us see how the created screens look like in actual application. Select   <guimenu>Run</guimenu> −&gt;  <guimenu>Restart application server</guimenu>.</para>
        <para>Log in with selecting English language in the login window. Open the menu item <guimenu>Sales</guimenu> −&gt; <guimenu>Customers</guimenu>. The Customers browser is shown in  <xref linkend="figure_customerBrowse"/>.</para>
        <para>Click  <guibutton>Create</guibutton>. The new customer editor is shown in  <xref linkend="figure_customerEdit"/>.</para>
        <para>Open <guimenu>Sales</guimenu> −&gt; <guimenu>Orders menu item</guimenu>. The Orders screen is shown in  <xref linkend="figure_orderBrowse"/>.</para>
        <para>Click <guibutton>Create</guibutton>. The new order creation screen is shown in  <xref linkend="figure_orderEdit"/>.</para>
      </section>
    </section>
  </section>
  <section id="qs_create_from_template">
    <title>Creating Applications from Template</title>
    <para>This section provides guidelines on creating applications without CUBA Studio.</para>
    <section id="qs_setup">
      <title>Setting Up the Application Project</title>
      <orderedlist>
        <listitem>
          <para>Create the working directory of the project, e.g. <filename>c:/work/sales</filename>.</para>
        </listitem>
        <listitem>
          <para>Download <filename>project-template.zip</filename> archive with project template at <ulink url="https://www.cuba-platform.com/download">https://www.cuba-platform.com/download</ulink> and extract its contents into the working directory of the project.</para>
        </listitem>
        <listitem>
          <para>Start the command line in the working directory,  <filename>c:/work/sales</filename>.</para>
        </listitem>
        <listitem>
          <para>Enter the following command to assemble the project:</para>
          <para><prompt>gradlew assemble</prompt></para>
          <para>At this stage, project <link linkend="artifact">artifacts</link> will be assembled in the project&apos;s   <filename>build</filename> subdirectories. </para>
        </listitem>
        <listitem>
          <para>In order to be able to work with the project in  <application>IntelliJ IDEA</application>, run the command to create <filename>*.ipr</filename>, <filename>*.iml</filename> project files:</para>
          <para><prompt>gradlew idea</prompt></para>
        </listitem>
        <listitem>
          <para>Install  <application>Apache Tomcat server</application>:</para>
          <para><prompt>gradlew setupTomcat</prompt></para>
          <para>Tomcat will be installed into  <filename>build</filename> subdirectory of the project&apos;s working directory. The server location is determined by the value of the <varname>ext.tomcatDir</varname> variable in the <filename>build.gradle</filename> script. </para>
        </listitem>
        <listitem>
          <para>Deploy the assembled artifacts to <application>Tomcat</application>:</para>
          <para><prompt>gradlew deploy</prompt></para>
        </listitem>
        <listitem>
          <para>Start the <application>HyperSQL</application> server:</para>
          <para><prompt>gradlew startDb</prompt></para>
        </listitem>
        <listitem>
          <para>Create database in the  <filename>data</filename> subdirectory:</para>
          <para><prompt>gradlew createDb</prompt></para>
        </listitem>
        <listitem>
          <para>Start  Tomcat:</para>
          <para><prompt>gradlew start</prompt></para>
          <para>Server logs are available in <filename>build/tomcat/logs</filename></para>
        </listitem>
        <listitem>To view the application in the web browser, type <code>http://localhost:8080/app</code>in the address bar. <para>The user login and password is admin / admin.</para><para>The running application contains two main menu items (<guimenu>Administration</guimenu> and <guimenu>Help</guimenu>), and the functionality for security and system administration.</para><figure>
            <title>Main Application Screen</title>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/quick_start_app1.png"/>
              </imageobject>
            </mediaobject>
          </figure></listitem>
        <listitem>
          <para>Open <filename>sales.ipr</filename> file in  IntelliJ IDEA. You will see that the project structure is similar to those described  in <xref linkend="project_file_structure"/></para>
        </listitem>
        <listitem>
          <para>In order to stop Tomcat, run the following command:</para>
          <para><prompt>gradlew stop</prompt> </para>
        </listitem>
      </orderedlist>
    </section>
    <section id="qs_templ_create_db_tables">
      <title>Creating Database Tables </title>
      <para>Open <filename>db/init/hsql/10.create-db.sql</filename> file in the  <structname>core</structname> module and add the following code for creating <code>Customer</code> and <code>Order</code> database tables:</para>
      <programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/qs/create-tables.sql" encoding="UTF-8" parse="text"/></programlisting>
      <para>Next, open <filename>db/init/hsql/20.create-db.sql</filename> file in the  <structname>core</structname> module and add the following code for creating a foreign key:<programlisting language="java"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/qs/create-constraints.sql" encoding="UTF-8" parse="text"/></programlisting></para>
      <para>Foreign key creation is taken out in a separate file for improved compatibility with  <application>CUBA Studio</application>. If compatibility is not required,  you can set the foreign key right after creating <code>SALES_ORDER</code> table:</para>
      <programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/qs/create-db.sql" encoding="UTF-8" parse="text"/></programlisting>
      <para>SQL commands should be separated by ^ symbol. This enables to create composite commands containing  «;» within them. System fields are mandatory. </para>
      <para>Stop the application server by running</para>
      <para> <prompt>gradlew stop</prompt></para>
      <para>Now re-create <database> sales</database> database by running </para>
      <para><prompt>gradlew createDb</prompt></para>
      <para>This will overwrite the old database with the same name and create a new one, for which  <filename>create-db.sql</filename> scripts will be executed.</para>
    </section>
    <section id="qs_templ_create_entities">
      <title>Creating Entities</title>
      <para>Create the  <code>com.sample.sales.entity</code> package in the  <structname>global</structname> module.</para>
      <para>Now create the <code>Customer</code> <link linkend="data_model">entity</link> class as shown in the listing below:</para>
      <programlisting language="java"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/qs/Customer.java" encoding="UTF-8" parse="text"/></programlisting>
      <tip>
        <title>Tip</title>
        <para>In order to automatically generate get/set  methods in IntelliJ IDEA, you can press   <keycombo>
            <keycap>Alt</keycap>
            <keycap>Ins</keycap>
          </keycombo> and select <guimenu>Getter and Setter</guimenu> in the context menu. In the window, select the required fields, and click  <guibutton>ОК</guibutton>.</para>
      </tip>
      <para><code>Customer</code> class is the inheritor of the <code id="standardEntity">StandardEntity</code>   <link linkend="base_entity_classes">base class</link>, which provides standard entity functionality: primary key, optimistic locking, audit of instance creation and modification, and  <link linkend="soft_deletion">soft deletion</link> support.</para>
      <para>Let us consider the  <link linkend="entity_annotations">annotations</link> used in the entity class: <itemizedlist>
          <listitem>
            <para><code>@javax.persistence.Entity</code> allows you to declare the class as the  data model entity under  the name   <literal>sales$Customer</literal> (<literal>name</literal> parameter). Entity names must begin with a prefix, separated by <literal>$</literal> symbol. It is recommended to use the short name of the project as prefix to create a separate namespace.</para>
          </listitem>
          <listitem>
            <para><code>@javax.persistence.Table</code> maps the entity onto the <database>
                <database>SALES_CUSTOMER</database>
              </database> database table. </para>
          </listitem>
          <listitem>
            <para><code>@com.haulmont.chile.core.annotations.NamePattern</code> defines the way in which the entity <link linkend="namePattern">instance names</link> will be formed. In this case, the instance name will be generated based on the value of the <literal>name</literal> attribute. Instance names are usually required for displaying reference attributes in the user interface.</para>
          </listitem>
          <listitem>
            <para><code>@javax.persistence.Column</code> maps the entity attribute on the database column. If the <code>nullable</code> parameter is set to <code>false</code>, the attribute will be required. The  <code>length</code> parameter sets the maximum length of the string attribute (the default length is <literal>255</literal>).</para>
          </listitem>
        </itemizedlist></para>
      <para id="text_registration_entity">After creating the class, register it in the  <filename>persistence.xml</filename> file of the <structname>global</structname> module in the  <sgmltag>persistence-unit</sgmltag> element:<programlisting language="xml">&lt;class&gt;com.sample.sales.entity.Customer&lt;/class&gt;</programlisting></para>
      <para>To <link linkend="localization">localize</link> entity and attribute names, create  <filename>messages.properties</filename> and <filename>messages_ru.properties</filename> in the same package as the entity class.</para>
      <para>In these files, define the entity name and the attribute names on separate strings  using the   <literal>entity_class</literal>  and the   <literal>entity_class.attribute</literal> format. These names will be used in the entity browser and editor. </para>
      <caution>
        <title>Tip</title>
        <para>All source files, including <filename>*.properties</filename>, must have the  <literal>UTF-8</literal> encoding, so you have to set the <literal>UTF-8</literal> encoding in <application>IntelliJ IDEA</application> before starting the work on the project. In order to do this, go to <guimenu>File −&gt; Settings −&gt; Project Settings −&gt; File Encodings</guimenu>. Select <literal>UTF-8</literal> in the  <guilabel>Default encoding for properties files</guilabel>  drop-down. If the <guilabel>Autodetect UTF-encoded files</guilabel> box is unchecked, check it now.</para>
      </caution>
      <para>Now, create the localized names for the <code>Customer</code> entity:</para>
      <para>    <filename>messages.properties</filename><programlisting>Customer=Customer
Customer.name=Name
Customer.email=Email</programlisting></para>
      <para>    <filename>messages_ru.properties</filename><programlisting>Customer=Покупатель
Customer.name=Имя
Customer.email=Email</programlisting></para>
      <para>Next, create the <code>Order</code> in the   <code>com.sample.sales.entity</code> package. The entity class is shown in the listing below:</para>
      <programlisting language="java"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/qs/Order.java" encoding="UTF-8" parse="text"/></programlisting>
      <para>Below are  the  <link linkend="entity_attr_annotations">annotations</link> used in the entity class: <itemizedlist>
          <listitem>
            <para><code>@javax.persistence.ManyToOne</code> defines a reference attribute with  <literal>many-to-one</literal> cardinality, i.e. in this case, several orders for one customer. If the <code>fetch</code> parameter is set to <code>FetchType.LAZY</code>, the  <code>Customer</code> entity will not necessarily be loaded together with the <code>Order</code> entity.</para>
          </listitem>
          <listitem>
            <para><code>@javax.persistence.JoinColumn</code> defines the way in which the entities are related on the database <link linkend="app_tiers">tier</link>. The <code>name</code> parameter defines the field of the <database>SALES_ORDER</database> entity, which refers to the primary key of the   <database>SALES_CUSTOMER</database> table.</para>
          </listitem>
          <listitem>
            <para><code>@javax.persistence.Temporal</code> defines the allowed values of a date attribute: date+time, date only, or time only.</para>
          </listitem>
        </itemizedlist></para>
      <para>Create the localized names for the <code>Order</code> entity:</para>
      <para>    <filename>messages.properties</filename><programlisting>Order=Order
Order.customer=Customer
Order.date=Date
Order.amount=Amount</programlisting></para>
      <para>    <filename>messages_ru.properties</filename><programlisting>Order=Заказ
Order.customer=Покупатель
Order.date=Дата
Order.amount=Сумма</programlisting></para>
      <para>Now register the entity class in the <filename>persistence.xml </filename>file of the <structname>global</structname> module: <programlisting language="xml">&lt;class&gt;com.sample.sales.entity.Order&lt;/class&gt;</programlisting></para>
    </section>
    <section id="qs_templ_create_ui">
      <title>Creating the Application UI</title>
      <para>The list of languages supported by the interface should be added to the <link linkend="app_properties">application properties</link> file <filename>web-app.properties</filename> in the <structname>web</structname> module. Add the following value to this file:<programlisting>cuba.availableLocales=English|en;Russian|ru</programlisting></para>
      <para>The interface-related files will be created in the  <code>com.sample.sales.gui</code> package of the <structname>gui</structname> module.</para>
      <para>Each screen is defined by a <link linkend="screen_xml">XML-descriptor</link>, which describes the <link linkend="datasources">datasources</link> and the <link linkend="gui_framework">visual components</link> layout. A screen can also have a  <link linkend="screen_controller">controller</link>, which is a Java class containing the logic of  screen initialization and events handling. </para>
      <section id="qs_customer_browse">
        <title>Customers Browser</title>
        <para>This screen will display a table with the list of customers, a filter, and a buttons panel. The latter will provide the basic operations on the table records (create, modify, delete).</para>
        <para>Create the <code>com.sample.sales.gui.customer</code> package in the <structname>gui</structname> module. This package will contain files related to the UI of the <code>Customer</code> entity. Create the  XML-descriptor of  the customers browser −  <filename>customer-browse.xml</filename>: </para>
        <programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/qs/customer-browse.xml" encoding="UTF-8" parse="text"/></programlisting>
        <para>Below is a detailed overview of the descriptor elements.</para>
        <para>The root element contains the <sgmltag>class</sgmltag> attribute, which defines the  <link linkend="screen_controller">screen controller</link> class. In this case, we need the most basic logic of working with a list of entity instances, that is why the standard  <code>AbstractLookup</code> controller is used.</para>
        <para>The <sgmltag>caption</sgmltag> attribute of the root element sets the screen caption. In this case, its value begins with  <code>msg://</code> prefix, which means a key in the localized <link linkend="message_packs">message pack</link>. The package is set in the  <sgmltag>messagesPack</sgmltag> attribute of the same element. Thus, to set the screen caption in English and Russian, you need to create <filename>messages.properties</filename> and <filename>messages_ru.properties</filename> in the specified package, and insert  the following key-value pairs into them: </para>
        <para><filename>messages.properties</filename> <programlisting>browserCaption=Customers</programlisting></para>
        <para><filename>messages_ru.properties</filename> <programlisting>browserCaption=Покупатели</programlisting></para>
        <para>A single <link linkend="datasources">collectionDatasource</link>, which selects  <code>Customer</code> entities using a  JPQL query <programlisting>select c from sales$Customer c order by c.name</programlisting>  is added in the    <sgmltag>dsContext</sgmltag> element with the <code>_local</code> <link linkend="views">view</link>.</para>
        <para>The content of the  <sgmltag>layout</sgmltag> element defines the visual screen layout. Nested components are displayed vertically down. </para>
        <para>The <link linkend="gui_Filter">Filter</link> component (<sgmltag>filter</sgmltag> element) is used for displaying a user-defined filter.</para>
        <para> The <link linkend="gui_Table">Table</link> component (<sgmltag>table</sgmltag> element) is used for displaying the data in tabular format.</para>
        <para>The <sgmltag>column</sgmltag> element sets the parameters of table column display. The required <sgmltag>id</sgmltag> property identifies the attribute that  provides  data for display in the column. By default, the name of this attribute from the localized <link linkend="message_packs">message pack</link> is used as the column header.</para>
        <para>The <sgmltag>rowsCount</sgmltag> element enables table pagination and  rows count. </para>
        <para>The <sgmltag>actions</sgmltag> attribute defines  a set of context <link linkend="gui_Action">actions</link> for the table. In this case, all the specified actions are <link linkend="list_actions">standard</link> (which is determined by the   <sgmltag>id</sgmltag> property of the  <sgmltag>action</sgmltag> element), and do not require any additional coding. Adding an action to the table results in a new item of  the context menu. </para>
        <para>The panel (<sgmltag>buttonsPanel</sgmltag> element), located above the table, contains action buttons for data management. The buttons are connected to table actions. In this case, they duplicate the context menu items.</para>
        <para>The XML-descriptor must have an identifier, which can be used to call the screen from the menu or the application code. In this case, the identifier is set in the  <filename>
            <link linkend="screens.xml">screens.xml</link>
          </filename> file of the  <structname>gui</structname> module <programlisting language="xml">&lt;screen id=&quot;sales$Customer.lookup&quot; template=&quot;/com/sample/sales/gui/customer/customer-browse.xml&quot;/&gt;</programlisting></para>
        <para>The identifier in the format<literal> sales$Customer.lookup</literal> is compliant with the convention that the entity browser names must have the format  <literal>{entity_name}.lookup</literal>. This convention simplifies configuration of visual components, which operate on reference  attributes. </para>
        <para>In order to be able to invoke the screen from the main application menu, add the following element to the <filename>
            <link linkend="menu.xml">web-menu.xml</link>
          </filename> file of the <structname>web</structname> module:<programlisting language="xml">&lt;menu id=&quot;sales&quot; insertBefore=&quot;administration&quot;&gt;
    &lt;item id=&quot;sales$Customer.lookup&quot;/&gt;
&lt;/menu&gt;</programlisting></para>
        <para>In order to add  localized screen captions, insert the following strings into the main message pack of the web module (<filename>messages.properties</filename> and <filename>messages_ru.properties)</filename> in the  <code>com.sample.sales.web</code> package:</para>
        <para>    <filename>messages.properties</filename></para>
        <programlisting>menu-config.sales=Sales
menu-config.sales$Customer.lookup=Customers</programlisting>
        <para>    <filename>messages_ru.properties</filename></para>
        <programlisting>menu-config.sales=Продажи
menu-config.sales$Customer.lookup=Покупатели</programlisting>
        <para>Let us see how the newly created screen looks in the running application. In order to do this, rebuild the project  </para>
        <para><prompt>gradle restart</prompt></para>
        <para>select  English  in the language picker and log in to the system. Open the  <guimenu>Sales</guimenu> −&gt; <guimenu>Customers</guimenu> menu.</para>
        <figure id="figure_customerBrowse">
          <title>Customers Browser</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_customer_browse.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section id="qs_templ_customer_edit">
        <title>Customer Editor</title>
        <para>At this stage, we will create a simple customer editor without a list of orders. </para>
        <para>Create <filename>customer-edit.xml</filename> file with the following content in the <code>com.sample.sales.gui.customer</code> package: <programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/qs/customer-edit-1.xml" encoding="UTF-8" parse="text"/></programlisting></para>
        <para>The root element contains the <sgmltag>class</sgmltag> attribute, which defines the  <link linkend="screen_controller">screen controller</link> class. In this case, we need the most basic logic of editing an entity instance, that is why the standard  <code>AbstractEditor</code> controller is used.</para>
        <para>The  <sgmltag>datasource</sgmltag> attribute of the root element defines the name of the data source, where the entity instance will be passed from the screen initialization code.</para>
        <para>The <sgmltag>focusComponent</sgmltag> attribute defines the name of the component which will have the input focus when the screen is opened.</para>
        <para>The  <sgmltag>caption</sgmltag> attribute of the root element sets the screen caption. Let us add the following key-value pairs to the existing <filename>messages.properties</filename> and <filename>messages_ru.properties</filename> files in the <code>com.sample.sales.gui.customer</code> package:  </para>
        <para><filename>messages.properties</filename> <programlisting>editorCaption=Customer</programlisting><filename>messages_ru.properties</filename> <programlisting>editorCaption=Покупатель</programlisting></para>
        <para>The  <sgmltag>dsContext</sgmltag> element contains the <sgmltag>datasource</sgmltag>, where the entity instance will be passed from the screen initialization code.</para>
        <para>The <sgmltag>layout</sgmltag> element contains two nested elements in this case: <itemizedlist>
            <listitem>
              <para><sgmltag>fieldGroup</sgmltag> is <link linkend="gui_FieldGroup">a group of fields</link> connected to the data source and intended for displaying and editing entity attribute values </para>
            </listitem>
            <listitem>
              <para><sgmltag>iframe</sgmltag> is  an <literal>editWindowActions</literal> frame (<sgmltag>screen</sgmltag> attribute) with a list of standard editor buttons (<guibutton>OK</guibutton> and <guibutton>Cancel</guibutton>).</para>
            </listitem>
          </itemizedlist></para>
        <para>The <sgmltag>id</sgmltag> attributes of the <sgmltag>field</sgmltag> elements correspond to the names of the edited entity attributes. </para>
        <para>The <sgmltag>expand</sgmltag> attribute of the  <sgmltag>layout</sgmltag> element is required to expand the frame vertically. This will push  the buttons up closer to the field group. </para>
        <para>Let us set the screen identifier in the <filename>screens.xml</filename> file of the  <structname>gui</structname> module: <programlisting language="xml">&lt;screen id=&quot;sales$Customer.edit&quot; template=&quot;/com/sample/sales/gui/customer/customer-edit.xml&quot;/&gt;</programlisting></para>
        <para>In order for the standard table <literal>create</literal> and <literal>edit</literal> actions to work correctly, the screen id must have the format  <literal>{entity_name}.edit</literal>. </para>
        <para>Let us add and edit a customer in the running application. In order to do this, rebuild the project: </para>
        <para><prompt>gradle restart</prompt></para>
        <para>select  English in  the language picker, and log in to the system.  Open the  <guimenu>Sales</guimenu> −&gt; <guimenu>Customers</guimenu> menu and click <guibutton>Create</guibutton>.</para>
        <figure>
          <title>Customer Editor </title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_customer_edit_1.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section id="qs_templ_order_browser">
        <title>Orders Browser</title>
        <para>Create <code>com.sample.sales.gui.order</code> package with  <filename>order-browse.xml</filename> file in it. The contents of the file should be as follows:<programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/qs/order-browse.xml" encoding="UTF-8" parse="text"/></programlisting></para>
        <para>This screen is similar to the screen described in  <xref linkend="qs_customer_browse"/>. However, it has the following specifics: one of the attributes displayed on it  <code>(Order.customer</code>) is a <link linkend="associationType">reference</link>. This requires that we define a  <link linkend="views">view</link> of the    <code>Order</code> entity, which includes this attribute, since  the standard <code>_local</code> view does not include reference attributes.</para>
        <para>Define <literal>orderWithCustomer</literal> view in the <filename>
            <link linkend="views.xml">views.xml</link>
          </filename> file of the <structname>global</structname> module: <programlisting language="xml">&lt;view class=&quot;com.sample.sales.entity.Order&quot;
      name=&quot;orderWithCustomer&quot;
      extends=&quot;_local&quot;&gt;
    &lt;property name=&quot;customer&quot; view=&quot;_minimal&quot;/&gt;
&lt;/view&gt;</programlisting></para>
        <para>Create <filename>messages.properties</filename> and <filename>messages_ru.properties</filename> in the <code>com.sample.sales.gui.order</code> package, and insert the localized screen captions into them: </para>
        <para><filename>messages.properties</filename> <programlisting>browserCaption=Orders</programlisting></para>
        <para><filename>messages_ru.properties</filename> <programlisting>browserCaption=Заказы</programlisting></para>
        <para>Next, register the screen in the <filename>screens.xml</filename> file of the <structname>gui</structname> module: <programlisting language="xml">&lt;screen id=&quot;sales$Order.lookup&quot; template=&quot;/com/sample/sales/gui/order/order-browse.xml&quot;/&gt;</programlisting></para>
        <para>and add the corresponding menu item to the <filename>web-menu.xml</filename> file of the  <structname>web</structname> module: <programlisting language="xml">&lt;item id=&quot;sales$Order.lookup&quot;/&gt;</programlisting></para>
        <para>Add the localized captions of the orders browser into the  <link linkend="main_message_pack">main message pack</link> of the web module (<filename>messages.properties</filename> and <filename>messages_ru.properties</filename> files of the <code>com.sample.sales.web</code> package):</para>
        <para>    <filename>messages.properties</filename></para>
        <programlisting>menu-config.sales$Order.lookup=Orders</programlisting>
        <para>    <filename>messages_ru.properties</filename></para>
        <programlisting>menu-config.sales$Order.lookup=Заказы</programlisting>
        <para>Rebuild the project</para>
        <para><prompt>gradle restart</prompt></para>
        <para>select English in the language picker and log in to the system. Open the <guimenu>Sales</guimenu> −&gt; <guimenu>Orders</guimenu> menu.</para>
        <figure id="figure_orderBrowse">
          <title>Orders Browser </title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_order_browse.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section id="qs_templ_order_edit">
        <title>Order Editor</title>
        <para>Create <filename>order-edit.xml</filename> file with the following contents in the <code>com.sample.sales.gui.order</code> package: <programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../source/qs/order-edit.xml" encoding="UTF-8" parse="text"/></programlisting></para>
        <para>This screen also uses the predefined  <literal>orderWithCustomer</literal> view to display order with customer. </para>
        <para>Add the localized caption of the order editor into    <filename>messages.properties</filename> and <filename>messages_ru.properties</filename> files in the <code>com.sample.sales.gui.order</code> package: </para>
        <para><filename>messages.properties</filename> <programlisting>editorCaption=Order</programlisting></para>
        <para><filename>messages_ru.properties</filename> <programlisting>editorCaption=Заказ</programlisting></para>
        <para>Register the screen in the <filename>screens.xml</filename> file of the <structname>gui</structname> module: </para>
        <programlisting language="xml">&lt;screen id=&quot;sales$Order.edit&quot; template=&quot;/com/sample/sales/gui/order/order-edit.xml&quot;/&gt;</programlisting>
        <para>Rebuild the project </para>
        <para><prompt>gradle restart</prompt></para>
        <para>select English in the language picker and log in to the system. Open the <guimenu>Sales</guimenu> −&gt; <guimenu>Orders</guimenu> menu and click  <guibutton>Create</guibutton>.</para>
        <figure id="figure_orderEdit">
          <title>Order Editor</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_order_edit.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>In the resulting window, the customer is selected in the customers browser which opens as you click  <guibutton>...</guibutton></para>
        <para>In many cases, it is convenient to select the related entity from a drop-down list. To implement this feature, add the options data source to the <sgmltag>dsContext</sgmltag> element: <programlisting language="xml">&lt;collectionDatasource id=&quot;customersDs&quot;
                      class=&quot;com.sample.sales.entity.Customer&quot;
                      view=&quot;_minimal&quot;&gt;
    &lt;query&gt;select c from sales$Customer c order by c.name&lt;/query&gt;
&lt;/collectionDatasource&gt;</programlisting></para>
        <para>and set the <sgmltag>optionsDatasource</sgmltag> property of the <literal>customer</literal> field: <programlisting language="xml">&lt;field id=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot;/&gt;</programlisting></para>
        <para>Once the application is restarted, the screen will look as shown in the figure below:</para>
        <figure>
          <title>Order Editor with a List of Customers</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_order_edit_2.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section id="qs_templ_customer_edit_with_orders">
        <title>Customer Editor With a List of Orders</title>
        <para>Now let us return to the task of displaying the list of orders in the customer editor.</para>
        <para>Open the <filename>customer-edit.xml</filename> file and add the following data source to <sgmltag>dsContext</sgmltag> element: <programlisting language="xml">&lt;collectionDatasource id=&quot;ordersDs&quot;
                      class=&quot;com.sample.sales.entity.Order&quot;
                      view=&quot;_local&quot;&gt;
    &lt;query&gt;
        select o from sales$Order o
        where o.customer.id = :ds$customerDs
        order by o.date
    &lt;/query&gt;
&lt;/collectionDatasource&gt;</programlisting></para>
        <para>The <link linkend="datasource_query">query</link> here contains the condition to select the orders with  <literal>ds$customerDs</literal> parameter. The value of parameter with the name in the format <literal>ds${datasource_name}</literal> is the identifier of the entity currently set in the  <literal>datasource_name</literal> data source. In this case, it is the identifier of the edited customer. </para>
        <para>Add the following to the <sgmltag>layout</sgmltag> element between <sgmltag>fieldGroup</sgmltag> and <sgmltag>iframe</sgmltag>: <programlisting language="xml">&lt;label value=&quot;msg://orders&quot;/&gt;
&lt;table id=&quot;ordersTable&quot; width=&quot;100%&quot;&gt;
    &lt;columns&gt;
        &lt;column id=&quot;date&quot;/&gt;
        &lt;column id=&quot;amount&quot;/&gt;
    &lt;/columns&gt;
    &lt;rows datasource=&quot;ordersDs&quot;/&gt;
&lt;/table&gt;</programlisting></para>
        <para>Here, <sgmltag>label</sgmltag> is the UI label containing a message pack key, while <sgmltag>table</sgmltag> is the table connected to the  <literal>ordersDs</literal> data source.</para>
        <para>In order for the table to take all the available space on the screen,  specify its identifier in the <sgmltag>expand</sgmltag>attribute of the <sgmltag>layout</sgmltag> element.</para>
        <para>Add the localized label to the <filename>messages.properties</filename> and <filename>messages_ru.properties</filename> files of the <code>com.sample.sales.gui.customer</code> package: </para>
        <para><filename>messages.properties</filename> <programlisting>orders=Orders</programlisting></para>
        <para><filename>messages_ru.properties</filename> <programlisting>orders=Заказы</programlisting></para>
        <para>Rebuild the project </para>
        <para><prompt>gradle restart</prompt></para>
        <para>Log in to the system, select and open a customer with associated orders for editing.</para>
        <figure id="figure_customerEdit">
          <title>Customer editor with a list of orders</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_customer_edit_2.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>
  </section>
</chapter>

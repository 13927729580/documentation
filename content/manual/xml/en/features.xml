<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="features">
  <title>Platform Features</title>
  <para>This section provides overview on various optional features provided by the platform.</para>
  <section id="scheduled_tasks">
    <title>Scheduled Tasks Execution</title>
    <para>The platform offers two ways to run scheduled tasks:<itemizedlist>
        <listitem>
          <para>By using the standard  <code>TaskScheduler</code> mechanism of the  <application>Spring</application> framework.</para>
        </listitem>
        <listitem>
          <para>By using platform&apos;s own mechanism of scheduled tasks execution.</para>
        </listitem>
      </itemizedlist></para>
    <section id="scheduled_tasks_spring">
      <title>Spring TaskScheduler</title>
      <para>This mechanism is described in details in the  <application>Task Execution and Scheduling</application> section of the  <application>Spring Framework</application> manual. </para>
      <para><code>TaskScheduler</code> can be used to run methods of arbitrary Spring beans in any application  <link linkend="app_tiers">block</link> both at the middleware and client tiers.</para>
      <para>Example of configuration in  <link linkend="spring.xml">spring.xml</link>:<programlisting language="xml">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
     xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
     xmlns:task=&quot;http://www.springframework.org/schema/task&quot;
     xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
      http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd&quot;&gt;

  ...

  &lt;task:scheduled-tasks scheduler=&quot;scheduler&quot;&gt;
      &lt;task:scheduled ref=&quot;sales_Processor&quot; method=&quot;someMethod&quot; fixed-rate=&quot;60000&quot;/&gt;
      &lt;task:scheduled ref=&quot;sales_Processor&quot; method=&quot;someOtherMethod&quot; cron=&quot;0 0 1 * * MON-FRI&quot;/&gt;
  &lt;/task:scheduled-tasks&gt;
&lt;/beans&gt;</programlisting></para>
      <para>In the example above, two tasks are declared, which invoke  <code>someMethod()</code> and  <code> someOtherMethod()</code> of  <code>sales_Processor</code> bean. <code>someMethod()</code> will be invoked at fixed time intervals (60 seconds) from the moment of application startup.   <code>someOtherMethod()</code> is invoked according to the schedule specified by Cron expression (for the description of the format of such expressions, see <ulink url="http://quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger">http://quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger</ulink>).</para>
      <para>The actual launch of tasks is performed by  <code>TaskScheduler</code> type bean, which is specified in the <sgmltag>scheduler</sgmltag> attribute of the  <sgmltag>scheduled-tasks</sgmltag> element. In this example, <code>CubaThreadPoolTaskScheduler</code> bean with the  <code>scheduler</code> name is used. It is configured in the  <structname>core</structname> and <structname>web</structname> modules of the  <structname>cuba</structname> base project (see  <filename>cuba-spring.xml</filename>, <filename>cuba-web-spring.xml</filename>). This class contains specific implementation, which performs   <link linkend="securityContext">SecurityContext</link> cleanup in the threads, which are being launched for execution.</para>
    </section>
    <section id="scheduled_tasks_cuba">
      <title>CUBA Scheduled Tasks</title>
      <para><application>CUBA</application> scheduled tasks mechanism is intended to perform scheduled execution of arbitrary Spring beans methods in the  Middleware block. The purposes of this mechanism and its distinction from the above mentioned standard <application>Spring Framework </application>mechanism are:<itemizedlist>
          <listitem>
            <para>The ability to configure tasks while running an application without restarting the server.</para>
          </listitem>
          <listitem>
            <para>The coordination of singleton tasks in the Middleware cluster, including: <itemizedlist>
                <listitem>
                  <para>Reliable protection from simultaneous execution.</para>
                </listitem>
                <listitem>
                  <para>Binding tasks to servers by priorities.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist></para>
      <para>A  <firstterm>singleton</firstterm> task is a task which must be performed only on one server at a certain moment of time. For example, reading from a queue and sending emails.</para>
      <section>
        <title>Task Registration</title>
        <para>Tasks are registered in the  <code>SYS_SCHEDULED_TASK</code> database table, which corresponds to the <code>ScheduledTask</code> entity. There are browser and editor screens for working with tasks, which are available through the <guimenu>Administration</guimenu> -&gt; <guimenu>Scheduled Tasks</guimenu> menu. </para>
        <para>Task attributes are described below:<itemizedlist>
            <listitem>
              <para><guilabel>Defined by</guilabel> – describes which software object implements the task. Possible values are:<itemizedlist>
                  <listitem>
                    <para><guilabel>Bean</guilabel> – the task is implemented by a method of a Spring bean. Additional attributes:<itemizedlist>
                        <listitem>
                          <para><guilabel>Bean name</guilabel> – the name of the bean. The bean is listed and available for selection only if it has an interface, which contains methods appropriate for invocation from the task. Beans without an interface are not supported.</para>
                        </listitem>
                        <listitem>
                          <para><guilabel>Method name</guilabel> – the bean interface method that is  executed. The method must either have no parameters, or all parameters must be of  <code>String</code> type.</para>
                        </listitem>
                        <listitem>
                          <para><guilabel>Method parameters</guilabel> – the parameters of the chosen method. Only <code>String</code> type parameters are supported.</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>
                  <listitem>
                    <para><guilabel>Class</guilabel> – the task is a class that implements the <code>java.util.concurrent.Callable</code> interface. The class must have a public constructor without parameters. Additional attributes:<itemizedlist>
                        <listitem>
                          <para><guilabel>Class name</guilabel> – the name of the class.</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>
                  <listitem>
                    <para><guilabel>Script</guilabel> – the task is a Groovy script. The script is executed by <link linkend="scripting.runGroovyScript">Scripting.runGroovyScript()</link>. Additional attributes:<itemizedlist>
                        <listitem>
                          <para><guilabel>Script name</guilabel> – the name of the script.</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para><guilabel>User name</guilabel> – the name of a user on whose behalf the task will be executed. If not specified, the task will be executed on behalf of the user specified in the   <link linkend="cuba.jmxUserLogin">cuba.jmxUserLogin</link> application property.</para>
            </listitem>
            <listitem>
              <para><guilabel>Singleton</guilabel> – indicates that the task is a singleton, i.e. should be run only on one application server.</para>
            </listitem>
            <listitem>
              <para><guilabel>Scheduling type</guilabel> – the means of task scheduling:<itemizedlist>
                  <listitem>
                    <para><guilabel>Cron</guilabel> – Cron expression is a sequence of six fields, separated by spaces: second, minute, hour, day, month, day of a week. The month and the day of a week can be represented by the first three letters of their English names. Examples:<itemizedlist>
                        <listitem>
                          <para>0 0 * * * * –  the beginning of every hour of every day</para>
                        </listitem>
                        <listitem>
                          <para>*/10 * * * * * – every 10 seconds</para>
                        </listitem>
                        <listitem>
                          <para>0 0 8-10 * * * – every day at 8, 9 and 10 o&apos;clock</para>
                        </listitem>
                        <listitem>
                          <para>0 0/30 8-10 * * * – every day at 8:00, 8:30, 9:00, 9:30 and 10 o&apos;clock</para>
                        </listitem>
                        <listitem>
                          <para>0 0 9-17 * * MON-FRI – every hour from 9 to 17 on working days</para>
                        </listitem>
                        <listitem>
                          <para>0 0 0 25 DEC ? – every Christmas at midnight.</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>
                  <listitem>
                    <para><guilabel>Period</guilabel> – task execution interval in seconds.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para><guilabel>Period</guilabel> – task execution interval in seconds for <code>Scheduling type = Period</code>. </para>
            </listitem>
            <listitem>
              <para><guilabel>Timeout</guilabel> – time in seconds, upon the expiration of which it is considered that the execution of the task is completed, regardless of whether there is information about task completion or not. If the  timeout is not set explicitly, it is assumed to be 3 hours. </para>
            </listitem>
            <listitem>
              <para><guilabel>Start date</guilabel> – the date/time of the first launch. If not specified, the task is launched immediately on server startup. If specified, the task is launched at   <code>startDate + period * N</code>, where N is an integer.</para>
              <para>It is reasonable to specify <code>Start date</code> only for &quot;infrequent&quot; tasks, i.e. running once an hour, once a day, etc.</para>
            </listitem>
            <listitem>
              <para><guilabel>Time frame</guilabel> – if <code>Start date</code> is specified, <code>Time frame</code> defines the time window in seconds, during which the task will be launched after   <code>startDate + period * N</code> time expires. If <code>Time frame</code> is not specified explicitly, it is equal to  <code>period / 2</code>. </para>
              <para>If <code>Start date</code> is not specified, <code>Time frame</code> is ignored, i.e. the task will be launched at any time after <code>Period</code>  since the previous execution of the task expires. </para>
            </listitem>
            <listitem>
              <para><guilabel>Permitted servers</guilabel> – the list of comma-separated  <link linkend="serverId">identifiers of servers</link> that have the permission to run this task. If the list is not specified, the task may be executed on any server.</para>
              <para>For singleton tasks, the order of the servers in the list defines the execution priority: the first server has a  higher priority than the last. The server with a higher priority will intercept the execution of the singleton as follows: if the server with a higher priority detects that the task has been previously executed by a server with lower priority, it launches the task regardless of whether the <code>Period</code> has elapsed or not. <warning>
                  <para>Server priority works only if the <code>Start date</code> attribute is not specified. If Start date is specified, the start occurs at the same time and the interception is impossible.</para>
                </warning></para>
            </listitem>
            <listitem>
              <para><guilabel>Log start</guilabel> – flags if the task launch should be registered in the <code>SYS_SCHEDULED_EXECUTION</code> table, which corresponds to the <code>ScheduledExecution</code> entity. </para>
              <para>In the current implementation, if the task is a singleton, the launch is registered regardless of this flag.  </para>
            </listitem>
            <listitem>
              <para><guilabel>Log finish</guilabel> – flags if the task completion should be registered in the <code>SYS_SCHEDULED_EXECUTION</code> table, which corresponds to the  <code>ScheduledExecution</code> entity. </para>
              <para>In the current implementation, if the task is a singleton, completion is registered regardless of this flag.  </para>
            </listitem>
            <listitem>
              <para><guilabel>Description</guilabel> – an arbitrary text description of the task.</para>
            </listitem>
          </itemizedlist></para>
        <para>The task also has activity flag, which can be set in the tasks list screen. Inactive tasks are ignored.</para>
      </section>
      <section>
        <title>Tasks Handling Control</title>
        <itemizedlist>
          <listitem>
            <para> <link linkend="cuba.schedulingActive">cuba.schedulingActive</link> application property should be set to  <code>true</code> prior to server startup to enable tasks processing.</para>
          </listitem>
          <listitem>
            <para>For the ad hoc tasks processing management,  <code>app-core.cuba:type=Scheduling</code> JMX bean can be used. Its  <code>Active</code> attribute enables tasks processing for the current session of the server. After restarting the server, the processing will be started only if the <property>cuba.schedulingActive</property> application property is set to  <code>true</code>.</para>
          </listitem>
          <listitem>
            <para>All changes to tasks made via system screens take effect immediately for all servers in the cluster.</para>
          </listitem>
        </itemizedlist>
        <para>The  <code>removeExecutionHistory()</code> method of the  <code>app-core.cuba:type=Scheduling </code>JMX bean can be used to remove old execution history. The method has two parameters:<itemizedlist>
            <listitem>
              <para><code>age</code> – the time (in hours) elapsed after the task execution.</para>
            </listitem>
            <listitem>
              <para><code>maxPeriod</code> – the maximum <code>Period</code> (in hours) for tasks that should have their execution history removed. This allows removing the history for frequently run tasks only, while keeping the history for tasks executed once a day. </para>
            </listitem>
          </itemizedlist></para>
        <para>The method can be invoked automatically. Create a new task with the following parameters:<itemizedlist>
            <listitem>
              <para><guilabel>Bean name</guilabel> – <code>cuba_SchedulingMBean</code></para>
            </listitem>
            <listitem>
              <para><guilabel>Method name</guilabel> – <code>removeExecutionHistory(String age, String maxPeriod)</code> </para>
            </listitem>
            <listitem>
              <para><guilabel>Method parameters</guilabel> – for example, <code>age = 72</code>, <code>maxPeriod = 12</code>.</para>
            </listitem>
          </itemizedlist></para>
      </section>
      <section>
        <title>Implementation Specifics</title>
        <itemizedlist>
          <listitem>
            <para>Tasks processing invocation (the  <code>SchedulingAPI.processScheduledTasks()</code> method) interval is specified in <filename>cuba-spring.xml</filename> and is equal to 1 second by default. It sets the minimal interval between task launches, which should be twice higher, i.e. 2 seconds. Reducing these values is not recommended.</para>
          </listitem>
          <listitem>
            <para>The current implementation of the scheduler is based on the synchronization using row locks in the database table. This means that under significant load the database may not respond to the scheduler in time and it might be necessary to increase the launch interval (&gt;1 second), thus the minimum period of launching tasks will be increased accordingly.</para>
          </listitem>
          <listitem>
            <para>If the <code>Permitted servers</code> attribute is not specified, singleton tasks are performed only on the master node of the cluster (in case other conditions are met). It should be kept in mind that a standalone server outside the cluster is also considered a master.</para>
          </listitem>
          <listitem>
            <para>The task will not be launched if its previous execution has not yet finished and the specified <code>Timeout</code> has not expired. For singleton tasks in the current implementation, this is achieved using the information in the database; for non-singletons, the execution status table is maintained in the server memory.</para>
          </listitem>
          <listitem>
            <para>The execution mechanism creates and caches  <link linkend="userSession">user sessions</link> in accordance with the user name specified for tasks or the  <link linkend="cuba.jmxUserLogin">cuba.jmxUserLogin</link> application property. The session is available in the execution thread of a launched task using the standard  <link linkend="userSessionSource">UserSessionSource</link> interface.</para>
          </listitem>
        </itemizedlist>
        <warning>
          <para>Precise time synchronization of Middleware servers is required for correct execution of singleton tasks!</para>
        </warning>
      </section>
    </section>
  </section>
  <section id="email_sending">
    <title>Email Sending</title>
    <para>The platform provides email sending facilities with the following features:<itemizedlist>
        <listitem>
          <para>Synchronous or asynchronous sending. In case of synchronous sending, the calling code waits till the message is sent to the SMTP server. In case of asynchronous sending, the message is persisted to the database and the control is returned immediately to the calling code. The actual sending is done later by a  <link linkend="scheduled_tasks">scheduled task</link>.  </para>
        </listitem>
        <listitem>
          <para>Reliable tracking of message sending timestamp or errors in the database for both synchronous and asynchronous modes.</para>
        </listitem>
        <listitem>
          <para>User interface to search and view information about sent messages, including all message attributes and content, sending status and the number of attempts.</para>
        </listitem>
      </itemizedlist></para>
    <section>
      <title>Sending Methods</title>
      <para>To send an email, the    <code>EmailerAPI</code> bean should be used at the Middleware, and the <code>EmailService</code> service – at the client tier.</para>
      <para>The basic methods of these components are described below:<itemizedlist>
          <listitem>
            <para><code>sendEmail()</code> – synchronous message sending. The calling code is blocked while sending the message to the SMTP server.</para>
            <para>The message can be transmitted in the form of a set of parameters (the comma-separated list of recipients, subject, content, array of attachments), and in the form of a special  <code>EmailInfo</code> object, which encapsulates all this information and allows to explicitly set the sender’s address and to form the message body using a  <application>FreeMarker</application> template.</para>
            <para><code>EmailException</code> may be thrown during synchronous sending, containing the information on the recipient addresses, where delivery has failed, and the corresponding error messages.</para>
            <para>During the execution of the   <code>SendingMessage</code> method, an entity instance is created in the database for each recipient with the initial  <code>SendingStatus.SENDING</code> status, and <code>SendingStatus.SENT</code> after successful sending. In case of a message sending error, the message status changes to  <code>SendingStatus.NOTSENT</code>.</para>
          </listitem>
          <listitem>
            <para><code>sendEmailAsync()</code> – asynchronous message sending. This method returns the list (by number of recipients) of  <code>SendingMessage</code> instances in  <code>SendingStatus.QUEUE</code> status, which were created in the database. The actual sending is performed with the subsequent call of the <code>EmailManagerAPI.queueEmailsToSend()</code> method, which should be invoked from a <link linkend="scheduled_tasks">scheduled task</link> with desired frequency.</para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section>
      <title>Email Attachments</title>
      <para>The  <code>EmailAttachment</code> object is a wrapper that holds the attachment as a byte array (the <code>data</code> field), the file name (the  <code>name</code> field), and, if necessary, the attachment identifier which is unique for this message (the optional but useful <code>contentId</code> field).</para>
      <para>The attachment identifier may be used to insert images in the message body. For this, a unique <code>contentId</code> (for example, <code>myPic</code>) is specified when creating     <code>EmailAttachment</code>. Expression like <code>cid:myPic</code> can be used as a path to insert the attachment in the message body. So, to insert an image you can specify the following HTML element:<programlisting language="xml">&lt;img src=&quot;cid:myPic&quot;/&gt;</programlisting></para>
    </section>
    <section id="email_sending_properties">
      <title>Configuring Email Sending Parameters</title>
      <para>Email sending parameters can be configured using the <link linkend="app_properties">application properties</link> listed below. All of them are runtime parameters and are stored in the database, but can be overridden for a specific  <structname>Middleware</structname> block in its  <filename>app.properties</filename> file.</para>
      <para>All email sending parameters are available via the <code>EmailerConfig</code> configuration interface.</para>
      <itemizedlist>
        <listitem>
          <para><property>cuba.email.fromAddress</property> – the default sender’s address. It is used if the <code>EmailInfo.from</code> attribute is not specified.</para>
          <para>Default value:  <literal>DoNotReply@localhost</literal></para>
        </listitem>
        <listitem>
          <para><property>cuba.email.smtpHost</property> – the address of the SMTP server.</para>
          <para>Default value:  <literal>test.host</literal></para>
        </listitem>
        <listitem>
          <para><property>cuba.email.smtpPort</property> – the port of the SMTP server.</para>
          <para>Default value:  <literal>25</literal></para>
        </listitem>
        <listitem>
          <para><property>cuba.email.smtpAuthRequired</property> flags whether the SMTP server requires authentication. It corresponds to the   <literal>mail.smtp.auth</literal> parameter, which is passed at the creation of the  <code>javax.mail.Session</code> object.</para>
          <para>Default value:  <literal>false</literal></para>
        </listitem>
        <listitem>
          <para><property>cuba.email.smtpStarttlsEnable</property> – flags the use of the  <literal>STARTTLS</literal> command when authenticating on the SMTP server. It corresponds to the  <literal>mail.smtp.starttls.enable</literal> parameter, which is passed at the creation of the  <code>javax.mail.Session</code> object.</para>
          <para>Default value: <literal>false</literal></para>
        </listitem>
        <listitem>
          <para><property>cuba.email.smtpUser</property> – the user name for SMTP server authentication.</para>
        </listitem>
        <listitem>
          <para><property>cuba.email.smtpPassword</property> – the user password for SMTP server authentication.</para>
        </listitem>
        <listitem>
          <para><property>cuba.email.delayCallCount</property> – is used in asynchronous sending of emails to skip first few calls of  <code>EmailManager.queueEmailsToSend()</code> after server startup to reduce the load during application initialization. Email sending will start with the next call.</para>
          <para>Default value:  <literal>2</literal></para>
        </listitem>
        <listitem>
          <para><property>cuba.email.messageQueueCapacity</property> – for asynchronous sending, the maximum number of messages read from the queue and sent in one call of <code>EmailManager.queueEmailsToSend()</code>.</para>
          <para>Default value:  <literal>100</literal></para>
        </listitem>
        <listitem>
          <para><property>cuba.email.defaultSendingAttemptsCount</property> for asynchronous sending, the default number of attempts to send an email. It is used if the <code>attemptsCount</code> parameter is not specified when calling <code>Emailer.sendEmailAsync()</code>. </para>
          <para>Default value: <literal>10</literal></para>
        </listitem>
        <listitem>
          <para><code>cuba.email.maxSendingTimeSec</code> – the maximum expected time in seconds, which is required to send an email to the SMTP server. It is used for asynchronous sending to optimize the selection of  <code>SendingMessage</code> objects from the DB queue.</para>
          <para>Default value:  120</para>
        </listitem>
        <listitem>
          <para><property>cuba.email.sendAllToAdmin</property> – indicates that all messages should be sent to the cuba.email.adminAddress address, regardless of the specified recipient’s address. It is recommended to use this parameter during system development and debugging.</para>
          <para>Default value:  <literal>false</literal></para>
        </listitem>
        <listitem>
          <para><property>cuba.email.adminAddress</property> – the address, to which all messages are sent if the  <property>cuba.email.sendAllToAdmin</property> property is switched on.</para>
          <para>Default value:  <literal>admin@localhost</literal></para>
        </listitem>
        <listitem>
          <para><property>cuba.emailerUserLogin</property> – the login of system user, used by asynchronous email sending code to be able to persist the information to the database. It is recommended to create a separate user (for example, <literal>emailer</literal>) without a password, so that it will be impossible to log in under his name via user interface. This is also convenient to search for messages related to email sending in the server log.</para>
          <para>Default value:  <literal>admin</literal></para>
        </listitem>
      </itemizedlist>
      <para>You can view the current parameter values  and send a test message using the  <code>app-core.cuba:type=Emailer</code> JMX bean.</para>
    </section>
  </section>
  <section id="runtime_properties"><title>Dynamic Attributes</title><para>Dynamic attributes are used to define new attributes of entities at the stage of system operation or configuration. Multiple sets of dynamic attributes can be used for one entity type.</para><figure>
      <title>Classes Diagram of the Dynamic Attributes Facility</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="img/RuntimeProperties.png"/>
        </imageobject>
      </mediaobject>
    </figure>Let us have a look at classes shown in the diagram.<itemizedlist>
      <listitem>
        <para><code>CategorizedEntity</code> – the base class of entities, which may have dynamic attributes. It contains a reference to the  <code>Category</code> object, i.e. each instance of the  <code>SomeEntity</code> can be assigned to one of the predefined categories.</para>
      </listitem>
      <listitem>
        <para><code>Category</code> – defines a category of objects and the corresponding set of dynamic attributes. The category must be assigned to some entity type.</para>
        <para>For example, there is an entity of the  <userinput>Vehicle</userinput> type. We can define two categories for it:  <userinput>Freight</userinput> and <userinput>Passenger</userinput>. The  <userinput>Freight</userinput> category will contain  <userinput>Load Capacity</userinput> and <userinput>Body type</userinput> attributes, and the <userinput>Passenger</userinput> category –  <userinput>Number of seats</userinput> and <userinput>Availability of a Child Seat</userinput>.</para>
        <para><code>isDefault</code> attribute indicates that the category is automatically selected when a new entity instance is created.</para>
        <para><code>special</code> attribute indicates that the category is processed in the application &quot;under the hood&quot; and should not be displayed in the generic UI of the categories editor .</para>
      </listitem>
      <listitem>
        <para><code>CategoryAttribute</code> – defines a dynamic attribute related to some category. It contains the default value for different data types. The values of enumerations are specified as a comma-separated list of strings.</para>
      </listitem>
      <listitem>
        <para><code>CategoryAttributeValue</code> – dynamic attribute value for a particular entity instance.</para>
      </listitem>
    </itemizedlist><para>Managing attributes categories and descriptions is done via special screens available in <guimenu>Administration</guimenu> -&gt; <guimenuitem>Categories</guimenuitem> menu.</para><section>
      <title>Using Dynamic Attributes</title>
      <para>The entity class must be inherited from <code>CategorizedEntity</code> and the  <database>CATEGORY_ID</database> field of the  <code>UUID</code> type must be present in the corresponding table to enable using dynamic attributes for this entity.</para>
      <para>The following should be performed to include dynamic attributes in the entity edit screen:<itemizedlist>
          <listitem>
            <para>Two <link linkend="datasources">datasources</link> should be declared in the  <sgmltag>dsContext</sgmltag> section:<itemizedlist>
                <listitem>
                  <para><sgmltag>runtimePropsDatasource</sgmltag> – a  specific datasource to load the  <code>CategoryAttributeValue</code> instances. The  <sgmltag>mainDs</sgmltag> attribute must refer to the main datasource, which contains the edited entity.</para>
                </listitem>
                <listitem>
                  <para>A regular  <sgmltag>collectionDatasource</sgmltag> to load the list of categories of this entity type.</para>
                </listitem>
              </itemizedlist></para>
            <para>Example:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;carDs&quot;
              class=&quot;com.sample.app.entity.Car&quot;
              view=&quot;carEdit&quot;/&gt;

  &lt;runtimePropsDatasource id=&quot;runtimePropsDs&quot;
                          mainDs=&quot;carDs&quot;/&gt;

  &lt;collectionDatasource id=&quot;categories&quot;
                        class=&quot;com.haulmont.cuba.core.entity.Category&quot;
                        view=&quot;_local&quot;&gt;
      &lt;query&gt;
          select c from sys$Category c where c.entityType=&apos;app$Car&apos;
      &lt;/query&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;</programlisting></para>
          </listitem>
          <listitem>
            <para>The <sgmltag>runtimePropertiesFrame</sgmltag> visual component that is used to display the list of categories and dynamic attributes: <programlisting language="xml">&lt;runtimeProperties id=&quot;runtimePropsFrame&quot;
                 runtimeDs=&quot;runtimePropsDs&quot;
                 categoriesDs=&quot;categories&quot;
                 width=&quot;100%&quot;/&gt;</programlisting></para>
          </listitem>
        </itemizedlist></para>
    </section></section>
  <section id="pessimistic_locking">
    <title>Pessimistic Locking</title>
    <para>This section describes the use of pessimistic locking in CUBA applications.</para>
    <section>
      <title>Entity Editing Locks</title>
      <para>Pessimistic locking should be used when there is a high probability of simultaneous editing of a single entity instance. In such cases the standard <link linkend="optimistic_locking">optimistic locking</link>, based on entity versioning, usually creates too many collisions.</para>
      <para>Pessimistic locking explicitly locks an entity instance when it is  opened in the  <link linkend="screen_edit">editor</link>. As a result, only one user can edit this  particular entity instance  in a given moment of time.</para>
      <para>Pessimistic locking mode can be enabled for any entity class on application development or production stage using <guimenu>Administration &gt; Locks &gt; Setup</guimenu> screen, or manually:<itemizedlist>
          <listitem>
            <para>Insert a new record with the following field values into the  <database>SYS_LOCK_CONFIG</database> table with the following field values:<itemizedlist>
                <listitem>
                  <para><database>ID</database> – an arbitrary UUID-type identifier.</para>
                </listitem>
                <listitem>
                  <para><database>NAME</database> – the name of the object to be locked. For an entity, it should be the name of its <link linkend="metaClass">meta class</link>. </para>
                </listitem>
                <listitem>
                  <para><database>TIMEOUT_SEC</database> – lock expiration timeout in seconds..</para>
                </listitem>
              </itemizedlist></para>
            <para>Example: <programlisting>insert into sys_lock_config (id, create_ts, name, timeout_sec) values (newid(), current_timestamp, &apos;sales$Order&apos;, 300)</programlisting></para>
          </listitem>
          <listitem>
            <para>Restart the server or call  <code>reloadConfiguration()</code> method of the <code>app-core.cuba:type=LockManager</code> JMX bean.</para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section>
      <title>Locking Arbitrary Processes</title>
      <para>Pessimistic locking mechanism can also be used to manage simultaneous execution of arbitrary processes. The key benefit is that the locks are distributed, since  they are replicated in the Middleware cluster.</para>
      <para>More information is available in JavaDocs for the  <code>LockManagerAPI</code> and  <code>LockService</code> interfaces.</para>
    </section>
    <section>
      <title>Lock Monitoring</title>
      <para>Current lock state can be tracked via the <code>app-core.cuba:type=LockManager </code>JMX bean or through a dedicated screen available at  <guimenu>Administration</guimenu> -&gt; <guimenuitem>Locks</guimenuitem>. This screen also allows forced  unlocking of any object.</para>
    </section>
  </section>
  <section id="entity_statistics">
    <title>Entity Statistics</title>
    <para>The entity statistics mechanism provides the information   on the current number of entity instances in the database. This data  is used to automatically  select the best lookup strategy for linked entities and to limit the size of search results displayed in UI screens.</para>
    <para>Statistics are stored in the  <database>SYS_ENTITY_STATISTICS</database> table, corresponding to the  <code>EntityStatistics</code> entity. Statistics can be updated manually by adding the the necessary records to the table, as well as automatically by using the <code>refreshStatistics()</code> method of the  <link linkend="persistenceManagerMBean">PersistenceManagerMBean</link> JMX bean. When passing the entity name as a parameter, the statistics will be collected only for the corresponding entity; otherwise, the statistics will be collected for all entities. Collecting statistics may take a considerable amount of time and put excessive load on the database. Thus, it is  better to do it manually or by using a  <link linkend="scheduled_tasks_cuba">scheduled task</link> at an appropriate time.</para>
    <para>Programmatic access to  entity statistics is available via  <code>PersistenceManagerAPI</code> interface on the middle tier and  <code>PersistenceManagerService</code> on the the client tier. Statistics get cached into memory, and as a result, any direct changes to statistics in the database will only be applied after  the server restart or after a   calling to the <code>PersistenceManagerMBean.flushStatisticsCache()</code> method.</para>
    <para>The description of the  <code>EntityStatistics</code> attributes and their impact on the system behaviour is provided below: <itemizedlist>
        <listitem>
          <para><code>name</code> (<database>NAME</database> column) – the name of the entity  <link linkend="metaClass">meta-class</link>, for example, <code>sales$Customer</code>.</para>
        </listitem>
        <listitem>
          <para><code>instanceCount</code> (<database>INSTANCE_COUNT</database> column) – the approximate number of entity instances.</para>
        </listitem>
        <listitem>
          <para><code>fetchUI</code> (<database>FETCH_UI</database> column) – the size of the data displayed on a page when extracting entity lists.  </para>
          <para>For example, the  <link linkend="gui_Filter">Filter</link>         component uses this number in the   <guilabel>Show N rows</guilabel> field.</para>
        </listitem>
        <listitem>
          <para><code>maxFetchUI</code> (<database>MAX_FETCH_UI</database> column) – the maximum number of entity instances that can be extracted and passed to the client tier.</para>
          <para>This limit is applied when showing entity lists in such components as <link linkend="gui_LookupField">LookupField</link>  or <link linkend="gui_LookupPickerField">LookupPickerField</link>, as well as tables without a  <link linkend="gui_Filter">filter</link>, when no limitations are applied to the connected  <link linkend="datasources">datasource</link> via   <code>CollectionDatasource.setMaxResults()</code>. In this case the data source itself limits the number of extracted instances to <code>maxFetchUI</code>.</para>
        </listitem>
        <listitem>
          <para><code>lookupScreenThreshold</code> (<database>LOOKUP_SCREEN_THRESHOLD</database> column) – the threshold, measured in number of entities, which determines when <link linkend="screen_lookup">lookup screens</link> should be used instead of dropdowns for entity searches. </para>
          <para>The   <link linkend="gui_Filter">Filter</link> component takes this parameter into account when choosing filter parameters. Until the threshold is reached, the system uses the  <link linkend="gui_LookupField">LookupField</link>  component, and once the threshold is exceeded, the   <link linkend="gui_PickerField">PickerField</link> component is used. Hence, if lookup screens should be used for a specific entity in a filter parameter, it is possible to set the value of  <code>lookupScreenThreshold</code> to a value lower than <code>instanceCount</code>.</para>
        </listitem>
      </itemizedlist></para>
    <para><code>PersistenceManagerMBean</code> JMX bean allows setting default values for all of the parameters mentioned above via  <code>DefaultFetchUI</code>, <code>DefaultMaxFetchUI</code>, <code>DefaultLookupScreenThreshold</code> attributes. The system will use the corresponding default values when an entity has no statistics, which is a common case.</para>
    <para>Besides, <code>PersistenceManagerMBean.enterStatistics()</code> method allows to enter statistics data for an entity. For example, the following parameters should be passed to the method to set a default page size to 1,000 and maximum number of loaded into <link linkend="gui_LookupField">LookupField</link> instances to 30,000:<programlisting>entityName: sales$Customer
fetchUI: 1000
maxFetchUI: 30000</programlisting></para>
  </section>
  <section id="entity_log"><title>Entity Log</title>The logging mechanism is designed to track changes in the attributes of arbitrary entities at runtime. Changed values are saved into a dedicated table within the database.The list of changes for a certain entity instance may be displayed in UI.<para>This mechanism tracks entity persistence at the <link linkend="entity_listeners">entity listeners</link> level, i.e. it is guaranteed to track all changes passing through persistent context of the   <link linkend="entityManager">EntityManager</link>. Direct changes to entities in the database using SQL, including the ones performed using <link linkend="nativeQuery">NativeQuery</link> or <link linkend="queryRunner">QueryRunner</link>, are not tracked. </para><para>Modified entity instances are passed to <code>registerCreate()</code>, <code>registerModify()</code> and <code>registerDelete()</code> methods of the   <code>EntityLogAPI</code> bean before they are saved to the database. Each method has <code>auto</code> parameter, allowing separation of  automatic logs added by entity listeners from manual logs added by calling these methods from the application code. When these methods are called from entity listeners the value of <code>auto</code> parameter is <code>true</code>. </para><para>The logs contain information about the time of  modification, the user who has modified the entity, and the new values of the changed attributes. Log entries are stored in the <database>SEC_ENTITY_LOG</database> table corresponding to the  <code>EntityLogItem</code> entity. Changed attribute values are stored in the <database>CHANGES</database> column and are converted to  instances of <code>EntityLogAttr</code> entity when they are loaded by the Middleware.</para><section>
      <title>Setting Up Entity Log</title>
      <para>The simplest way to set up the entity log is using the <guimenu>Administration &gt; Entity Log &gt; Setup</guimenu> application screen. The process of manual set up is described below.</para>
      <para>Logging is configured using the  <code>LoggedEntity</code> and  <code>LoggedAttribute</code> entities corresponding to  <database>SEC_LOGGED_ENTITY</database> and  <database>SEC_LOGGED_ATTR</database> tables.</para>
      <para><code>LoggedEntity</code> defines the types of entities that should be logged.  <code>LoggedEntity</code> has the following attributes:</para>
      <itemizedlist>
        <listitem>
          <para><code>name</code> (<database>NAME</database> column) – the name of the entity <link linkend="metaClass">meta-class</link>, for example, <code>sales$Customer</code>.</para>
        </listitem>
        <listitem>
          <para><code>auto</code> (<database>AUTO</database> column) – defines if the system should log the changes when EntityLogAPI is called with   <code>auto = true</code> parameter (i.e. called by   <link linkend="entity_listeners">entity listeners</link>).</para>
        </listitem>
        <listitem>
          <para><code>manual</code> (<database>MANUAL</database> column) – defines if the system should log the changes when  <code>EntityLogAPI</code> is called with   <code>auto = false</code> parameter.</para>
        </listitem>
      </itemizedlist>
      <para><code>LoggedAttribute</code> defines the entity attribute to be logged and contains a link to the  <code>LoggedEntity</code> and the attribute name.</para>
      <para>To set up logging for a certain entity, the corresponding entries should be added into the  <database>SEC_LOGGED_ENTITY</database> and <database>SEC_LOGGED_ATTR</database> tables. For example, logging the changes to  <code>name</code> and <code>grade</code> attributes of the  <code>Customer</code> entity can be enabled using:<programlisting>insert into SEC_LOGGED_ENTITY (ID, CREATE_TS, CREATED_BY, NAME, AUTO, MANUAL)
values (&apos;25eeb644-e609-11e1-9ada-3860770d7eaf&apos;, now(), &apos;admin&apos;, &apos;sales$Customer&apos;, true, true);

insert into SEC_LOGGED_ATTR (ID, CREATE_TS, CREATED_BY, ENTITY_ID, NAME)
values (newid(), now(), &apos;admin&apos;, &apos;25eeb644-e609-11e1-9ada-3860770d7eaf&apos;, &apos;name&apos;);

insert into SEC_LOGGED_ATTR (ID, CREATE_TS, CREATED_BY, ENTITY_ID, NAME)
values (newid(), now(), &apos;admin&apos;, &apos;25eeb644-e609-11e1-9ada-3860770d7eaf&apos;, &apos;grade&apos;);</programlisting></para>
      <para>To activate the logging mechanism, the <code>Enabled</code> attribute of the <code>app-core.cuba:type=EntityLog</code> JMX bean should be set to     <code>true</code>. The changes to logging settings  made at runtime are applied after server restart or after calling  <code>invalidateCache()</code> method of the same bean.</para>
    </section><section>
      <title>Viewing the Entity Log</title>
      <para>The entity log content can be viewed on a dedicated screen available at <guimenu>Administration &gt; Entity Log</guimenu>.</para>
      <para>The change log for a certain entity can also be accessed from any application screen by loading a collection of  <code>EntityLogItem</code> and the associated  <code>EntityLogAttr</code> instances into the datasources and creating the visual components connected to these datasources. For example:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;customerDs&quot;
              class=&quot;com.sample.sales.entity.Customer&quot;
              view=&quot;customerEdit&quot;/&gt;

  &lt;collectionDatasource id=&quot;logDs&quot;
                        class=&quot;com.haulmont.cuba.security.entity.EntityLogItem&quot;
                        view=&quot;logView&quot;&gt;
      &lt;query&gt;
          select i from sec$EntityLog i
          where i.entityId = :ds$customerDs order by i.eventTs
      &lt;/query&gt;

      &lt;collectionDatasource id=&quot;logAttrDs&quot;
                            property=&quot;attributes&quot;/&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
...
  &lt;split orientation=&quot;vertical&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;

      &lt;table id=&quot;logTable&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
          &lt;columns&gt;
              &lt;column id=&quot;eventTs&quot;/&gt;
              &lt;column id=&quot;user.login&quot;/&gt;
              &lt;column id=&quot;type&quot;/&gt;
          &lt;/columns&gt;
          &lt;rows datasource=&quot;logDs&quot;/&gt;
      &lt;/table&gt;

      &lt;table id=&quot;logAttrTable&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
          &lt;columns&gt;
              &lt;column id=&quot;name&quot;/&gt;
              &lt;column id=&quot;value&quot;/&gt;
          &lt;/columns&gt;
          &lt;rows datasource=&quot;logAttrDs&quot;/&gt;
      &lt;/table&gt;

  &lt;/split&gt;
...
&lt;/layout&gt;</programlisting></para>
      <para>Logged attributes should contain the  <link linkend="localizedValue_annotation">@LocalizedValue</link>       annotation in order to display localized values. When annotated, the logging mechanism populates the  <code>EntityLogAttr.messagesPack</code> field, and the table in the example above is able  to use <code>locValue</code> column instead of  <code>value</code>:<programlisting language="xml">&lt;table id=&quot;logAttrTable&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
  &lt;columns&gt;
      &lt;column id=&quot;name&quot;/&gt;
      &lt;column id=&quot;locValue&quot;/&gt;
  &lt;/columns&gt;
  &lt;rows datasource=&quot;logAttrDs&quot;/&gt;
&lt;/table&gt;</programlisting></para>
    </section></section>
  <section id="entity_snapshots">
    <title>Entity Snapshots</title>
    <para>The entity saving mechanism, much like the  <link linkend="entity_log">entity log</link>, is intended to track data changes at runtime. It has the following distinct features:<itemizedlist>
        <listitem>
          <para>The whole state (or snapshot) of a graph of entities defined by a specified <link linkend="views">view</link> is saved.</para>
        </listitem>
        <listitem>
          <para>Snapshot saving mechanism is explicitly called from the application code.</para>
        </listitem>
        <listitem>
          <para>The platform allows the snapshots to be viewed and compared.</para>
        </listitem>
      </itemizedlist></para>
    <section>
      <title>Saving Snapshots</title>
      <para>In order to save a snapshot of a given graph of entities, you need to call the <code>EntitySnapshotService.createSnapshot()</code> method passing the entity which is an entry point to the graph and the  <link linkend="views">view</link> describing the graph. The snapshot will be created using the loaded entities without any calls to the database. As a result,  the snapshot will not contain the fields that are not included in the view used to load the entity.</para>
      <para>The graph of Java objects is converted into XML and saved in the  <database>SYS_ENTITY_SNAPSHOT</database> table (corresponding to the  <code>EntitySnapshot</code> enitity) together with the link to the primary entity. </para>
      <para>Usually, snapshots need to be saved after  <link linkend="screen_edit">editor screen</link> commit. This may be achieved by overriding the  <code>postCommit()</code> method of the screen controller, for example:<programlisting language="java">public class CustomerEditor extends AbstractEditor&lt;Customer&gt; {

  @Inject
  protected Datasource&lt;Customer&gt; customerDs;

  @Inject
  protected EntitySnapshotService entitySnapshotService;

...
  @Override
  protected boolean postCommit(boolean committed, boolean close) {
      if (committed) {
          entitySnapshotService.createSnapshot(customerDs.getItem(), customerDs.getView());
      }
      return super.postCommit(committed, close);
  }
}</programlisting></para>
    </section>
    <section>
      <title>Viewing Snapshots</title>
      <para>Viewing snapshots for arbitrary entities is possible using the  <filename>com/haulmont/cuba/gui/app/core/entitydiff/diff-view.xml</filename> frame. For example:<programlisting language="xml">&lt;iframe id=&quot;diffFrame&quot;
      src=&quot;/com/haulmont/cuba/gui/app/core/entitydiff/diff-view.xml&quot;
      width=&quot;100%&quot;
      height=&quot;100%&quot;/&gt;</programlisting></para>
      <para>The snapshots should be loaded into the frame from the edit screen controller:<programlisting language="java">public class CustomerEditor extends AbstractEditor&lt;Customer&gt; {

  @Inject
  protected EntityDiffViewer diffFrame;

...
  @Override
  protected void postInit() {
      if (!PersistenceHelper.isNew(getItem())) {
          diffFrame.loadVersions(getItem());
      }
  }
}</programlisting></para>
      <para>The  <filename>diff-view.xml</filename> frame shows the list of snapshots  for the given entity, with an ability to compare them. The view for each snapshot includes the user, date and time. When a snapshot is selected from the list,  the changes will be displayed compared to the previous snapshot. All attributes are marked as changed for the first snapshot. Selecting two snapshots shows the results of the comparison in a table.</para>
      <para>The comparison table shows attribute names and their new values. When a row is selected, the detailed information on attribute changes across two snapshots is shown. Reference fields  are displayed according to their <link linkend="namePattern">instance name</link>. When comparing collections, the new and removed elements are highlighted with green and red color respectively. Collection elements with changed attributes are displayed without highlighting. Changes to element positions are not recorded. </para>
    </section>
  </section>
  <section id="file_storage">
    <title>File Storage</title>
    <para>File storage allows  uploading, storing and downloading arbitrary files associated with the entities. In the standard implementation, the files are stored outside of the main database using a specialized structure within the file system.</para>
    <para>File storage mechanism includes the following parts:<itemizedlist>
        <listitem>
          <para><code>FileDescriptor</code> entity – the descriptor of the uploaded file (not to be confused with <code>java.io.FileDescriptor</code>) allows referencing the file from the data model objects.</para>
        </listitem>
        <listitem>
          <para><code>FileStorageAPI</code> interface – provides access to the file storage at the Middleware <link linkend="app_tiers">tier</link>. Its main methods are:<itemizedlist>
              <listitem>
                <para><code>saveStream()</code> – saves the contents of the file passed as the  <code>InputStream</code> according to the specified <code>FileDescriptor</code>.</para>
              </listitem>
              <listitem>
                <para><code>openStream()</code> – returns the contents of the file defined by the  <code>FileDescriptor</code> in the form of an opened  <code>InputStream</code>.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para><code>FileUploadController</code> class – a Spring MVC controller, which allows sending  files from the Client to the Middleware with HTTP POST requests.</para>
        </listitem>
        <listitem>
          <para><code>FileDownloadController</code> class – Spring MVC controller which allows retrieving files from the Middleware to the Client with HTTP GET requests.</para>
        </listitem>
        <listitem>
          <para> <link linkend="gui_FileUploadField">FileUpload</link> and  <link linkend="gui_FileMultiUploadField">FileMultiUpload</link> visual components – enable uploading files  from the user’s computer to the client tier of the application and then transferring them to the Middleware.</para>
        </listitem>
        <listitem>
          <para><code>FileUploadingAPI</code> interface – temporary storage for  files uploaded to  the client tier. It is used for uploading the files to the client tier by the visual components mentioned above. The application code can use  <code>putFileIntoStorage()</code> method for moving a file into the persistent storage of the Middleware.</para>
        </listitem>
        <listitem>
          <para><code>ExportDisplay</code> – client tier interface allowing downloading various application resources to the user’s computer. Files can be retrieved from persistent storage using the  <code>show()</code> method, which requires a <code>FileDescriptor</code>. An instance of  <code>ExportDisplay</code> may be obtained either by calling the <code>AppConfig.createExportDisplay()</code> static method, or through  <link linkend="screen_controller_injection">injection</link> into the controller class.</para>
        </listitem>
      </itemizedlist></para>
    <tip>
      <para>File transfer between the user’s computer and the storage in both directions is always performed by copying data between the input and output streams. Files are never fully loaded into memory at any application level, which allows transferring files of almost any size.</para>
    </tip>
    <section id="file_upload">
      <title>Uploading Files</title>
      <para>Files from the user&apos;s computer can be uploaded into the storage  using the   <link linkend="gui_FileUploadField">FileUpload</link> and <link linkend="gui_FileMultiUploadField">FileMultiUpload</link> components. Usage examples are provided in this manual in the appropriate component descriptions, as well as in <xref linkend="images_recipe"/>.</para>
      <para>The temporary client-level storage <code>(FileUploadingAPI</code>) stores temporary files in the folder defined by <link linkend="cuba.tempDir">cuba.tempDir</link> application property. Temporary files can remain in the folder in case of any failures. Periodical call of the <code>clearTempDirectory()</code> method of the <code>cuba_FileUploading</code> bean is recommended to remove such temporary files. This can be achieved with a  scheduled task defined in the   <link linkend="spring.xml">spring.xml</link> file in the  <structname>web</structname> (and/or  <structname>desktop</structname>) module of the application. For  example:<programlisting language="xml">&lt;task:scheduled-tasks scheduler=&quot;scheduler&quot;&gt;
  &lt;task:scheduled ref=&quot;cuba_FileUploading&quot; method=&quot;clearTempDirectory&quot; cron=&quot;0 0 0 * * 2,4,6&quot;/&gt;
&lt;/task:scheduled-tasks&gt;</programlisting></para>
      <para>In the example above,  the cleanup will be performed at 00:00:00 every Tuesday, Thursday and Saturday.</para>
    </section>
    <section id="file_download">
      <title>Downloading Files</title>
      <para>File download at the client tier can be performed via the <code>ExportDisplay</code> interface obtained by calling the <code>AppConfig.createExportDisplay()</code> static method or via  <link linkend="screen_controller_injection">injection</link> in the controller class. For example:<programlisting language="java">AppConfig.createExportDisplay(this).show(fileDescriptor);</programlisting></para>
      <para>The <code>show()</code> method accepts an optional  <code>ExportFormat</code> type parameter, which defines the type of the content and the file extension. If the format has not been provided, the extension is retrieved from the <code>FileDescriptor</code>, and the content type is set to <code>application/octet-stream</code>. </para>
      <para>When the user is working through the web interface, the file extension defines whether the file is downloaded via the browser’s standard open/save dialog (<code>Content-Disposition = attachment</code>), or if the browser will attempt to show the file in the browser window (<code>Content-Disposition = inline</code>). The list of extensions for files that should be shown in the browser window is defined by the  <link linkend="cuba.web.viewFileExtensions">cuba.web.viewFileExtensions</link> application property.</para>
    </section>
    <section id="file_storage_impl">
      <title>Standard File Storage Implementation</title>
      <para>The standard implementation stores files in a dedicated folder structure within one or several file locations.</para>
      <para>The roots of the structure can be defined in the   <link linkend="cuba.fileStorageDir">cuba.fileStorageDir</link> application property in the format of comma-separated  paths list. For example:<programlisting>cuba.fileStorageDir=/work/sales/filestorage,/mnt/backup/filestorage</programlisting></para>
      <para>If the property is not defined, the storage will be located in the  <filename>filestorage</filename> sub-folder of the Middleware’s  <link linkend="work_dir">work directory</link>. This folder is <filename>tomcat/work/app-core/filestorage</filename> in standard Tomcat deployment. </para>
      <para>With several locations defined, the storage behaves as follows: <itemizedlist>
          <listitem>
            <para>First folder in the list is considered as  <firstterm>primary</firstterm>,  others – as  <firstterm>backup</firstterm>. </para>
          </listitem>
          <listitem>
            <para>Stored files are first placed in the primary folder, and then copied to all of the backup directories.</para>
            <para>The system checks that each folder is accessible before storing a file. If the primary directory is not accessible, the system throws an exception without storing the file. If any of the backup directories are not accessible, the file gets stored in available ones and the corresponding error is logged. </para>
          </listitem>
          <listitem>
            <para>The files are read from the primary directory.</para>
            <para>If the primary directory is not accessible, the system reads files from the first available backup directory containing the required files. A corresponding error is logged.</para>
          </listitem>
        </itemizedlist></para>
      <para>The storage folder structure is organized in the following way:<itemizedlist>
          <listitem>
            <para>There are three levels of subdirectories representing the files upload date – year, month, and day.</para>
          </listitem>
          <listitem>
            <para>The actual files are saved in the <code>day</code> directory. The file names match the identifiers of the corresponding  <code>FileDescriptor</code> objects. The file extension  matches that of the source file.</para>
          </listitem>
          <listitem>
            <para>The root folder of the structure contains a  <filename>storage.log</filename> file with the information on each stored file, including the user and upload time. This log is not required for operation of the storage mechanism, but it could be useful for troubleshooting.</para>
          </listitem>
        </itemizedlist></para>
      <para>The  <code>app-core.cuba:type=FileStorage</code> JMX bean displays the current set of storage roots and offers the following methods for troubleshooting:<itemizedlist>
          <listitem>
            <para><code>findOrphanDescriptors()</code> – finds all instances of  <code>FileDescriptor</code> in the database that do not have a matching file in the storage.</para>
          </listitem>
          <listitem>
            <para><code>findOrphanFiles()</code> – finds all files in the storage that do not have a corresponding <code>FileDescriptor</code> instance in the database.</para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>
  <section id="uniqueNumbers">
    <title>Sequence Generation </title>
    <para>This mechanism allows generating unique numerical sequences via a single API, independent of the DBMS type. </para>
    <para>The main part of this mechanism is the <code>UniqueNumbers</code>  <link linkend="managed_beans">bean</link> with the  <code>UniqueNumbersAPI</code> interface. The bean is available in the  Middleware <link linkend="app_tiers">block</link>. The interface methods are as follows:<itemizedlist>
        <listitem>
          <para><code>getNextNumber()</code> – get the next value in a sequence. The mechanism allows simultaneous management of several sequences, identified by arbitrary strings. The name of the sequence from which you want to retrieve the value is passed in the  <code>domain</code> parameter.</para>
          <para>Sequences do not require initialization. When <code>getNextNumber()</code> is called for the first time, the corresponding sequence will be created and a value of 1 will be returned. </para>
        </listitem>
        <listitem>
          <para><code>getCurrentNumber()</code> – obtain the current, i.e. the last generated value of the sequence. The  <code>domain</code> parameter sets the sequence name.</para>
        </listitem>
        <listitem>
          <para><code>setCurrentNumber()</code> – set the current value of the sequence. This value incremented by 1 will be returned by the next call to  <code>getNextNumber()</code>.</para>
        </listitem>
      </itemizedlist></para>
    <para>Below is an example of getting the next value in a sequence in a Middleware bean:<programlisting language="java">@Inject
private UniqueNumbersAPI uniqueNumbers;

private long getNextValue() {
  return uniqueNumbers.getNextNumber(&quot;mySequence&quot;);
}</programlisting></para>
    <para>The <code>getNextNumber()</code> method of the  <code>UniqueNumbersService</code> <link linkend="services">service</link> is used to get sequence values in client blocks. </para>
    <para>The  <code>app-core.cuba:type=UniqueNumbers</code> <link linkend="jmx_beans">JMX bean</link> with methods duplicating the methods of the  <code>UniqueNumbersAPI</code> is used for sequence management.</para>
    <para>The sequence generation mechanism depends on the DBMS type.  For  <application>HSQL</application>, <application>Microsoft SQL Server 2012+</application>, <application>PostgreSQL</application> and <application>Oracle</application> each  <code>UniqueNumbersAPI</code> sequence corresponds to <code>sec_un_{domain}</code> table in the database. For <application>Microsoft SQL Server</application> before 2012 each sequence corresponds to  <code>sec_un_{domain}</code> database table with an auto increment field. In this regard, the sequence parameters can also be managed directly in the database.</para>
  </section>
  <section id="queryRunner">
    <title>Running SQL Using QueryRunner</title>
    <para><code>QueryRunner</code> is a class designed to run SQL. It should be used instead of JDBC in all cases where using plain SQL is necessary and working with the <link linkend="nativeQuery">ORM tools</link> of the same purpose is not desired.</para>
    <para>The platform’s QueryRunner is a variant of  <ulink url="http://commons.apache.org/dbutils/apidocs/org/apache/commons/dbutils/QueryRunner.html">Apache DbUtils QueryRunner</ulink> with the added ability to use Java Generics.</para>
    <para>Usage example:<programlisting language="java">

QueryRunner runner = new QueryRunner(persistence.getDataSource());
try {
  Set&lt;String&gt; scripts = runner.query(&quot;select SCRIPT_NAME from SYS_DB_CHANGELOG&quot;,
          new ResultSetHandler&lt;Set&lt;String&gt;&gt;() {
              public Set&lt;String&gt; handle(ResultSet rs) throws SQLException {
                  Set&lt;String&gt; rows = new HashSet&lt;String&gt;();
                  while (rs.next()) {
                      rows.add(rs.getString(1));
                  }
                  return rows;
              }
          });
  return scripts;
} catch (SQLException e) {
  throw new RuntimeException(e);
}</programlisting></para>
    <para>There are two ways of using  <code>QueryRunner</code>: current transaction or separate transaction in autocommit mode.<itemizedlist>
        <listitem>
          <para>To run a query in current transaction <code>QueryRunner</code> must be instantiated using a parameterless constructor. Then,  <code>query()</code> or <code>update()</code> methods should be called with a  <code>Connection</code> parameter retrieved via  <code>EntityManager.getConnection()</code>. There is no need to close the  <code>Connection</code> after the query, as it will be closed when the transaction is committed.</para>
        </listitem>
        <listitem>
          <para>To run a query in a separate transaction,  <code>QueryRunner</code> instance must be created using a constructor with the <code>DataSource</code> parameter retrieved using  <code>Persistence.getDataSource()</code>. Then,  <code>query()</code> or <code>update()</code> methods should be called without the  <code>Connection</code> parameter. Connection will be created from the specified  <code>DataSource</code> and immediately closed afterwards.</para>
        </listitem>
      </itemizedlist> </para>
  </section>
  <section id="myBatis">
    <title>Integration with MyBatis</title>
    <para>The platform includes  <application>MyBatis</application> framework, which offers wider capabilities for running SQL and mapping query results to objects compared to ORM <link linkend="nativeQuery">native query</link> or  <link linkend="queryRunner">QueryRunner</link>.</para>
    <para>The following beans must be added into  <link linkend="spring.xml">spring.xml</link> file of the <structname>core</structname> module to use MyBatis in the project:<programlisting language="xml">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
  &lt;property name=&quot;configLocation&quot; value=&quot;cuba-mybatis.xml&quot;/&gt;
  &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:com/sample/sales/core/sqlmap/*.xml&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;
  &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot; /&gt;
&lt;/bean&gt;</programlisting></para>
    <para>The <property>MapperLocations</property> parameter defines a path to  <code>mapperLocations</code> mapping files (according to the rules of  <code>ResourceLoader</code> Spring interface). </para>
    <para>Below is the an example of a mapping file for loading an instance of  <code>Order</code> together with a related <code>Customer</code> and a collection of  <code>Order</code> items:<programlisting language="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
      PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
      &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.sample.sales&quot;&gt;

  &lt;select id=&quot;selectOrder&quot; resultMap=&quot;orderResultMap&quot;&gt;
      select
          o.ID as order_id,
          o.DATE as order_date,
          o.AMOUNT as order_amount,
          c.ID as customer_id,
          c.NAME as customer_name,
          c.EMAIL as customer_email,
          i.ID as item_id,
          i.QUANTITY as item_quantity,
          p.ID as product_id,
          p.NAME as product_name
      from
          SALES_ORDER o
          left join SALES_CUSTOMER c on c.ID = o.CUSTOMER_ID
          left join SALES_ITEM i on i.ORDER_ID = o.id and i.DELETE_TS is null
          left join SALES_PRODUCT p on p.ID = i.PRODUCT_ID
      where
          c.id = #{id}
  &lt;/select&gt;

  &lt;resultMap id=&quot;orderResultMap&quot; type=&quot;com.sample.sales.entity.Order&quot;&gt;
      &lt;id property=&quot;id&quot; column=&quot;order_id&quot;/&gt;
      &lt;result property=&quot;date&quot; column=&quot;order_date&quot;/&gt;
      &lt;result property=&quot;amount&quot; column=&quot;order_amount&quot;/&gt;

      &lt;association property=&quot;customer&quot; column=&quot;customer_id&quot; javaType=&quot;com.sample.sales.entity.Customer&quot;&gt;
          &lt;id property=&quot;id&quot; column=&quot;customer_id&quot;/&gt;
          &lt;result property=&quot;name&quot; column=&quot;customer_name&quot;/&gt;
          &lt;result property=&quot;email&quot; column=&quot;customer_email&quot;/&gt;
      &lt;/association&gt;

      &lt;collection property=&quot;items&quot; ofType=&quot;com.sample.sales.entity.Item&quot;&gt;
          &lt;id property=&quot;id&quot; column=&quot;item_id&quot;/&gt;
          &lt;result property=&quot;quantity&quot; column=&quot;item_quantity&quot;/&gt;
          &lt;association property=&quot;product&quot; column=&quot;product_id&quot; javaType=&quot;com.sample.sales.entity.Product&quot;&gt;
              &lt;id property=&quot;id&quot; column=&quot;product_id&quot;/&gt;
              &lt;result property=&quot;name&quot; column=&quot;product_name&quot;/&gt;
          &lt;/association&gt;
      &lt;/collection&gt;
  &lt;/resultMap&gt;

&lt;/mapper&gt;</programlisting></para>
    <para>The following code can be used to retrieve query results from the example above:<programlisting language="java">Transaction tx = persistence.createTransaction();
try {
  SqlSession sqlSession = AppBeans.get(&quot;sqlSession&quot;);
  Order order = (Order) sqlSession.selectOne(&quot;com.sample.sales.selectOrder&quot;, orderId);
  tx.commit();
} finally {
  tx.end();
}</programlisting></para>
    <tip>
      <para>The objects loaded using  <application>MyBatis</application> can be changed and sent to  <code>EntityManager.merge()</code>  in order to be persisted to the database. However, only non-<code>null</code> attributes will be persisted, i.e. if an attribute was not loaded or was intentionally set to <code>null</code>, the corresponding database field will remain unchanged.</para>
      <para>This behaviour is defined by the default  <code>openjpa.DetachState=loaded</code> ORM parameter.</para>
    </tip>
  </section>
  <section id="folders_pane">
    <title>Folders Panel</title>
    <para>The folders panel provides quick access to frequently used information. It is a panel on the left side of the main application window containing a hierarchical structure of folders. Clicking on folders shows the corresponding system screens with certain parameters.</para>
    <para>At the moment of this writing, the panel is available for the  <structname>Web Client</structname> only. </para>
    <para>The platform supports three types of folders: <firstterm>application folders</firstterm>, <firstterm>search folders</firstterm> and <firstterm>record sets</firstterm>. Application folders are displayed at the top of the panel as a separate folder tree. Search folders and record sets are displayed at the bottom of the panel in a combined tree. <itemizedlist>
        <listitem>
          <para id="application_folder">Application folders:<itemizedlist>
              <listitem>
                <para>Open screens with or without a <link linkend="gui_Filter">filter</link>.</para>
              </listitem>
              <listitem>
                <para>The set of folders  depend on the current user session. Folder visibility is defined by a Groovy script.</para>
              </listitem>
              <listitem>
                <para>Application folders can  be created and changed only by users with special <link linkend="permissions">permissions</link>.</para>
              </listitem>
              <listitem>
                <para>Folder headers may show the record count calculated by a Groovy script.</para>
              </listitem>
              <listitem>
                <para>Folder headers are updated on timer events, which means that record count and display style for each folder can be updated. </para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para>Search folders:<itemizedlist>
              <listitem>
                <para>Open screens with a <link linkend="gui_Filter">filter</link>. </para>
              </listitem>
              <listitem>
                <para>Search folders can be local or global, accessible only by the user who created them or by all users, respectively.</para>
              </listitem>
              <listitem>
                <para>Local folders can be created by any user, while global are created only by users with special permissions.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para>Record sets:<itemizedlist>
              <listitem>
                <para>Open screens with a  <link linkend="gui_Filter">filter</link> containing a condition to select specific records by their identifiers.</para>
              </listitem>
              <listitem>
                <para>Record set content can be edited using the dedicated table  <link linkend="gui_Action">actions</link>: <guimenuitem>Add to set</guimenuitem> and <guimenuitem>Remove from set</guimenuitem>. </para>
              </listitem>
              <listitem>
                <para>Record sets are available only to the user who created them.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </itemizedlist></para>
    <para>The following application properties can influence the functionality of the folder panel:<itemizedlist>
        <listitem>
          <para><link linkend="cuba.web.foldersPaneEnabled">cuba.web.foldersPaneEnabled</link></para>
        </listitem>
        <listitem>
          <para><link linkend="cuba.web.foldersPaneVisibleByDefault">cuba.web.foldersPaneVisibleByDefault</link></para>
        </listitem>
        <listitem>
          <para><link linkend="cuba.web.foldersPaneDefaultWidth">cuba.web.foldersPaneDefaultWidth</link></para>
        </listitem>
        <listitem>
          <para><link linkend="cuba.web.appFoldersRefreshPeriodSec">cuba.web.appFoldersRefreshPeriodSec</link></para>
        </listitem>
        <listitem>
          <para><link linkend="cuba.web.showFolderIcons">cuba.web.showFolderIcons</link></para>
        </listitem>
      </itemizedlist></para>
    <section>
      <title>Application Folders</title>
      <para>Creating application folders requires special <link linkend="permissions">permissions</link> to create/edit application folders (<literal>cuba.gui.appFolder.global</literal>).</para>
      <para>A simple application folder can be created via the folder panel context menu. Such folder will not be connected to the system screens and can  be only used to group other folders within a folder tree.</para>
      <para>A folder that opens a screen with a filter can be created as follows:<itemizedlist>
          <listitem>
            <para>Open a screen and filter the records as necessary.</para>
          </listitem>
          <listitem>
            <para>Select <guimenuitem>Save as application folder</guimenuitem> option in the   <guibutton>Filter...</guibutton> button menu.</para>
          </listitem>
          <listitem>
            <para>Fill in the folder attributes in the <guilabel>Add</guilabel> dialog:<itemizedlist>
                <listitem>
                  <para><guilabel>Folder name</guilabel>.</para>
                </listitem>
                <listitem>
                  <para><guilabel>Window title</guilabel> – a string to be added to the window title when opening it from the folder.</para>
                </listitem>
                <listitem>
                  <para><guilabel>Parent folder</guilabel> – determines the location of the new folder in the folder tree.</para>
                </listitem>
                <listitem>
                  <para><guilabel>Visibility script</guilabel> – a Groovy script defining folder visibility, executed at the start of user session.</para>
                  <para>The script should return a <code>Boolean</code>. The folder is visible, if the script is not defined or returns <code>true</code> or <code>null</code>. Example of a Groovy script:<programlisting>userSession.currentOrSubstitutedUser.login == &apos;admin&apos;</programlisting></para>
                </listitem>
                <listitem>
                  <para><guilabel>Count script</guilabel> – a Groovy script defining the record count and display style for a folder. Executed at the start of the user session and on timer.</para>
                  <para>The script should return a numeric value, the integer part of which will be used as the record count value. If the script is not defined or returns <code>null</code>, the counter will not be displayed. In addition to the returned value, the script can also set the  <code>style</code> variable, which will be used as folder display style. Example of a Groovy script:<programlisting language="java">import com.haulmont.cuba.core.EntityManager
import com.haulmont.cuba.core.Query

EntityManager em = persistence.getEntityManager()
Query q = em.createQuery(&apos;select count(o) from sales$Order o&apos;)
Number count = q.getSingleResult()

style = count &gt; 0 ? &apos;emphasized&apos; : null
return count</programlisting></para>
                  <para>In order for the style to be displayed, the application theme should contain this style for the   <code>v-tree-node</code> element in the   <code>folderspane</code>, for example:<programlisting language="css">.folderspane .v-tree-node.emphasized {
  font-weight: bold;
}</programlisting></para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist></para>
      <para>Scripts can use the following variables defined in the <code>groovy.lang.Binding</code> context:</para>
      <itemizedlist>
        <listitem>
          <para><code>folder</code> – an instance of <code>AppFolder</code> entity for which the script is executed.</para>
        </listitem>
        <listitem>
          <para><code>userSession</code> – instance of <link linkend="userSession">UserSession</link> for current user session.</para>
        </listitem>
        <listitem>
          <para><code>persistence</code> – implementation of the <link linkend="persistence">Persistence</link> interface.</para>
        </listitem>
        <listitem>
          <para><code>metadata</code> – implementation of the <link linkend="metadata">Metadata</link> interface.</para>
        </listitem>
      </itemizedlist>
      <para>The platform uses the same instance of <code>groovy.lang.Binding</code> for all scripts when the folders are being updated. So it is possible to pass variables between them in order to eliminate duplicate requests and increase performance.</para>
      <para>Script sources can be stored within the attributes of the  <code>AppFolder</code> entity or in separate files. In the latter case, the attribute should include a file path with a mandatory &quot;.groovy&quot; extension, as required by the   <link linkend="resources">Resources</link> interface. If an attribute contains a string ending with &quot;.groovy&quot;, the script will be loaded from the corresponding file; otherwise, the attribute content itself will be used as a script.</para>
      <para>Application folders are instances of the  <code>AppFolder</code> entity and are stored in the related  <database>SYS_FOLDER</database> and  <database>SYS_APP_FOLDER</database> tables.</para>
    </section>
    <section id="search_folder">
      <title>Search Folders</title>
      <para>Search folders can be created by the users  similar to  application folders. Group folders are created directly via the context menu of the folder panel. The folders connected to screens are created from the  <guibutton>Filter...</guibutton> button menu, using the <guimenuitem>Save as search folder</guimenuitem> option.</para>
      <para>Creating global search folders, requires the user to have <guilabel>Create/edit global search folders</guilabel>  permission (<literal>cuba.gui.searchFolder.global</literal>). </para>
      <para>Search folder&apos;s filter can be edited once the folder is created by opening the folder and changing the <guilabel>Folder:{folder name}</guilabel> filter. Saving the filter will change the folder filter as well.</para>
      <para>Search folders are instances of the  <code>SearchFolder</code> entity stored in the related <database>SYS_FOLDER</database> and  <database>SEC_SEARCH_FOLDER</database> tables.</para>
    </section>
    <section>
      <title>Record Sets</title>
      <para>Using records sets within a screen is possible, if the   <link linkend="gui_Filter">Filter</link> has a corresponding  <link linkend="gui_Table">Table</link> component defined in the   <sgmltag>applyTo</sgmltag> attribute. For example:<programlisting language="xml">&lt;layout&gt;
  &lt;filter id=&quot;customerFilter&quot;
          datasource=&quot;customersDs&quot;
          applyTo=&quot;customersTable&quot;/&gt;

  &lt;groupTable id=&quot;customersTable&quot;
              width=&quot;100%&quot;&gt;
      &lt;buttonsPanel&gt;
          &lt;button action=&quot;customersTable.create&quot;/&gt;
...
      &lt;/buttonsPanel&gt;
...</programlisting></para>
      <para> <guibutton>Add to set</guibutton> or <guibutton>Add to current set</guibutton> / <guibutton>Remove from set</guibutton> buttons  should now appear in table context menu.  If a table includes a  <sgmltag>buttonsPanel</sgmltag> (as in the example above), the corresponding table buttons will also be added.</para>
      <para>Record sets are the instances of the  <code>SearchFolder</code> entity stored in the related  <database>SYS_FOLDER</database> and <database>SEC_SEARCH_FOLDER</database> tables.</para>
    </section>
  </section>
  <section id="link_to_screen">
    <title>Screen Links</title>
    <para>The Web Client <link linkend="app_tiers">block</link> allows opening application screens via commands embedded into a URL. If the browser does not have an active application session with the registered user, the application will show the login screen first, and then, after successful authentication, proceed to the main application window with the requested screen.</para>
    <para>The list of supported commands is defined in the   <link linkend="cuba.web.linkHandlerActions">cuba.web.linkHandlerActions</link> application property. By default, these are   <code>open</code> and <code>o</code>. When the HTTP request is being processed, the last part of the URL is analyzed, and if a match with one of the commands is detected,  control is handed over to the  <code>LinkHandler</code> <link linkend="managed_beans">bean</link>. The standard implementation of this bean accepts the following parameters:<itemizedlist>
        <listitem>
          <para><code>screen</code> – name of the screen defined in   <link linkend="screens.xml">screens.xml</link>, for example:<programlisting>http://localhost:8080/app/open?screen=sec$User.browse</programlisting></para>
        </listitem>
        <listitem>
          <para><code>item</code> – an entity instance to be passed to the  <link linkend="screen_edit">edit screen</link>, encoded according to conventions of the <code>EntityLoadInfo</code> class, i.e.  <code>entityName-instanceId</code> or  <code>entityName-instanceId-viewName</code>. Examples:<programlisting>http://localhost:8080/app/open?screen=sec$User.edit&amp;item=sec$User-60885987-1b61-4247-94c7-dff348347f93

http://localhost:8080/app/open?screen=sec$User.edit&amp;item=sec$User-60885987-1b61-4247-94c7-dff348347f93-user.edit</programlisting></para>
        </listitem>
        <listitem>
          <para><code>params</code> – parameters passed to the screen <link linkend="screen_controller">controller&apos;s</link>   <code>init()</code> method. Parameters are encoded as  <code>name1:value1,name2:value2</code>. Parameter values may include entity instances encoded according to the conventions of the  <code>EntityLoadInfo</code> class. Examples:<programlisting>http://localhost:8080/app/open?screen=sales$Customer.lookup&amp;params=p1:v1,p2:v2

http://localhost:8080/app/open?screen=sales$Customer.lookup&amp;params=p1:sales$Customer-01e37691-1a9b-11de-b900-da881aea47a6</programlisting></para>
        </listitem>
      </itemizedlist></para>
    <para><code>LinkHandler</code> bean may be redefined in the application project in order to provide specialized link handling.</para>
  </section>
  <section id="entityInspector">
    <title>Entity Inspector</title>
    <para>The entity inspector allows working with any application objects without having to create dedicated screens. The inspector dynamically generates the screens to browse and edit the instances of the selected entity.</para>
    <para>This gives the system administrator an opportunity to review and edit the data that  is not accessible from standard screens due to their design,  and to create the data model and main menu sections linked to the entity inspector only, at prototyping stage.</para>
    <para>The entry point for the inspector is the <filename>com/haulmont/cuba/gui/app/core/entityinspector/entity-inspector-browse.xml</filename> screen. </para>
    <para>If a <code>String</code>-type parameter named <code>entity</code> with an entity name has been passed to the screen, the inspector will show a list of entities  with the abilities for filtering, selection and editing. The parameter can be specified when registering the screen in <link linkend="screens.xml">screens.xml</link>,  for example:</para>
    <para><filename>screens.xml</filename><programlisting language="xml">&lt;screen id=&quot;sales$Product.lookup&quot;
      template=&quot;/com/haulmont/cuba/gui/app/core/entityinspector/entity-inspector-browse.xml&quot;&gt;
  &lt;param name=&quot;entity&quot;
         value=&quot;sales$Product&quot;/&gt;
&lt;/screen&gt;</programlisting></para>
    <para><filename>menu.xml</filename><programlisting language="xml">&lt;item id=&quot;sales$Product.lookup&quot;/&gt;</programlisting></para>
    <para>Screen identifier defined as <code>{entity_name}.lookup</code> allows   <link linkend="gui_PickerField">PickerField</link> and  <link linkend="gui_LookupPickerField">LookupPickerField</link> components to use this screen within the <code>PickerField.LookupAction</code> standard action.</para>
    <para>Generally, the screen may be called without any parameters. In this case, the top part will contain an entity selection field. In the  <structname>cuba</structname> base project, the inspector screen is registered with the  <code>entityInspector.browse</code> identifier, so it can  be simply referenced in a menu item:<programlisting language="xml">&lt;item id=&quot;entityInspector.browse&quot;/&gt;</programlisting></para>
  </section>
  <section id="credits">
    <title>Information about Software Components</title>
    <para>The platform provides an ability to register the information about third party software components used in the application (credits) and to display this information in the UI. The information includes a software component name, a  website link and the license text.</para>
    <para><link linkend="base_projects">Base projects</link> of the platform contain their own files with descriptions, like <filename>cuba-credits.xml</filename>, <filename>reports-credits.xml</filename>. The  <link linkend="cuba.creditsConfig">cuba.creditsConfig</link> application property can be used to define a list of application-specific description files depending on the base project used in the application.</para>
    <para>The structure of the  <filename>credits.xml</filename> file is as follows: <itemizedlist>
        <listitem>
          <para>The  <sgmltag>items</sgmltag> element lists the used libraries with license texts included either as an embedded  <sgmltag>license</sgmltag> element, or as a  <sgmltag>license</sgmltag> attribute with a link to the text in the  <sgmltag>licenses</sgmltag> section.</para>
          <para>It is possible to reference licenses declared in the current file as well as any other file declared in  <property>cuba.creditsConfig</property> variable prior to the current one.</para>
        </listitem>
        <listitem>
          <para>The  <sgmltag>licenses</sgmltag> element lists the texts of general licenses used (e.g. LGPL).</para>
        </listitem>
      </itemizedlist></para>
    <para>The entire list of third-party software components can be displayed using the <filename>com/haulmont/cuba/gui/app/core/credits/credits-frame.xml</filename> frame, which loads the information from the files defined in the <property>cuba.creditsConfig</property> property. An example of a frame  within a screen:<programlisting language="xml">&lt;layout expand=&quot;creditsBox&quot;&gt;
  &lt;groupBox id=&quot;creditsBox&quot;
            caption=&quot;msg://credits&quot;
            width=&quot;100%&quot;&gt;
      &lt;iframe id=&quot;credits&quot;
              src=&quot;/com/haulmont/cuba/gui/app/core/credits/credits-frame.xml&quot;
              width=&quot;100%&quot;
              height=&quot;100%&quot;/&gt;
  &lt;/groupBox&gt;
&lt;/layout&gt;</programlisting></para>
    <para>If the modal mode (<code>WindowManager.OpenType.DIALOG</code>) is used to open the screen that contains the frame,  the height must be specified; otherwise, the scrolling may not work correctly. The height can be set within the screen controller displaying the frame:<programlisting language="java">@Override
public void init(Map&lt;String, Object&gt; params) {
  getDialogParams().setWidth(500).setHeight(400);
}</programlisting></para>
  </section>
</section>

<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="gui_framework" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Generic User Interface</title>
  <para>Generic user interface (Generic UI, GUI) subsystem allows you to create UI screens using XML and Java. The screens created using this approach work identically in both standard client  <link linkend="app_tiers">blocks</link>: Web Client и Desktop Client. </para>
  <figure>
    <title>The Structure of Generic User Interface </title>
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="img/ClientStructure.png"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>Main components of Generic UI screens are marked as green:<itemizedlist>
      <listitem>
        <para><link linkend="screen_xml">XML-descriptors</link> – XML files containing information about datasources and screen layout.</para>
      </listitem>
      <listitem>
        <para><link linkend="screen_controller">Controllers</link> – Java classes containing logic for screen initialization and handling of events generated by UI controls.</para>
      </listitem>
    </itemizedlist></para>
  <para>The code of application screens included in the <structname>gui</structname> <link linkend="app_modules">module</link> interacts with visual component interfaces (VCL Interfaces) implemented separately in the  <structname>web</structname> and <structname>desktop</structname> modules of the  <structname>cuba</structname> <link linkend="base_projects">base project</link>. For Web Client the implementation is based on the <application>Vaadin</application> framework, for Desktop Client on the  <application>Java Swing</application> framework.</para>
  <para><link linkend="gui_vcl">Visual Components Library</link> (VCL)
contains a large set of ready-to-use components.</para>
  <para><link linkend="datasources">Datasources</link>  mechanism provides a unified interface that ensures functioning of data-aware visual components.</para>
  <para>Client’s infrastructure (Infrastructure) includes main application window, mechanisms for display and interaction of UI screens and means of interaction with the middleware.</para>
  <section id="screens">
    <title>Screens</title>
    <para>A generic UI screen is defined by an  <link linkend="screen_xml">XML-descriptor</link> and a  <link linkend="screen_controller">controller</link> class. The descriptor has a link to the controller class.</para>
    <para>In order to be able to invoke the screen from the main menu or from Java code (e.g. from controller of a different screen) the XML-descriptor should be registered in the project’s <link linkend="screens.xml">screens.xml</link>  file.</para>
    <para>The main menu of an application is generated separately for the Web Client and the Desktop Client based on the  <link linkend="menu.xml">menu.xml</link> files, located in the project’s  <structname>web</structname> and <structname>desktop</structname> modules.</para>
    <section id="screen_types">
      <title>Screen Types</title>
      <para>This section describes the following basic types of screens:
<itemizedlist>
          <listitem>
            <para><link linkend="frame">Frame</link></para>
          </listitem>
          <listitem>
            <para><link linkend="screen_simple">Simple Screen</link></para>
          </listitem>
          <listitem>
            <para><link linkend="screen_lookup">Lookup Screen</link></para>
          </listitem>
          <listitem>
            <para><link linkend="screen_edit">Edit Screen</link></para>
          </listitem>
        </itemizedlist></para>
      <section id="frame">
        <title>Frame</title>
        <para>Frames are parts of the screen intended for decomposition and reuse.</para>
        <para>The <link linkend="gui_IFrame">iframe</link> element of the screen’s XML is used to add a frame to the screen. It defines either path to the frame’s XML descriptor, or its identifier, if the frame is registered in <link linkend="screens.xml">screens.xml</link>.</para>
        <para>A frame controller should be derived from the <code>AbstractFrame</code> class.</para>
        <para>Rules for interaction between a screen and its enclosed frame are the following:</para>
        <itemizedlist>
          <listitem>
            <para>Frame components can be referenced from a screen using a dot: <code>frame_id.component_id</code></para>
          </listitem>
          <listitem>
            <para>List of screen components can be obtained from a frame controller by invoking  <code>getComponent(component_id)</code> method but only  if there is no component with the same name in the frame itself. I.e. frame components mask screen components.</para>
          </listitem>
          <listitem>
            <para>Screen  <link linkend="datasources">datasource</link> can be obtained from a frame by invoking <code>getDsContext().get(ds_id)</code> method or <link linkend="screen_controller_injection">injection</link>, or using <code>ds$ds_id</code> in <link linkend="datasource_query">query</link>, but only  if the data source with a matching name is not declared in the frame itself (same as for components).</para>
          </listitem>
          <listitem>
            <para>From a screen, frame data source can be obtained  only by iterating   <code>getDsContext().getChildren()</code> collection.</para>
          </listitem>
        </itemizedlist>
        <para>Screen commit also causes commits of modified datasources of the frame it uses.</para>
      </section>
      <section id="screen_simple">
        <title>Simple Screen</title>
        <para>Simple screens allow display and editing of arbitrary information including individual instances and lists of entities. This screen type has only core functionality to display it in the application’s main window, close it and to work with  <link linkend="datasources">datasources</link>.</para>
        <para>Screen identifier in  <link linkend="screens.xml">screens.xml</link>  may have an arbitrary format.</para>
        <para>Controller of a simple screen should be inherited from the  <code>AbstractWindow</code> class. </para>
      </section>
      <section id="screen_lookup">
        <title>Lookup Screen</title>
        <para>When a lookup screen is invoked by  <code>openLookup()</code> method, it displays a panel at the bottom with the buttons designed to pass an instance of the currently selected entity to the calling code. That’s the main difference between lookup and simple screen. When being invoked by  <code>openWindow()</code> method or, for example, from the main menu, the panel with the buttons is not displayed.</para>
        <para>Lookup screens are recommended to be used to display lists of entities. Visual components intended to display and edit links between entities (such as <link linkend="gui_PickerField">PickerField</link>, <link linkend="gui_LookupPickerField">LookupPickerField</link>, <link linkend="gui_SearchPickerField">SearchPickerField</link>)  invoke lookup screens to find related entities. </para>
        <para>For  <link linkend="standard_actions">standard actions</link> to work correctly, an identifier of a lookup screen in  <link linkend="screens.xml">screens.xml</link> should have the format of  <literal>{entity_name}.lookup</literal>, for example,  <literal>sales$Customer.lookup</literal>.</para>
        <para>Controller of a lookup screen should be inherited from the  <code>AbstractLookup</code> class. The  <code>lookupComponent</code> attribute of the screen’s XML should refer to the component (for example  <link linkend="gui_Table">Table</link>), from which the selected entity instance should be taken as result of lookup.</para>
      </section>
      <section id="screen_edit">
        <title>Edit Screen</title>
        <para>Edit screen is designed to display and edit entity instances. It initializes the instance being edited and supports  <link linkend="gui_Action">actions</link> for committing changes to the database. Edit screen should be opened by the  <code>openEditor()</code> method passing an entity instance as an argument.</para>
        <para>For  <link linkend="standard_actions">standard actions</link> to work correctly, an identifier of an edit screen in<link linkend="screens.xml">screens.xml</link> should have the format of <literal>{entity_name}.edit</literal>, for example, <literal>sales$Customer.edit</literal>.</para>
        <para>Edit screen controller should be inherited from the <code>AbstractEditor</code> class. The  <sgmltag>datasource</sgmltag> attribute of a screen’s XML should refer to a data source containing the edited entity instance. The following standard button frames in the XML can be used to display actions that commit or cancel changes:<itemizedlist>
            <listitem>
              <para><literal>editWindowActions</literal> (file  <filename>com/haulmont/cuba/gui/edit-window.actions.xml</filename>) – contains  <guibutton>OK</guibutton> and <guibutton>Cancel</guibutton> buttons</para>
            </listitem>
            <listitem>
              <para><literal>extendedEditWindowActions</literal> (file  <filename>com/haulmont/cuba/gui/extended-edit-window.actions.xml</filename>) – contains <guibutton>OK &amp; Close</guibutton>, <guibutton>OK</guibutton> and <guibutton>Cancel</guibutton></para>
            </listitem>
          </itemizedlist></para>
        <para>The following actions are implicitly initialized in the edit screen:<itemizedlist>
            <listitem>
              <para><literal>windowCommitAndClose</literal> (corresponds to the <code>Window.Editor.WINDOW_COMMIT_AND_CLOSE</code> constant) – an action committing changes to the database and closing the screen. The action is initialized if the screen has a visual component with <literal>windowCommitAndClose</literal> identifier. The action is displayed as an <guibutton>OK &amp; Close</guibutton> button when the mentioned above standard <literal>extendedEditWindowActions</literal> frame is used.</para>
            </listitem>
            <listitem>
              <para><literal>windowCommit</literal> (corresponds to the  <code>Window.Editor.WINDOW_COMMIT</code> constant) – an action which commits  changes to the database. In  absence of <literal>windowCommitAndClose</literal> action, closes the screen after committing. The action is always displayed as an  <guibutton>OK</guibutton> button if the screen has the abovementioned  standard frames.</para>
            </listitem>
            <listitem>
              <para><literal>windowClose</literal> (corresponds to the  <code>Window.Editor.WINDOW_CLOSE</code> constant) – which closes the screen without committing any changes. The action is always initialized.  If the screen has the abovementioned standard frames, it is displayed as <guibutton>Cancel</guibutton> button.</para>
            </listitem>
          </itemizedlist></para>
        <para>Thus, if the screen contains an  <literal>editWindowActions</literal> frame, the  <guibutton>OK</guibutton> button commits the changes and closes the screen, and the <guibutton>Cancel</guibutton> button – closes the screen without committing the changes. If the screen contains an <literal>extendedEditWindowActions</literal> frame, the  <guibutton>OK</guibutton> button only commits the changes,  <guibutton>OK &amp; Close</guibutton> button commits the changes and closes the screen, and the  <guibutton>Cancel</guibutton> button closes the screen without committing the changes.</para>
        <para>Instead of standard frames actions can be visualized using arbitrary components, for example, <link linkend="gui_LinkButton">LinkButton</link>. </para>
      </section>
    </section>
    <section id="screen_xml">
      <title>XML-Descriptor</title>
      <para>XML-descriptor is a file in XML format describing  <link linkend="datasources">datasources</link> and screen layout.</para>
      <para><para>XML schema is available at <ulink url="http://schemas.haulmont.com/cuba/5.0/window.xsd">http://schemas.haulmont.com/cuba/5.0/window.xsd</ulink>.</para></para>
      <para>Descriptor has the following structure:</para>
      <para><sgmltag>window</sgmltag> −  root element.</para>
      <para><sgmltag>window</sgmltag> attributes:<itemizedlist>
          <listitem>
            <para><property>
                <sgmltag>class</sgmltag>
              </property> − name of a  <link linkend="screen_controller">controller</link> class.</para>
          </listitem>
          <listitem>
            <para><sgmltag>messagesPack</sgmltag> − a default <link linkend="message_packs">message pack</link> for the screen. It is used to obtain localized messages in the controller using <code>getMessage()</code> method and in the XML descriptor using message key without specifying the pack.</para>
          </listitem>
          <listitem>
            <para><sgmltag>caption</sgmltag> − window caption, can contain a  <link linkend="messageTools.loadString">link to a message</link> from the above mentioned pack, for example, <programlisting>caption=&quot;msg://credits&quot;</programlisting></para>
          </listitem>
          <listitem>
            <para><sgmltag>focusComponent</sgmltag> − identifier of a component which should get input focus when the screen is displayed.</para>
          </listitem>
          <listitem>
            <para><sgmltag>lookupComponent</sgmltag> – mandatory attribute for a  <link linkend="screen_lookup">lookup screen</link>; defines the identifier of a visual component that the entity instance should be selected from. Supports the following types of components (and their subclasses):<itemizedlist>
                <listitem>
                  <para><code>Table</code></para>
                </listitem>
                <listitem>
                  <para><code>Tree</code></para>
                </listitem>
                <listitem>
                  <para><code>LookupField</code></para>
                </listitem>
                <listitem>
                  <para><code>PickerField</code></para>
                </listitem>
                <listitem>
                  <para><code>OptionsGroup</code></para>
                </listitem>
              </itemizedlist></para>
          </listitem>
          <listitem>
            <para><sgmltag>datasource</sgmltag> – mandatory attribute for an  <link linkend="screen_edit">edit screen</link> which defines the identifier of the  <link linkend="datasources">data source</link> containing the edited entity instance.</para>
          </listitem>
        </itemizedlist></para>
      <para><sgmltag>window</sgmltag> elements:<itemizedlist>
          <listitem>
            <para><sgmltag>metadataContext</sgmltag> − the element initializing the  <link linkend="views">views</link> required for the screen. It is recommended to define all views in a single <link linkend="views.xml">views.xml</link> file, because all view descriptors are deployed into a common repository, so it is difficult to ensure unique names if the descriptors are scattered across multiple files.</para>
          </listitem>
          <listitem>
            <para><sgmltag>dsContext</sgmltag> − defines <link linkend="datasources">data source</link> for the screen.</para>
          </listitem>
          <listitem>
            <para><sgmltag>actions</sgmltag> – defines the list of  <link linkend="gui_Action">actions</link> for the screen.</para>
          </listitem>
          <listitem>
            <para><sgmltag>timers</sgmltag> – defines the list of timers for the screen.</para>
          </listitem>
          <listitem>
            <para><sgmltag>companions</sgmltag> – defines the list of <link linkend="companions">companion</link> classes for the screen controller.</para>
            <para>Elements of  <sgmltag>companions</sgmltag>:<itemizedlist>
                <listitem>
                  <para><sgmltag>web</sgmltag> – defines a companion implemented in the  <structname>web</structname> module.</para>
                </listitem>
                <listitem>
                  <para><sgmltag>desktop</sgmltag> – defines a companion implemented in the  <structname>desktop</structname> module.</para>
                </listitem>
              </itemizedlist></para>
            <para>Each of these elements contains  <sgmltag>class</sgmltag> attribute defining the companion class.</para>
          </listitem>
          <listitem>
            <para><sgmltag>layout</sgmltag> − root element of the screen layout, a container with a vertical layout of components, similar to  <link linkend="gui_BoxLayout">vbox</link>.</para>
            <para>Attributes of  <sgmltag>layout</sgmltag>:<itemizedlist>
                <listitem>
                  <para><link linkend="gui_attr_basic_spacing">spacing</link></para>
                </listitem>
                <listitem>
                  <para><link linkend="gui_attr_basic_margin">margin</link></para>
                </listitem>
                <listitem>
                  <para><link linkend="gui_attr_basic_expand">expand</link></para>
                </listitem>
                <listitem>
                  <para><link linkend="gui_attr_basic_stylename">stylename</link></para>
                </listitem>
                <listitem>
                  <para><link linkend="gui_attr_basic_height">height</link></para>
                </listitem>
                <listitem>
                  <para><link linkend="gui_attr_basic_width">width</link></para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section id="screen_controller">
      <title>Screen Controller</title>
      <para>Screen controller is a Java or Groovy class, linked to an  <link linkend="screen_xml">XML-descriptor</link> and containing screen initialization and events handling logic.</para>
      <para>Controller should be inherited from one of the following base classes:</para>
      <itemizedlist>
        <listitem>
          <para><link linkend="abstractFrame">AbstractFrame</link> − for implementation of  <link linkend="frame">frames</link>.</para>
        </listitem>
        <listitem>
          <para><link linkend="abstractWindow">AbstractWindow</link> − for implementation of  <link linkend="screen_simple">simple screens</link>.</para>
        </listitem>
        <listitem>
          <para><link linkend="abstractLookup">AbstractLookup</link> − for implementation of  <link linkend="screen_lookup">lookup screens</link>.</para>
        </listitem>
        <listitem>
          <para><link linkend="abstractEditor">AbstractEditor</link> − for implementation of  <link linkend="screen_edit">edit screens</link>.</para>
        </listitem>
      </itemizedlist>
      <tip>
        <para>If a screen does not need additional logic, it can use the base class itself as a controller –  <code>AbstractWindow</code>, <code>AbstractLookup</code> или <code>AbstractEditor</code>, by specifying it in the XML-descriptor (these classes are not actually abstract in a sense of impossibility of instantiating). For frames, controller class can be omitted.</para>
      </tip>
      <para>Controller class should be registered in  <sgmltag>class</sgmltag> attribute of the root element <sgmltag>window</sgmltag> in a screen’s XML descriptor.</para>
      <figure>
        <title>Controller Base Classes</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/Controllers.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <section id="abstractFrame">
        <title>AbstractFrame</title>
        <para><code>AbstractFrame</code> is the root of the controller class hierarchy. Below is the description of its main methods:</para>
        <itemizedlist>
          <listitem>
            <para><code>init()</code> is called by the framework after creating components tree described by an XML-descriptor, but before a screen is displayed.</para>
            <para> <methodname>init()</methodname> method accepts a map of parameters that can be used in controller. These parameters can be passed both from the controller of the calling screen (using  <code>openWindow()</code>, <code>openLookup() </code>or  <code>openEditor()</code> methods) or defined in the screen registration file  <link linkend="screens.xml">screens.xml</link>.</para>
            <para>  <code>init()</code> method should be implemented if it is necessary to initialize screen components, for example:<programlisting language="java">@Inject
private Table someTable;

@Override
public void init(Map&lt;String, Object&gt; params) {
  someTable.addGeneratedColumn(&quot;someColumn&quot;, new Table.ColumnGenerator&lt;Colour&gt;() {
      @Override
      public Component generateCell(Colour entity) {
          ...
      }
  });
}</programlisting></para>
          </listitem>
          <listitem>
            <para><code>getMessage()</code>, <code>formatMessage()</code> – methods for retrieving localized messages from a <link linkend="message_packs">pack</link>, defined for a screen in the XML-descriptor. They work as shortcuts for calling the corresponding methods of the <link linkend="messages">Messages</link> interface.</para>
          </listitem>
          <listitem>
            <para><code>getDialogParams()</code> – returns a <code>DialogParams</code> object to set up dialog window display properties (height, width, etc.). The values defined in this object affect the next screen opened as a modal dialog (<code>WindowManager.OpenType.DIALOG</code>). The settings are reset to defaults after the dialog has been displayed.</para>
            <para>Thus, the properties of <code>DialogParams</code> object should be set immediately before opening another modal screen using <code>openWindow()</code>, <code>openLookup()</code>, <code>openEditor()</code>. For example:
                <programlisting language="java"><![CDATA[
getDialogParams().setWidth(400);
openEditor("sales$Customer.edit", customer, WindowManager.OpenType.DIALOG);]]></programlisting>
            </para>
            <para>If the current screen itself is modal it is possible to adjust its display properties by changing <code>DialogParams</code> object in its  <code>init()</code> method. Please note that the properties defined in  <code>init()</code> method have priority over the ones defined in the calling code.</para>
          </listitem>
          <listitem>
            <para><code>openFrame()</code> – loads a frame according to an identifier registered in <link linkend="screens.xml">screens.xml</link> file. If the method receives a container component from the invoking code, the frame is shown within the container. The method returns  frame controller. For example:<programlisting language="java">@Inject
private BoxLayout container;

@Override
public void init(Map&lt;String, Object&gt; params) {
  SomeFrame frame = openFrame(container, &quot;someFrame&quot;);
  frame.setHeight(&quot;100%&quot;);
  frame.someInitMethod();
}</programlisting></para>
            <para>It is not required to pass the container immediately via  <code>openFrame()</code> method, instead it is possible to load the frame first and then add it to the necessary container:<programlisting language="java">@Inject
private BoxLayout container;

@Override
public void init(Map&lt;String, Object&gt; params) {
  SomeFrame frame = openFrame(null, &quot;someFrame&quot;);
  frame.setHeight(&quot;100%&quot;);
  frame.someInitMethod();
  container.add(frame);
}</programlisting></para>
          </listitem>
          <listitem>
            <para><code>openWindow()</code>, <code>openLookup()</code>, <code>openEditor()</code> – open a simple screen, a lookup screen, or an edit screen respectively. Methods return a controller of the created screen.</para>
            <para><code>CloseListener</code> can be added in order to perform actions after the invoked screen closes, for example:<programlisting language="java">CustomerEdit editor = openEditor(&quot;sales$Customer.edit&quot;, customer, WindowManager.OpenType.THIS_TAB);
editor.addListener(new CloseListener() {
  @Override
  public void windowClosed(String actionId) {
      // do something
  }
});</programlisting></para>
          </listitem>
          <listitem>
            <para><code>showMessageDialog()</code> – shows a dialog box with a message.</para>
          </listitem>
          <listitem>
            <para><code>showOptionDialog()</code> – shows a dialog box with a message and an option for user to invoke certain actions. Actions are defined by an array of  <link linkend="gui_Action">Action</link> type items displayed as buttons in the dialog.</para>
            <para><code>DialogAction</code> objects a recommended to be used for display of standard buttons such as <guibutton>OK</guibutton>, <guibutton>Cancel</guibutton> and other, for example:<programlisting language="java">showOptionDialog(&quot;PLease confirm&quot;, &quot;Are you sure?&quot;,
      MessageType.CONFIRMATION,
      new Action[] {
              new DialogAction(DialogAction.Type.YES) {
                  @Override
                  public void actionPerform(Component component) {
                      // do something
                  }
              },
              new DialogAction(DialogAction.Type.NO);
      });</programlisting></para>
          </listitem>
          <listitem>
            <para><code>showNotification()</code> – shows a pop up notification.</para>
          </listitem>
          <listitem>
            <para><code>showWebPage()</code> – opens specified web page in a browser.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="abstractWindow">
        <title>AbstractWindow</title>
        <para><code>AbstractWindow</code> is a subclass of <link linkend="abstractFrame">AbstractFrame</link> and defines the following methods:</para>
        <itemizedlist>
          <listitem>
            <para><code>validateAll()</code> – validates a screen. The default implementation calls <code>validate()</code> for all screen components implementing the <code>Component.Validatable</code> interface, collects information about exceptions and displays corresponding message. Method returns  <code>false</code>, if any exceptions were found; and   <code>true</code> otherwise.</para>
            <para>This method should be overridden only if it is required to override screen validation procedure completely. It is sufficient to implement a special template method –  <code>postValidate()</code>, if validation should be just supplemented.</para>
          </listitem>
          <listitem>
            <para><code>postValidate()</code> –  a template method that can be implemented in controller for additional screen validation. The method stores validation errors information in <code>ValidationErrors</code> object which is passed to  it. Afterwards this information is displayed together with the errors of standard validation. For example:<programlisting language="java">private Pattern pattern = Pattern.compile(&quot;\\d&quot;);

@Override
protected void postValidate(ValidationErrors errors) {
  if (getItem().getAddress().getCity() != null) {
      if (pattern.matcher(getItem().getAddress().getCity()).find()) {
          errors.add(&quot;City name can&apos;t contain digits&quot;);
      }
  }
}</programlisting></para>
          </listitem>
          <listitem>
            <para><code>close()</code> – closes this screen. </para>
            <para>The method accepts string value, which is then passed to  <code>preClose()</code> template method and  to  <code>CloseListener</code> listeners. Thus, the information about the reason why the window was closed can be obtained from the code that initiated the closing event. It is recommended to use the following constants for closing edit screens: <code>Window.COMMIT_ACTION_ID</code> after committing changes,  <code>Window.CLOSE_ACTION_ID</code> – without committing changes.</para>
            <para>If any of the datasources contains unsaved changes, a dialog with a corresponding message will be displayed before the screen is closed. Notification type may be adjusted using the <link linkend="cuba.gui.useSaveConfirmation">cuba.gui.useSaveConfirmation</link> application property.</para>
            <para>A variant of  <code>close()</code> method with  <code>force = true</code> parameter closes the screen without calling <code>preClose()</code> and without a notification regardless of any unsaved changes.</para>
            <para><code>close()</code> method returns  <code>true</code>, if the screen is closed successfully, and  <code>false</code> – if closing procedure was interrupted.</para>
          </listitem>
          <listitem>
            <para><code>preClose()</code>  is a template method which can be implemented in a controller to intercept the moment when the window closes. The method receives a string value provided by the closing initiator when invoking  <code>close()</code> method.</para>
            <para>If the  <code>preClose()</code> method returns  <code>false</code>, the window closing process is interrupted.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="abstractLookup">
        <title>AbstractLookup</title>
        <para><code>AbstractLookup</code> is the base class for <link linkend="screen_lookup">lookup screen</link> controllers. It is a subclass  of <link linkend="abstractWindow">AbstractWindow</link> and defines the following own methods:</para>
        <itemizedlist>
          <listitem>
            <para><code>setLookupComponent()</code> – sets the component, which will be used to select entity instances.</para>
            <para>As a rule, component for selection is defined in screen XML-descriptor  and there is no need to call this method in the application code.</para>
          </listitem>
          <listitem>
            <para><code>setLookupValidator()</code> – sets  <code>Window.Lookup.Validator</code> object to the screen, which <code>validate()</code> method is invoked by the framework before returning selected entity instances. If  <code>validate()</code> method returns  <code>false</code>, the lookup and window closing process is interrupted.</para>
            <para>By default, the validator is not set.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="abstractEditor">
        <title>AbstractEditor</title>
        <para><code>AbstractEditor</code> is the base class for <link linkend="screen_edit">edit screen</link> controller. It is a subclass of <link linkend="abstractWindow">AbstractWindow</link>.</para>
        <para>When creating a controller class, it is recommended to parameterize <code>AbstractEditor</code> with the edited entity class. This enables  <code>getItem()</code> and <code>initItem()</code> methods work with the specified entity type and application code does not need to do additional type conversion. For example:</para>
        <programlisting language="java">public class CustomerEdit extends AbstractEditor&lt;Customer&gt; {

  @Override
  protected void initItem(Customer item) {
  ...</programlisting>
        <para><code>AbstractEditor</code> defines the following own methods:</para>
        <itemizedlist>
          <listitem>
            <para><code>getItem()</code> – returns an instance of the entity being edited, which is set in the main <link linkend="datasources">data source</link> of the screen (i.e. specified in the <sgmltag>datasource</sgmltag> attribute of the root element of the  XML-descriptor).</para>
            <para>If the instance being edited is not a new one, screen opening procedure will reload the instance from the database with the required  <link linkend="views">view</link> as set for the main data source.</para>
            <para>Changes made to the instance returned by  <code>getItem()</code>, are reflected in the state of the data source and will be sent to the Middleware at commit.</para>
            <warning>
              <para>It should be considered that  <code>getItem()</code> returns a value only after screen is initialized with  <code>setItem()</code> method. Until this moment,  this method returns <code>null</code>, for instance when calling from inside <code>init()</code> or  <code>initItem()</code>. </para>
              <para>However, in the <code>init()</code> method, an instance of an entity passed to  <code>openEditor()</code> can be retrieved from  parameters using the following approach:<programlisting language="java">@Override
public void init(Map&lt;String, Object&gt; params) {
  Customer item = WindowParams.ITEM.getEntity(params);
  // do something
}</programlisting></para>
              <para><code>initItem()</code> method requires an instance to be passed explicitly and of an appropriate type.</para>
              <para>In both cases the obtained entity instance will be reloaded afterwards unless it is a new one. Therefore you should not change it or save it in a field for future use.</para>
            </warning>
          </listitem>
          <listitem>
            <para><code>setItem()</code> –  invoked by the framework when a window is opened using <code>openEditor()</code> to set the instance being edited to the main data source. By the moment of invocation all screen components and datasources will have been created and the controller’s <code>init()</code> method will have been executed.</para>
            <para>It is recommended to use template methods <code>initNewItem()</code> and <code>postInit()</code>, instead of overriding <code>setItem()</code> in order to initialize a screen. </para>
          </listitem>
          <listitem id="initNewItem">
            <para><code>initNewItem()</code> – a template method invoked by the framework before setting the edited entity instance  into the main data source. </para>
            <para>The <code>initNewItem()</code> method is called for newly created entity instances only. The method is not called for <link linkend="entity_states">detached</link> instances. This method can be implemented in the controller, if new entity instances must be initialized before setting them in the data source. For example:<programlisting language="java">@Inject
private UserSession userSession;

@Override
protected void initNewItem(Complaint item) {
  item.setOpenedBy(userSession.getUser());
  item.setStatus(ComplaintStatus.OPENED);
}</programlisting></para>
            <para>A more complex example of using the <code>initNewItem()</code> method can be found in <link linkend="dev_recipes">development recipes</link> section. </para>
          </listitem>
          <listitem>
            <para><code>postInit()</code> – a template method invoked by the framework immediately after the edited entity instance is set to the main data source. In this method,  <code>getItem()</code> can be called to return a new entity instance or an instance re-loaded during screen initialization.</para>
            <para>This method can be implemented in controller for final screen initialization, for example:<programlisting language="java">@Inject
protected EntityDiffViewer diffFrame;

@Override
protected void postInit() {
  if (!PersistenceHelper.isNew(getItem())) {
      diffFrame.loadVersions(getItem());
  }
}</programlisting></para>
          </listitem>
          <listitem>
            <para><code>commit()</code> – validates the  screen and submits changes to the Middleware via <link linkend="dataSupplier">DataSupplier</link>.</para>
            <para>If a method is used with  <code>validate = false</code>, commit does not perform a validation.</para>
            <para>It is recommended to use specialized template methods –  <code>postValidate()</code>, <code>preCommit()</code> and <code>postCommit()</code> instead of overriding this method.</para>
          </listitem>
          <listitem>
            <para><code>commitAndClose()</code> – validates the screen, submits changes to the Middleware and closes the screen. The value of the <code>Window.COMMIT_ACTION_ID</code> will be passed to the   <code>preClose()</code> method and registered  <code>CloseListener</code> listeners.  </para>
            <para>It is recommended to use specialized template methods –  <code>postValidate()</code>, <code>preCommit()</code> и <code>postCommit()</code> instead of overriding this method.</para>
          </listitem>
          <listitem>
            <para><code>preCommit()</code> – a template method invoked by the framework during the commit process, after a successful validation, but before the data is submitted to the Middleware.</para>
            <para>This method can be implemented in controller. If the method returns <code>false</code>, commit process gets interrupted, as well as window closing process (if  <code>commitAndClose()</code> was invoked). For example:<programlisting language="java">@Override
protected boolean preCommit() {
  if (somethingWentWrong) {
      showNotification(&quot;Something went wrong&quot;, NotificationType.WARNING);
      return false;
  }
  return true;
}</programlisting></para>
          </listitem>
          <listitem>
            <para><code>postCommit()</code> – a template method invoked by the framework at the final stage of committing changes. Method parameters are:<itemizedlist>
                <listitem>
                  <para><code>committed</code> – set to  <code>true</code>, if the screen had changes and they have been submitted to Middleware.</para>
                </listitem>
                <listitem>
                  <para><code>close</code> – set to  <code>true</code>, if the screen should be closed after the changes are committed.</para>
                </listitem>
              </itemizedlist></para>
            <para>If the screen does not close the default implementation of this method displays a message about successful commit and invokes  <code>postInit()</code>.</para>
            <para>This method can be overridden in controller in order to perform additional actions after successful commit, for example:<programlisting language="java">@Inject
private Datasource&lt;Driver&gt; driverDs;
@Inject
private EntitySnapshotService entitySnapshotService;

@Override
protected boolean postCommit(boolean committed, boolean close) {
  if (committed) {
      entitySnapshotService.createSnapshot(driverDs.getItem(), driverDs.getView());
  }
  return super.postCommit(committed, close);
}</programlisting></para>
          </listitem>
        </itemizedlist>
        <para>The diagrams below show initialization sequence and different ways to commit changes for an edit screen.</para>
        <figure>
          <title>Edit Screen Initialization</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/EditorInit.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure>
          <title>Committing And Closing a Window With an editWindowActions Frame</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/EditorCommit.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure>
          <title>Committing a Screen With an extendedEditWindowActions Frame</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/ExtendedEditorCommit.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure>
          <title>Committing a Screen With an extendedEditWindowActions Frame</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/ExtendedEditorCommitAndClose.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section id="screen_controller_injection">
        <title>Controller Dependency Injection</title>
        <para>Dependency Injection in controllers can be used to acquire references to utilized objects. For this purpose it is required to declare either a field of the corresponding type or a write access method (setter) with an appropriate parameter type and with one of the following annotations:<itemizedlist>
            <listitem>
              <para><code>@Inject</code> – the simplest option, where an object for injection will be found according to the field/method type and the name of the field or attribute corresponding to the method according to JavaBeans rules.</para>
            </listitem>
            <listitem>
              <para><code>@Named(&quot;someName&quot;)</code> – explicitly defines the name of the target object.</para>
            </listitem>
          </itemizedlist></para>
        <para>The following objects can be injected into controllers: <itemizedlist>
            <listitem>
              <para>This screen’s visual components defined in the XML-descriptor. If the attribute type is derived from <code>Component</code>, the system will search for a component with the corresponding name within the current screen. </para>
            </listitem>
            <listitem>
              <para>Actions defined in the XML-descriptor – see <xref linkend="gui_Action"/>.</para>
            </listitem>
            <listitem>
              <para><link linkend="datasources">Datasources</link> defined in the XML-descriptor. If the attribute type is derived from <code>Datasource</code>, the system will search for a data source with the corresponding name in the current screen.</para>
            </listitem>
            <listitem>
              <para><code>UserSession</code>. If the attribute type is  <link linkend="userSession">UserSession</link>, the system will inject an object of the current user session.</para>
            </listitem>
            <listitem>
              <para><code>DsContext</code>. If the attribute type is  <code>DsContext</code>, the system will inject the  <code>DsContext</code> of the current screen.</para>
            </listitem>
            <listitem>
              <para><code>WindowContext</code>. If the attribute type is <code>WindowContext</code>, the system will inject the <code>WindowContext</code> of the current screen. </para>
            </listitem>
            <listitem>
              <para><code>DataSupplier</code>. If the attribute type is  <link linkend="dataSupplier">DataSupplier</link>, the corresponding instance will be injected.</para>
            </listitem>
            <listitem>
              <para>Any bean defined in the context of a given client block, including:<itemizedlist>
                  <listitem>
                    <para> Middleware  <link linkend="services">services</link> imported by Client</para>
                  </listitem>
                  <listitem>
                    <para><code>ComponentsFactory</code></para>
                  </listitem>
                  <listitem>
                    <para><code>WindowConfig</code></para>
                  </listitem>
                  <listitem>
                    <para><code>ExportDisplay</code></para>
                  </listitem>
                  <listitem>
                    <para><link linkend="background_tasks">BackgroundWorker</link></para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para>If nothing of the mentioned above is appropriate and the controller has  <link linkend="companions">companions</link>, a companion for the current client type will be injected, if the types match. </para>
              <para>It is possible to inject the parameters passed in the map to the <code>init()</code> method into the controller using special annotation <code>@WindowParam</code>. The annotation has a <code>name</code> attribute which contains the parameter name (a key in the map) and an optional required attribute.  If <code>required = true</code> and the map does not contain the corresponding parameter a <code>WARNING</code> message is added to the log.
An example of an injection of a Job-type object passed to the controller’s <code>init()</code> method:
</para>
              <programlisting language="java">@WindowParam(name = &quot;job&quot;, required = true)
protected Job job;</programlisting>
            </listitem>
          </itemizedlist></para>
      </section>
      <section id="companions">
        <title>Controller Companions</title>
        <para>Controller base classes are located in the  <structname>gui </structname><link linkend="app_modules">module</link> of the  <structname>cuba</structname> <link linkend="base_projects">base project</link> and do not contain references to implementation of visual component classes  (<application>Swing</application> or <application>Vaadin</application>). This  allows to use them in both types of clients. Instead, base controller classes implement an additional interface – <code>Window.Wrapper</code> – and delegate execution to the wrapped window.</para>
        <para>At the same time concrete controller classes may be contained in <structname>gui</structname>, <structname>web</structname> or <structname>desktop</structname> modules, depending on screen specifics and client  client  <link linkend="app_tiers">blocks</link> used in the project. If controller is universal and additional functionality is required for different client types it can be implemented in so-called <firstterm>companion classes</firstterm>.</para>
        <para>Companion class is located in client module of the corresponding client type (web or desktop) and implements an interface defined in the controller which uses the companion class. A companion class should be defined in the <code>companions</code> element of the screen XML-descriptor. Controller can retrieve a reference to the companion instance using injection or by invoking <code>getCompanion()</code>, and then pass control to the companion instance when appropriate, e.g. for extended initialization of visual components in a way specific to a given client type.</para>
      </section>
    </section>
  </section>
  <section id="gui_vcl">
    <title>Visual Components Library</title>
    <para><link linkend="gui_components">Components</link></para>
    <para><link linkend="gui_layouts">Containers</link></para>
    <para><link linkend="gui_misc">Miscellaneous</link></para>
    <section id="gui_components">
      <title>Components </title>
      <figure>
        <title>Components Diagram</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/Components_new.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para><code>Component</code> is the parent of all visual components. It contains basic attributes to identify a component and place it within a screen.</para>
      <informaltable frame="none" pgwide="0">
        <tgroup cols="2" colsep="1">
          <colspec colnum="1" colname="c0" colwidth="1*"/>
          <colspec colnum="2" colname="c1" colwidth="4*"/>
          <tbody valign="middle">
            <row>
              <entry>
                <emphasis role="bold">Buttons</emphasis>
              </entry>
              <entry/>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_Button">Button</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/Button.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row valign="middle">
              <entry align="left">
                <link linkend="gui_PopupButton">PopupButton</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/PopupButton.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_LinkButton">LinkButton</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/LinkButton.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry/>
            </row>
            <row>
              <entry>
                <emphasis role="bold">Text</emphasis>
              </entry>
              <entry/>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_Label">Label</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_label.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry/>
            </row>
            <row>
              <entry>
                <emphasis role="bold">Text inputs</emphasis>
              </entry>
              <entry/>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_TextField">TextField</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_textField.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>P<entry>
                <link linkend="gui_PasswordField">PasswordField</link>
              </entry><entry>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_PasswordField.png"/>
                  </imageobject>
                </mediaobject>
              </entry></row>
            <row>M<entry>
                <link linkend="gui_MaskedField">MaskedField</link>
              </entry><entry>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_MaskedField.png"/>
                  </imageobject>
                </mediaobject>
              </entry></row>
            <row>
              <entry>
                <link linkend="gui_TextArea">TextArea</link>
              </entry>
              <entry>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_TextArea.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_RichTextArea">RichTextArea</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_RichTextArea.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry/>
            </row>
            <row>
              <entry>
                <emphasis role="bold">Date inputs</emphasis>
              </entry>
              <entry/>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_DateField">DateField</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_dateField.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_TimeField">TimeField</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_timeField.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry/>
            </row>
            <row>
              <entry>
                <emphasis role="bold">Selects</emphasis>
              </entry>
              <entry/>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_CheckBox">CheckBox</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/CheckBox.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_OptionsGroup">OptionsGroup</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_optionsGroup.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_PickerField">PickerField</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/PickerField.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_LookupField">LookupField</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/LookupField.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_LookupPickerField">LookupPickerField</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/LookupPickerField.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_SearchPickerField">SearchPickerField</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_searchPickerField.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_TwinColumn">TwinColumn</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/TwinColumn.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry/>
            </row>
            <row>
              <entry>
                <emphasis role="bold">Uploads</emphasis>
              </entry>
              <entry/>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_FileUploadField">FileUploadField</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/Upload.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry>
                <link linkend="gui_FileMultiUploadField">FileMultiUploadField</link>
              </entry>
            </row>
            <row>
              <entry/>
            </row>
            <row>
              <entry>
                <emphasis role="bold">Tables and trees</emphasis>
              </entry>
              <entry/>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_Table">Table</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_table.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_GroupTable">GroupTable</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_groupTable.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_TreeTable">TreeTable</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_treeTable.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_Tree">Tree</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_Tree.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry/>
            </row>
            <row>
              <entry>
                <emphasis role="bold">Others</emphasis>
              </entry>
              <entry/>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_FieldGroup">FieldGroup</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_fieldGroup.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_TokenList">TokenList</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_tokenList.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
            <row>
              <entry align="left">
                <link linkend="gui_Filter">Filter</link>
              </entry>
              <entry align="left">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_filter_mini.png"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <section id="gui_Button">
        <title>Button</title>
        <para>A button is a component which performs an action when clicked.</para>
        <para>Component’s XML-name: <sgmltag>button</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_Button_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>Button component is implemented for both  <structname>Web</structname> and <structname>Desktop</structname> clients.</para>
        <para>Buttons can contain a caption, an icon, or both. The figure below shows different button types.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_buttonTypes.png"/>
          </imageobject>
        </mediaobject>
        <para>An example of a button with a tooltip and a caption retrieved from a
            <link linkend="message_packs">localized message pack</link>:
            <programlisting language="xml"><![CDATA[
<button id="textButton" caption="msg://someAction" description="Press me"/>]]></programlisting></para>
        <para>The button’s caption is set using the <link linkend="gui_attr_basic_caption">caption</link> attribute, the tooltip – using the  <link linkend="gui_attr_basic_description">description</link> attribute.</para>
        <para>The  <link linkend="gui_attr_basic_icon">icon</link> attribute defines icon location. Detailed information on recommended icon placement is available in <xref linkend="gui_themes"/> .</para>
        <para>Example of creating a button with an icon:</para>
        <programlisting language="xml">&lt;button id=&quot;iconButton&quot; caption=&quot;&quot; icon=&quot;icons/save.png&quot;/&gt;</programlisting>
        <para id="gui_attr_button_invoke">The button’s main function is to perform an action on a click. Controller method that should be invoked after a click can be defined using   <sgmltag>invoke</sgmltag> attribute. The attribute value should contain name of the controller method satisfying the following conditions:</para>
        <itemizedlist>
          <listitem>
            <para>The method should be  <code>public</code>.</para>
          </listitem>
          <listitem>
            <para>The method should return  <code>void</code>.</para>
          </listitem>
          <listitem>
            <para>The method should not have any arguments, or should have a single argument of <code>Component</code> type. If the method has a  <code>Component</code> argument, then an instance of the invoking button will be passed in it.</para>
          </listitem>
        </itemizedlist>
        <para>Below is the example of a button invoking    <code>someMethod:</code></para>
        <programlisting language="xml">&lt;button invoke=&quot;someMethod&quot; caption=&quot;msg://someButton&quot;/&gt;</programlisting>
        <para>A method named  <code>someMethod</code> should be defined in the screen controller:</para>
        <programlisting language="java">public void someMethod() {
 //some actions
}</programlisting>
        <para id="gui_attr_button_action">The <code>invoke</code> attribute is ignored if <code>action</code> attribute is set. The action attribute contains an   <link linkend="gui_Action">Action</link> name corresponding to the button.</para>
        <para>Example of a button with an  <sgmltag>action</sgmltag>:</para>
        <programlisting language="xml"><![CDATA[<actions>
    <action id="someAction" caption="msg://someAction"/>
</actions>
<layout>
    <button action="someAction"/>
  ]]></programlisting>
        <para>Any action present in the component implementing  <code>Component.ActionsHolder</code> interface can be assigned to a button. This applies to  <link linkend="gui_Table">Table</link>, <link linkend="gui_GroupTable">GroupTable</link>, <link linkend="gui_TreeTable">TreeTable</link>, <link linkend="gui_Tree">Tree</link>. The way of adding components (declaratively in the XML descriptor or programmatically in the controller) is irrelevant. In any case, for using an action, the name of the component and the identifier of the required action  must be specified in the  <code>action</code> attribute, separated by dot. For instance, in the next example the  <code>create</code> action of the <code>coloursTable</code> table is assigned to a button:<programlisting language="xml">&lt;button action=&quot;coloursTable.create&quot;/&gt;</programlisting></para>
        <para>Button actions can be also created programmatically in the screen controller by deriving them from
            <link linkend="baseAction">BaseAction</link> class.</para>
        <para>If an <code>Action</code> instance is defined for a <code>Button</code>, the button will import the following properties from it: <link linkend="gui_attr_basic_caption">caption</link>, <link linkend="gui_attr_basic_icon">icon</link>, <link linkend="gui_attr_basic_enable">enable</link>, <link linkend="gui_attr_basic_visible">visible</link>. <code>caption</code> property will be imported from <code>Action</code> only if it is not set in the <code>Button</code> itself. All other listed <code>Action</code> properties have priority over the <code>Button</code> properties. If <code>Action</code> properties are changed after the <code>Action</code> is set for a <code>Button</code>, then <code>Button</code> properties also change accordingly, i.e. the button listens to the changes in <code>Action</code> properties and the    <code>caption</code> property will change even if it was initially assigned to the button itself.
</para>
        <para><sgmltag>button</sgmltag> attibutes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry align="left">action</entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_icon">icon</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">invoke</entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_BulkEditor">
        <title>Bulk Editor</title>
        <para><code>Bulk Editor</code> – is a component that enables changing attribute values for several entity instances at once. The component is a button, usually added to a <link linkend="gui_Table">table</link> or a <link linkend="gui_Tree">tree</link>, which opens the entity bulk editor on click.  </para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_bulkEdit.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component: <code>bulkEditor</code></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_BulkEditor_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for  <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <para>To enable the use of Bulk Editor, the table or tree must have the  <code>multiselect</code> attribute set to <code>&quot;true&quot;</code>.</para>
        <para>The entity editor is automatically generated based on the defined view (containing the fields of this entity, including references) and the user permissions. System attributes are not displayed in the editor either.</para>
        <para>Entity attributes in the editor are sorted alphabetically. By default, the fields are empty. At screen commit, non-empty attribute values defined in the editor, are set for all the entity instances. </para>
        <para>The editor also allows removing a specific field value for all the instances by setting it to  <code>null</code>. In order to do this, click  <inlinemediaobject>
            <imageobject>
              <imagedata fileref="img/gui_bulkEditorSetNullButton.png"/>
            </imageobject>
          </inlinemediaobject> button next to the field. After that, the field will become non-editable. The field can be unlocked by clicking  <inlinemediaobject>
            <imageobject>
              <imagedata fileref="img/gui_bulkEditorUnlockButton.png"/>
            </imageobject>
          </inlinemediaobject>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_invoiceBulkEdit.png"/>
          </imageobject>
        </mediaobject>
        <para>Example of  <code>bulkEditor</code> use in a table:</para>
        <programlisting language="xml" xml:lang="">&lt;table id=&quot;invoiceTable&quot;
     multiselect=&quot;true&quot;
     width=&quot;100%&quot;&gt;
          &lt;actions&gt;
              &lt;action id=&quot;create&quot;/&gt;
              &lt;action id=&quot;edit&quot;/&gt;
              &lt;action id=&quot;remove&quot;/&gt;
          &lt;/actions&gt;
          &lt;buttonsPanel id=&quot;buttonsPanel&quot;&gt;
              &lt;button id=&quot;createBtn&quot;
                      action=&quot;invoiceTable.create&quot;/&gt;
              &lt;button id=&quot;editBtn&quot;
                      action=&quot;invoiceTable.edit&quot;/&gt;
              &lt;button id=&quot;removeBtn&quot;
                      action=&quot;invoiceTable.remove&quot;/&gt;
              &lt;bulkEditor for=&quot;invoiceTable&quot;
                          exclude=&quot;customer&quot;/&gt;
          &lt;/buttonsPanel&gt;
</programlisting>
        <para id="gui_attr_bulkedit_for">The  <code>for</code> attribute is required. It contains the identifier of a table or a tree; in this case, it is the <code>invoiceTable</code>.</para>
        <para id="gui_attr_bulkedit_exclude">The  <code>exclude</code> attribute allows excluding some fields explicitly from the list of attributes available for editing. Attribute names are separated by commas.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_TableBulkEdit.png"/>
          </imageobject>
        </mediaobject>
        <para>The  <code>BulkEditor</code> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_bulkedit_exclude">exclude</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_tokenList_lookup_openType">openType</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_bulkedit_for">for</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_icon">icon</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_CheckBox">
        <title>CheckBox</title>
        <para><code>CheckBox</code>  is a component with two states: checked, unchecked.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/CheckBox.png"/>
          </imageobject>
        </mediaobject>
        <para>Component’s XML-name: <sgmltag>checkBox</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_checkBox_dia.png"/>
          </imageobject>
        </mediaobject>
        <para><code>CheckBox</code> component is implemented for both  <structname>Web</structname> and  <structname>Desktop Client</structname>s.</para>
        <para>An example of a checkbox with a label retrieved from a  <link linkend="message_packs">localized messages pack</link>:</para>
        <programlisting language="xml">&lt;checkBox id=&quot;accessField&quot; caption=&quot;msg://accessFieldCaption&quot;/&gt;</programlisting>
        <para>Checking / unchecking of the checkbox changes its value: <code>Boolean.TRUE</code> or <code>Boolean.FALSE.</code>The value can be retrieved using   <code>getValue()</code> method and set using  <code>setValue()</code>. Submitting <code>null</code> using <code>setValue()</code> will change the value to <code>Boolean.FALSE</code> and uncheck the checkbox.</para>
        <para>Changes of checkbox value, as well as of any other components implementing the <code>Field</code> interface, can be tracked using a   <code>ValueListener</code>. For example:</para>
        <programlisting language="java">@Inject
private CheckBox accessField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  accessField.addListener(new ValueListener&lt;Object&gt;() {
      @Override
      public void valueChanged(Object source, String property, Object prevValue, Object value) {
          if (Boolean.TRUE.equals(value)) {
              showNotification(&quot;set&quot;, NotificationType.HUMANIZED);
          } else {
              showNotification(&quot;not set&quot;, NotificationType.HUMANIZED);
          }
      }
  });
}</programlisting>
        <para>The <link linkend="gui_attr_basic_datasource">datasource</link> and <link linkend="gui_attr_basic_property">property</link> attributes should be used to create a checkbox associated with data.</para>
        <programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;customerDs&quot; class=&quot;com.sample.sales.entity.Customer&quot; view=&quot;_local&quot;/&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;checkBox datasource=&quot;customerDs&quot; property=&quot;active&quot;/&gt;</programlisting>
        <para>According to the example the screen includes the description of  <code>customerDs</code> <link linkend="datasources">data source</link>  for a <code>Customer</code> entity with <code>active</code> attribute. The <code>datasource</code> attribute of the <code>checkBox</code> component should contain a reference to a data source; the <code>property</code> attribute should contain the name of an entity attribute which value should be displayed in the checkbox. The attribute should have  <code>Boolean</code> type. If the attribute value is  <code>null</code> the checkbox is unchecked.</para>
        <para><sgmltag>checkBox</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_property">property</link>
                </entry><entry/></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
                <entry/>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
                <entry/>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
                <entry/>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_DateField">
        <title>DateField</title>
        <para><code>DateField</code> is a field to display and enter date and time. It is an input field, inside which there is a button with a drop-down calendar. To the right, there is a time field.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_dateFieldSimple.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component: <sgmltag>dateField</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_dateField_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The  <code>DateField</code> component is implemented for  <structname>Web Client</structname> and  <structname>Desktop Client</structname>.<itemizedlist>
            <listitem>
              <para>To create a date field associated with data, you should use the  <link linkend="gui_attr_basic_datasource">datasource</link> and <link linkend="gui_attr_basic_property">property</link> attributes:</para>
              <programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;orderDs&quot; class=&quot;com.sample.sales.entity.Order&quot; view=&quot;_local&quot;/&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot;/&gt;</programlisting>
              <para>In the example above, the screen has an  <literal>orderDs</literal> data source for an Order  entity, which has the <code>date</code> property. In the date component, you should specify a link to a data source as  <link linkend="gui_attr_basic_datasource">datasource</link> and a name of an entity attribute (which value should be displayed in the field) as  <link linkend="gui_attr_basic_property">property</link>.</para>
            </listitem>
            <listitem>
              <para>If the field is associated with an entity attribute, it will automatically take the appropriate form:<itemizedlist>
                  <listitem>
                    <para>If the attribute has the  <code>java.sql.Date</code> type or the <code>@Temporal(TemporalType.DATE)</code> annotation is specified, the time field will not be displayed. The date format is defined by the  <code>date</code> <link linkend="datatype">datatype</link> and is specified in the  <link linkend="main_message_pack">main localized message pack</link> in the <code>dateFormat</code> key.</para>
                  </listitem>
                  <listitem>
                    <para>Otherwise, the time field with hours and minutes will be displayed. The time format is defined by the   <code>time</code> <link linkend="datatype">datatype</link> and is specified in the main localized message pack in the  <code>timeFormat</code> key.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para id="gui_attr_dateField_dateFormat">You can change the date and time format using the  <sgmltag>dateFormat</sgmltag> attribute. An attribute value can be either a format string itself or a key in a message pack (if the value starts with  <code>msg://</code>).</para>
              <para>The format is defined by rules of the  <code>SimpleDateFormat</code> class (<ulink url="http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html">http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html</ulink>). If there are no <code>H</code> or <code>h</code> characters in the format, the time field will not be displayed.</para>
              <programlisting language="xml">&lt;dateField dateFormat=&quot;MM/yy&quot; caption=&quot;msg://monthOnlyDateField&quot;/&gt;</programlisting>
              <mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="img/gui_dateField_format.png"/>
                </imageobject>
              </mediaobject>
            </listitem>
            <listitem><para id="gui_attr_dateField_resolution">Date and time accuracy can be defined using a <sgmltag>resolution</sgmltag> attribute. An attribute value should match the <code>DateField.Resolution</code> enumeration − <literal>SEC</literal>, <literal>MIN</literal>, <literal>HOUR</literal>, <literal>DAY</literal>, <literal>MONTH</literal>, <literal>YEAR</literal>. Default is  <code>MIN</code>, i.e., to within a minute.</para><para>If  <code>resolution=&quot;DAY&quot;</code> and  <sgmltag>dateFormat</sgmltag> is not specified, the format will be taken from one specified in the  <link linkend="main_message_pack">main message pack</link> with the  <sgmltag>dateFormat</sgmltag> key.</para><para>If  <code>resolution=&quot;MIN&quot;</code> and  <sgmltag>dateFormat</sgmltag> is not specified, the format will be taken from one specified in the main message pack with the  <sgmltag>dateTimeFormat</sgmltag> key.</para>Below is a field definition for entering a date up to within a month.<programlisting language="xml">&lt;dateField resolution=&quot;MONTH&quot; caption=&quot;msg://monthOnlyDateField&quot;/&gt;</programlisting><mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="img/gui_dateField_resolution.png"/>
                </imageobject>
              </mediaobject></listitem>
            <listitem>
                <para><code>DateField</code> can perform timestamp value conversions between server and user time
                    zones if the user's <link linkend="timeZone">time zone</link> is set by <code>setTimeZone()</code>
                    method. The time zone is assigned automatically from the current <link linkend="userSession">user session</link>
                    when the component is bound to an entity attribute of the timestamp type. If the component is not
                    bound to such attribute, you can call <code>setTimeZone()</code> in the screen controller to make
                    the <code>DateField</code> perform required conversions.</para>
            </listitem>
          </itemizedlist>.</para>
        <para><sgmltag>dateField</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry><entry>
                  <link linkend="gui_attr_dateField_resolution">resolution</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_dateField_dateFormat">dateFormat</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>dateField</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_Embedded">
        <title>Embedded</title>
        <para><code>Embedded</code> component is intended for displaying images and embedding optional web pages into the screen.</para>
        <para>XML name of the component:  <sgmltag>embedded</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_Embedded_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for <structname>Web Client</structname> and <structname>Desktop Client</structname>. <structname>Desktop Client</structname> supports image display only.</para>
        <para>Below is an example of using the component to display an image from a file located in   <link linkend="file_storage">FileStorage</link>. <itemizedlist>
            <listitem>
              <para>Declare the component in an XML screen descriptor:<programlisting language="xml">&lt;groupBox caption=&quot;Embedded&quot; spacing=&quot;true&quot;
        height=&quot;250px&quot; width=&quot;250px&quot; expand=&quot;embedded&quot;&gt;
  &lt;embedded id=&quot;embedded&quot; width=&quot;100%&quot;
            align=&quot;MIDDLE_CENTER&quot;/&gt;
&lt;/groupBox&gt;</programlisting></para>
            </listitem>
            <listitem>
              <para>In a screen controller, inject the component itself, and the  <code>FileStorageService</code> interface. In  <code>init()</code> method, get the <code>FileDescriptor</code> passed from the  calling code, upload the corresponding file as a byte array, create a  <code>ByteArrayInputStream</code> for it, and pass it to the  <code>setSource()</code> method of the component:<programlisting language="java">@Inject
private Embedded embedded;

@Inject
private FileStorageService fileStorageService;

@Override
public void init(Map&lt;String, Object&gt; params) {
  FileDescriptor imageFile = (FileDescriptor) params.get(&quot;imageFile&quot;);

  byte[] bytes = null;
  if (imageFile != null) {
      try {
          bytes = fileStorageService.loadFile(imageFile);
      } catch (FileStorageException e) {
          showNotification(&quot;Unable to load image file&quot;, NotificationType.HUMANIZED);
      }
  }
  if (bytes != null) {
      embedded.setSource(imageFile.getName(), new ByteArrayInputStream(bytes));
      embedded.setType(Embedded.Type.IMAGE);
  } else {
      embedded.setVisible(false);
  }
}</programlisting></para>
            </listitem>
          </itemizedlist></para>
        <para>Web Client allows image output from any files available to the  Web Client block. Define the resource files directory in <link linkend="cuba.web.resourcesRoot">cuba.web.resourcesRoot</link> application property, and specify the name of the file inside this directory for the  <code>Embedded</code> component<programlisting language="java">embedded.setSource(&quot;my-logo.png&quot;);</programlisting></para>
        <para>Pass the URL to the component to embed an external web page into the screen:<programlisting language="java">try {
  embedded.setSource(new URL(&quot;http://www.cuba-platform.com&quot;));
} catch (MalformedURLException e) {
  throw new RuntimeException(e);
}</programlisting></para>
        <para><code>embedded</code> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_FieldGroup">
        <title>FieldGroup</title>
        <para><code>FieldGroup</code> is intended for the joint display and editing of multiple entity attributes. </para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_fieldGroup.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component: <sgmltag>fieldGroup</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_FieldGroup_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <para>Below is an example of describing a group of fields in an XML screen descriptor:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;orderDs&quot;
              class=&quot;com.sample.sales.entity.Order&quot;
              view=&quot;orderWithCustomer&quot;&gt;
  &lt;/datasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;fieldGroup id=&quot;orderFieldGroup&quot; datasource=&quot;orderDs&quot; width=&quot;250px&quot;&gt;
      &lt;field id=&quot;date&quot;/&gt;
      &lt;field id=&quot;customer&quot;/&gt;
      &lt;field id=&quot;amount&quot;/&gt;
  &lt;/fieldGroup&gt;</programlisting></para>
        <para>In the example above,  <code>dsContext</code> defines an   <code>orderDs</code> <link linkend="datasources">data source</link>, which contains a single  instance of the  <code>Order</code> entity. For the  <code>fieldGroup</code> component, you should specify a data source in  <code>datasource</code> attribute. Entity attributes containing in the data source, which you need to display, should be specified in <code>field</code> elements.</para>
        <para><code>fieldGroup</code> elements:<itemizedlist>
            <listitem>
              <para><code>column</code> – optional element that allows to position fields in multiple columns. For this purpose,  <code>field</code> elements should be placed not immediately within  <code>fieldGroup</code>, but within its  <code>column</code>. For example:<programlisting language="xml">&lt;fieldGroup id=&quot;orderFieldGroup&quot; datasource=&quot;orderDs&quot; width=&quot;100%&quot;&gt;
  &lt;column width=&quot;250px&quot;&gt;
      &lt;field id=&quot;num&quot;/&gt;
      &lt;field id=&quot;date&quot;/&gt;
      &lt;field id=&quot;amount&quot;/&gt;
  &lt;/column&gt;
  &lt;column width=&quot;400px&quot;&gt;
      &lt;field id=&quot;customer&quot;/&gt;
      &lt;field id=&quot;info&quot;/&gt;
  &lt;/column&gt;
&lt;/fieldGroup&gt;</programlisting></para>
              <para>In this case, fields will be arranged in two columns; the first column will contain all fields with the width of  <code>250px</code>, the second one with the width of  <code>400px</code>.</para>
              <para><code>column</code> may have the following attributes:<itemizedlist>
                  <listitem id="gui_attr_fieldGroup_width">
                    <para><code>width</code> – specifies the field width of a column. By default, fields have the width of <code>200px</code>. In this attribute, the width can be specified both in pixels and in percentage of the total horizontal width of the column.</para>
                  </listitem>
                  <listitem id="gui_attr_fieldGroup_flex">
                    <para><code>flex</code> – a number, which indicates the degree of horizontal change in the overall size of the column relative to other columns as a result of changing the entire width of  <code>fieldGroup</code>. For example, you can specify  <code>flex=1</code> for a column, and  <code>flex=3</code> for another one. </para>
                  </listitem>
                  <listitem>
                    <para><code>id</code> – an optional column identifier, which allows to refer to it in case of  <link linkend="screen_extension">screen extension</link>.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para><code>field</code> – main component element. It describes one component field. </para>
              <para>Attributes of  <code>field</code>:<itemizedlist>
                  <listitem id="gui_attr_fieldGroup_field_id">
                    <para><code>id</code> – required attribute; it should contain either an entity attribute name, which is displayed in the field, or an arbitrary unique identifier of a programmatically defined field. In the latter case,  <code>field</code> should have  <code>custom=&quot;true&quot;</code> as well (see below).</para>
                  </listitem>
                  <listitem id="gui_attr_fieldGroup_field_caption">
                    <para><code>caption</code> − allows to specify a field caption. If not specified, an  <link linkend="entity_localization">entity attribute localized name</link> will be displayed.</para>
                  </listitem>
                  <listitem>
                    <para><code>visible</code> − allows to hide the field together with the caption.</para>
                  </listitem>
                  <listitem id="gui_attr_fieldGroup_field_datasource">
                    <para><code>datasource</code> − allows to specify a  <link linkend="datasources">data source</link> for the field, other than specified for the entire  <code>fieldGroup</code> component. Thus, attributes of different entities can be displayed in a field group.</para>
                  </listitem>
                  <listitem>
                    <para><code>optionsDatasource</code> specifies a name of a  <link linkend="datasources">data source</link>, used to create a list of options. You can specify this attribute for a field related to a reference entity attribute. By default, the selection of a related entity is made through a selection screen. If  <code>optionsDatasource</code> is specified, you can select the related entity from a drop-down list of options. Actually, specifying  <code>optionsDatasource</code> will lead to the fact that <link linkend="gui_LookupPickerField">LookupPickerField</link> will be used in the field instead of     <link linkend="gui_PickerField">PickerField</link>.</para>
                  </listitem>
                  <listitem>
                    <para><code>width</code> − allows to specify the field width excluding caption. By default, the field width will be  <code>200px</code>. The width can be specified both in pixels and in percentage of the total horizontal width of the column. To specify the width of all fields simultaneously, you can use the  <code>width</code> attribute of  <code>column</code>, described above.</para>
                  </listitem>
                  <listitem id="gui_attr_fieldGroup_field_custom">
                    <para><code>custom</code> – if set to <code>true</code>, it means that a field identifier does not refer to an entity attribute, and a component, which is in the field, will be set programmatically using <code>addCustomField()</code> method of   <code>FieldGroup</code> (see below).</para>
                  </listitem>
                  <listitem id = "gui_attr_fieldGroup_link">
                      <para><code>link</code> - if set to <code>true</code>, allows displaying a link to an entity editor instead of an entity picker field (supported for <structname>Web Client</structname> only). Such behaviour may be required when the user should be able to view the related entity, but should not change the relationship.</para>
                  </listitem>
                  <listitem id = "gui_attr_fieldGroup_linkScreen">
                      <para><code>linkScreen</code> - contains the identifier of the screen that is opened by clicking the link, enabled in the <code>link</code> attribute.</para>
                  </listitem>
                  <listitem id = "gui_attr_fieldGroup_linkScreenOpenType">
                      <para><code>linkScreenOpenType</code> - sets the screen opening mode (<code>THIS_TAB</code>, <code>NEW_TAB</code> or  <code>DIALOG</code>).</para>
                  </listitem>
                  <listitem id = "gui_attr_fieldGroup_linkInvoke">
                      <para><code>linkInvoke</code> - contains the controller method to be invoked instead of opening the screen.</para>
                  </listitem>
                </itemizedlist></para>
              <para>The following attributes of <code>field</code> can be applied depending on an entity attribute type, which is displayed in the field:<itemizedlist>
                  <listitem>
                    <para>If you specify a value of the <sgmltag>mask</sgmltag> attribute for a text entity attribute, <link linkend="gui_MaskedField">MaskedField</link> with an appropriate mask will be used instead of  <link linkend="gui_TextField">TextField</link>. In this case, you can also specify the <code>valueMode</code> attribute.</para>
                  </listitem>
                  <listitem id="gui_attr_fieldGroup_field_rows">
                    <para>If you specify a value of the  <sgmltag>rows</sgmltag> attribute for a text entity attribute, <link linkend="gui_TextArea">TextArea</link> with an appropriate number of rows will be used instead of  <link linkend="gui_TextField">TextField</link>. In this case, you can also specify the  <code>cols</code> attribute.</para>
                  </listitem>
                  <listitem>
                    <para>For a text entity attribute, you can specify the  <code>maxLength</code> attribute similarly to one described for  <link linkend="gui_TextField">TextField</link>.</para>
                  </listitem>
                  <listitem>
                    <para>For an entity attribute of the <code>date</code> or  <code>dateTime</code> type, you can specify the  <code>dateFormat</code> and  <code>resolution</code> for the parameterization of the  <link linkend="gui_DateField">DateField</link> component located in the field.</para>
                  </listitem>
                  <listitem>
                    <para>For an entity attribute of the  <code>time</code> type, you can specify the  <code>showSeconds</code> attribute for the parameterization of the  <link linkend="gui_TimeField">TimeField</link> component located in the field.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </itemizedlist></para>
        <para><code>fieldGroup</code> attributes:<itemizedlist>
            <listitem id="gui_attr_fieldGroup_border">
              <para>The  <sgmltag>border</sgmltag> attribute can be set either to  <literal>hidden</literal> or  <literal>visible</literal>. Default is  <code>hidden</code>. If set to  <literal>visible</literal>, the  <sgmltag>fieldGroup</sgmltag> component is highlighted with a border. In the web implementation of the component, displaying a border is done by adding the <code>cuba-fieldgroup-border</code> CSS class. </para>
            </listitem>
          </itemizedlist></para>
        <para>Methods of the  <code>FieldGroup</code> interface:<itemizedlist>
            <listitem>
              <para><code>addCustomField()</code> is used together with the  <code>custom=&quot;true&quot;</code> attribute of  <code>field</code> and it allows you to set your own field view. It takes two parameters: field identifier specified in the  <code>id</code> attribute of  <code>field</code> and the implementation of the  <code>FieldGroup.CustomFieldGenerator</code> interface.</para>
              <para><code>generateField()</code> of the  <code>CustomFieldGenerator</code> interface is invoked by  <code>FieldGroup</code>. A  <link linkend="datasources">data source</link> and field identifier, for which this generator is registered, are passed into the method. The method should return a visual component (or container), which will be displayed in the field.</para>
              <para>Example:<programlisting language="java">@Inject
protected FieldGroup fieldGroup;

@Inject
protected ComponentsFactory componentsFactory;

@Override
public void init(Map&lt;String, Object&gt; params) {
  fieldGroup.addCustomField(&quot;password&quot;, new FieldGroup.CustomFieldGenerator() {
      @Override
      public Component generateField(Datasource datasource, String propertyId) {
          PasswordField passwordField = componentsFactory.createComponent(PasswordField.NAME);
          passwordField.setDatasource(datasource, propertyId);
          return passwordField;
      }
  });
}</programlisting></para>
            </listitem>
            <listitem>
              <para><code>getFieldComponent()</code> returns a visual component, which is located in a field with the specified identifier. This may be required for additional component parameterization, which is not available through XML attributes of  <code>field</code> described above.</para>
              <para>To obtain a reference to a field component in a screen controller, you can use <link linkend="screen_controller_injection">injection</link> instead of the explicit invocation of <code>getFieldComponent()</code>. To do this, use the  <code>@Named</code> annotation with the indication of an identifier of  <code>fieldGroup</code> and a field identifier after a dot. </para>
              <para>For example, in the field to select a related entity, you can add an action to open an instance and remove the field cleaning action as follows:<programlisting language="xml">&lt;fieldGroup id=&quot;orderFieldGroup&quot; datasource=&quot;orderDs&quot;&gt;
  &lt;field id=&quot;date&quot;/&gt;
  &lt;field id=&quot;customer&quot;/&gt;
  &lt;field id=&quot;amount&quot;/&gt;
&lt;/fieldGroup&gt;</programlisting><programlisting language="java">@Named(&quot;orderFieldGroup.customer&quot;)
protected PickerField customerField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  customerField.addOpenAction();
  customerField.removeAction(customerField.getAction(PickerField.ClearAction.NAME));
}</programlisting></para>
              <para>To use  <code>getFieldComponent()</code> or to inject field components, you need to know which component type is located in the field. The table below shows the matching of entity attribute types and components created for them:<informaltable frame="all">
                  <tgroup cols="3">
                    <colspec colnum="1" colname="c1" align="left"/>
                    <colspec colnum="2" colname="c2" align="left"/>
                    <colspec colnum="3" colname="c3" align="left"/>
                    <thead>
                      <row>
                        <entry>Entity attribute type</entry>
                        <entry>Additional conditions</entry>
                        <entry>Field component type</entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry morerows="1">Related Entity</entry>
                        <entry><code>optionsDatasource</code> is specified</entry>
                        <entry>
                          <link linkend="gui_LookupPickerField">LookupPickerField</link>
                        </entry>
                      </row>
                      <row>
                        <entry/>
                        <entry>
                          <link linkend="gui_PickerField">PickerField</link>
                        </entry>
                      </row>
                      <row>
                        <entry>Enumeration (<code>enum</code>)</entry>
                        <entry/>
                        <entry>
                          <link linkend="gui_LookupField">LookupField</link>
                        </entry>
                      </row>
                      <row>
                        <entry morerows="2">
                          <code>string</code>
                        </entry>
                        <entry><code>mask</code> is specified</entry>
                        <entry>
                          <link linkend="gui_MaskedField">MaskedField</link>
                        </entry>
                      </row>
                      <row>
                        <entry><code>rows</code> is specified</entry>
                        <entry>
                          <link linkend="gui_TextArea">TextArea</link>
                        </entry>
                      </row>
                      <row>
                        <entry/>
                        <entry>
                          <link linkend="gui_TextField">TextField</link>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <code>boolean</code>
                        </entry>
                        <entry/>
                        <entry>
                          <link linkend="gui_CheckBox">CheckBox</link>
                        </entry>
                      </row>
                      <row>
                        <entry><code>date</code>, <code>dateTime</code></entry>
                        <entry/>
                        <entry>
                          <link linkend="gui_DateField">DateField</link>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <code>time</code>
                        </entry>
                        <entry/>
                        <entry>
                          <link linkend="gui_TimeField">TimeField</link>
                        </entry>
                      </row>
                      <row>
                        <entry><code>int</code>, <code>long</code>, <code>double</code>, <code>decimal</code></entry>
                        <entry/>
                        <entry>
                          <link linkend="gui_TextField">TextField</link>
                        </entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable></para>
            </listitem>
          </itemizedlist></para>
        <para>All <sgmltag>fieldGroup</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_fieldGroup_border">border</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para>All <code>field</code> attributes:</para>
          <informaltable frame="none" pgwide="0" align="left">
              <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
                  <row><entry align="left">
                      <link linkend="gui_attr_fieldGroup_field_caption">caption</link>
                  </entry>editable<entry align="left">
                      <link linkend="gui_attr_basic_description">description</link>
                  </entry><entry>
                      <link linkend="gui_attr_fieldGroup_linkScreen">linkScreen</link>
                  </entry><entry>
                      <link linkend="gui_attr_dateField_resolution">resolution</link>
                  </entry></row>
                  <row>
                      <entry>
                          <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                      </entry>
                      <entry align="left">
                          <link linkend="gui_attr_basic_editable">editable</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_fieldGroup_linkScreenOpenType">linkScreenOpenType</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_fieldGroup_field_rows">rows</link>
                      </entry>
                  </row>
                  <row>
                      <entry align="left">
                          <link linkend="gui_attr_textArea_cols_rows">cols</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_basic_enable">enable</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_textField_maxLength">maxLength</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_timeField_showSeconds">showSeconds</link>
                      </entry>
                  </row>
                  <row>
                      <entry align="left">
                          <link linkend="gui_attr_fieldGroup_field_custom">custom</link>
                      </entry>
                      <entry align="left">
                          <link linkend="gui_attr_fieldGroup_field_id">id</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_basic_visible">visible</link>
                      </entry>
                  </row>
                  <row>
                      <entry align="left">
                          <link linkend="gui_attr_dateField_dateFormat">dateFormat</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_fieldGroup_link">link</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_basic_required">required</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_basic_width">width</link>
                      </entry>
                  </row>
                  <row>
                      <entry align="left">
                          <link linkend="gui_attr_fieldGroup_field_datasource">datasource</link>
                      </entry>
                      <entry align="left">
                          <link linkend="gui_attr_fieldGroup_linkInvoke">linkInvoke</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                      </entry>
                  </row>
              </tbody></tgroup>
          </informaltable>
        <para><code>field</code> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para><code>column</code> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_fieldGroup_flex">flex</link>
                </entry>editable</row>
              <row>
                <entry>
                  <link linkend="gui_attr_fieldGroup_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_FileMultiUploadField"><title>FileMultiUploadField</title><para>The  <code>FileMultiUploadField</code> component allows a user to upload files to a server. The component is a button; when it is clicked, the screen will show a standard OS file picker window where you can select multiple files for upload.</para><mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_multipleUpload.png"/>
          </imageobject>
        </mediaobject><para>XML name of the component: <sgmltag>multiUpload</sgmltag>.</para><mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_FileMultiUploadField_dia.png"/>
          </imageobject>
        </mediaobject><para>The component is implemented for  <structname>Web Client</structname> and <structname>Desktop Client</structname>. For the operation of component web version, a browser should support the  <productname>Flash</productname> technology.</para>Below is an example of using the component.<itemizedlist>
          <listitem>
            <para>Declare the component in an XML screen descriptor:<programlisting language="xml">&lt;multiUpload id=&quot;multiUploadField&quot; caption=&quot;msg://upload&quot;/&gt;</programlisting></para>
          </listitem>
          <listitem>
            <para>In the screen controller, inject the component itself, and the <link linkend="file_upload">FileUploadingAPI</link> and  <link linkend="dataSupplier">DataSupplier</link> interfaces. Then, in <code>init()</code> add a listener to the component, which will react to successful upload events or errors:<programlisting language="java">@Inject
protected FileMultiUploadField multiUploadField;

@Inject
protected FileUploadingAPI fileUploading;

@Inject
protected DataSupplier dataSupplier;

@Override
public void init(Map&lt;String, Object&gt; params) {
  multiUploadField.addListener(new FileMultiUploadField.UploadListener() {
      @Override
      public void queueUploadComplete() {
          Map&lt;UUID, String&gt; uploadMap = multiUploadField.getUploadsMap();
          for (Map.Entry&lt;UUID, String&gt; entry : uploadMap.entrySet()) {
              UUID fileId = entry.getKey();
              String fileName = entry.getValue();
              FileDescriptor fd = fileUploading.getFileDescriptor(fileId, fileName);
              // save file to FileStorage
              try {
                  fileUploading.putFileIntoStorage(fileId, fd);
              } catch (FileStorageException e) {
                  new RuntimeException(e);
              }
              // save file descriptor to database
              dataSupplier.commit(fd, null);
          }
          multiUploadField.getUploadsMap().clear();
      }
  });
}</programlisting></para>
            <para>The component will invoke  <code>queueUploadComplete()</code> after uploading all selected files to a temporary storage of the client  <link linkend="app_tiers">tier</link>. At this point, by invoking <code>getUploadsMap()</code> you can get a map of temporary storage file identifiers to file names. Then, for each file, a corresponding <code>FileDescriptor</code> object is created based on this data. <code>com.haulmont.cuba.core.entity.FileDescriptor</code> (do not confuse with <code>java.io.FileDescriptor</code>) is a persistent entity, which uniquely identifies an uploaded file and then is used to download the file from the system.</para>
            <para><code>FileUploadingAPI.putFileIntoStorage()</code> is used to move the uploaded file from the temporary client storage to <link linkend="file_storage">FileStorage</link>. Parameters of this method are temporary storage file identifier and the  <code>FileDescriptor</code> object. </para>
            <para>After uploading the file to  <code>FileStorage</code>, the  <code>FileDescriptor</code> instance is saved in a database by invoking <code>DataSupplier.commit()</code>. The saved instance returned by this method can be set to an attribute of an entity related to this file. In this case,  <code>FileDescriptor</code> is simply stored in the database and gives access to the file through the <guimenu>Administration</guimenu> -&gt; <guimenu>External Files</guimenu> screen.</para>
            <para>After processing, the list of files should be cleared via the <code>clearUploads()</code> method  in order to prepare for further uploads. </para>
          </listitem>
          <listitem>
            <para>Maximum upload size is determined by the  <link linkend="cuba.client.maxUploadSizeMb">cuba.client.maxUploadSizeMb</link> application property and is equal to 20Mb by default. If a user selects a file of a larger size, a corresponding message will be displayed and the upload will be interrupted.</para>
          </listitem>
        </itemizedlist><para><sgmltag>multiUpload</sgmltag> attributes:</para><informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable></section>
      <section id="gui_FileUploadField"><title>FileUploadField</title><para>The  <code>FileUploadField</code> component allows a user to upload files to a server. The component is a button; when it is clicked, the screen will show a standard OS file picker window where you can select one file. To allow a user to upload multiple files, use <link linkend="gui_FileMultiUploadField">FileMultiUploadField</link>.</para><mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_upload.png"/>
          </imageobject>
        </mediaobject><para>XML name of the component:  <sgmltag>upload</sgmltag>.</para><mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_FileUploadField_dia.png"/>
          </imageobject>
        </mediaobject><para>The component is implemented for  <structname>Web Client</structname> and  <structname>Desktop Client</structname>. </para>Below is an example of using the component.<itemizedlist>
          <listitem>
            <para>Declare the component in an XML screen descriptor:<programlisting language="xml">&lt;upload id=&quot;uploadField&quot; caption=&quot;msg://upload&quot;/&gt;</programlisting></para>
          </listitem>
          <listitem>
            <para>In the screen controller, inject the component itself, and the  <link linkend="file_upload">FileUploadingAPI</link> and  <link linkend="dataSupplier">DataSupplier</link> interfaces. Then, in  <code>init()</code> add a listener to the component, which will react on successful upload events or errors:<programlisting language="java">@Inject
protected FileUploadField uploadField;

@Inject
protected FileUploadingAPI fileUploading;

@Inject
protected DataSupplier dataSupplier;

@Override
public void init(Map&lt;String, Object&gt; params) {
  uploadField.addListener(new FileUploadField.ListenerAdapter() {
      @Override
      public void uploadSucceeded(Event event) {
          FileDescriptor fd = uploadField.getFileDescriptor();
          try {
              // save file to FileStorage
              fileUploading.putFileIntoStorage(uploadField.getFileId(), fd);
          } catch (FileStorageException e) {
              throw new RuntimeException(e);
          }
          // save file descriptor to database
          dataSupplier.commit(fd, null);

          showNotification(&quot;File uploaded: &quot; + uploadField.getFileName(), NotificationType.HUMANIZED);
      }

      @Override
      public void uploadFailed(Event event) {
          showNotification(&quot;File upload error&quot;, NotificationType.HUMANIZED);
      }
  });
}</programlisting></para>
            <para>The component will invoke <code>uploadSucceeded()</code> after uploading the file to a temporary storage of the client  <link linkend="app_tiers">tier</link>. At this point, you can get component’s <code>FileDescriptor</code> object, which corresponds to the uploaded file.  <code>com.haulmont.cuba.core.entity.FileDescriptor</code> (do not confuse with  <code>java.io.FileDescriptor</code>) is a persistent entity, which uniquely identifies an uploaded file and then is used to download the file from the system.</para>
            <para><code>FileUploadingAPI.putFileIntoStorage()</code> method is used to move the uploaded file from the temporary client level storage to  <link linkend="file_storage">FileStorage</link>. Parameters of this method are temporary storage file identifier and the  <code>FileDescriptor</code> object. Both of these parameters are provided by  <code>FileUploadField</code>.</para>
            <para>After uploading the file to <code>FileStorage</code> the <code>FileDescriptor</code> instance is saved in a database by invoking <code>DataSupplier.commit()</code>. The saved instance returned by this method can be set to an attribute of an entity related to this file. In this case,  <code>FileDescriptor</code> is simply stored in the database and gives access to the file through the  <guimenu>Administration</guimenu> -&gt; <guimenu>External Files</guimenu> screen.</para>
            <para><code>uploadFailed()</code> will be invoked by the  <code>FileUploadField</code> component if an error occurs when uploading a file to the temporary storage of the client level.</para>
          </listitem>
          <listitem>
            <para>Maximum upload size is determined by the <link linkend="cuba.client.maxUploadSizeMb">cuba.client.maxUploadSizeMb</link> application property and is equal to 20Mb by default. If a user selects a file of a larger size, a corresponding message will be displayed and the upload will be interrupted.</para>
          </listitem>
        </itemizedlist><para><sgmltag>upload</sgmltag> attributes:</para><informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable></section>
      <section id="gui_Filter">
        <title>Filter</title>
        <para>The <code>Filter</code> component is a versatile tool for filtering lists of entities, which are extracted from a database to display in tabular form. The component enables quick data filtering by arbitrary condition sets, as well as creating filters for repeated use.</para>
        <para><code>Filter</code> should be connected to the <link linkend="datasources">collectionDatasource</link> containing a JPQL <link linkend="datasource_query">query</link>. The principle of its operation is based on the modification of this query in accordance with criteria specified by the user. Thus, filtering is done at the database level on the execution of a query translated from JPQL to SQL, and only selected data are loaded to the Middleware and Client <link linkend="app_tiers">tiers</link>.</para>
        <section><title>Using a Filter</title>
            <para>A typical filter is shown below:</para>
            <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/gui_filter_descr.png"/>
            </imageobject>
          </mediaobject>
            <para>By default, the component is in quick filter mode. This means that a user can add a set of single-use conditions for one-time data search. After the screen is closed, the conditions will disappear.</para>
            <para>To create a quick filter, click <guibutton>Add search condition</guibutton> link. The condition selection screen will be displayed:</para>
            <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/gui_filter_conditions.png"/>
            </imageobject>
          </mediaobject>
            <para>Possible condition types are described below:<itemizedlist>
                <listitem>
                    <para><guilabel>Properties</guilabel> – attributes of this entity and related entities. Only persistent attributes are displayed. And they should either be explicitly set in the  <sgmltag>property</sgmltag> element of a filter XML descriptor, or comply with the rules specified in the <sgmltag>properties</sgmltag> element (see below).</para>
                </listitem>
                <listitem>
                    <para><guilabel>Custom conditions</guilabel> – conditions specified by a developer in  <code>custom</code> elements of a filter XML descriptor.</para>
                </listitem>
                <listitem>
                    <para><guilabel>Create new...</guilabel> – allows a new arbitrary JPQL condition to be created. This option is available to the user who has specific <code>cuba.gui.filter.customConditions</code> <link linkend="permissions">permission</link>.</para>
                </listitem>
            </itemizedlist></para>
            <para>Selected conditions are displayed at the top of the filter panel. The <inlinemediaobject><imageobject><imagedata fileref="img/gui_filter_remove_condition.png"/></imageobject></inlinemediaobject> icon will appear next to each condition field, allowing them to be removed from set.</para>
            <para>Quick filters can be saved to keep them for further re-use. In order to save a quick filter, click the filter settings icon, select <guibutton>Save/Save as</guibutton> and provide the new filter name in the popup dialog:</para>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="img/gui_filter_name.png"/>
                </imageobject>
            </mediaobject>
            <para>After that, the filter will be saved in the drop-down menu of the <guibutton>Search</guibutton> button.</para>
            <para>The <guimenuitem>Reset filter</guimenuitem> option allows you to reset the filter and remove all the current search conditions.</para>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="img/gui_filter_reset.png"/>
                </imageobject>
            </mediaobject>
            <para>The filter settings popup button provides a list of options for filter management:</para>
            <itemizedlist>
            <listitem><para><guimenuitem>Save</guimenuitem> – save changes to current filter.</para></listitem>
            <listitem><para><guimenuitem>Save as</guimenuitem> – save the filter under a new name.</para></listitem>
            <listitem><para><guimenuitem>Edit</guimenuitem> – open the filter editor (see below).</para></listitem>
            <listitem><para><guimenuitem>Make default</guimenuitem> – make the filter default for this screen. The filter will be automatically displayed on the filter panel each time the screen is opened.</para></listitem>
            <listitem><para><guimenuitem>Remove</guimenuitem> – remove the current filter.</para></listitem>
            <listitem><para><guimenuitem>Pin applied</guimenuitem> – use the results of the last search for sequential data filtering (see <xref linkend="sequential_filter"/>).</para></listitem>
            <listitem><para><guimenuitem>Hide conditions/Show conditions</guimenuitem> – enable or disable conditions display at the top of the filter panel.</para></listitem>
            <listitem><para><guimenuitem>Save as search folder</guimenuitem> – create a <link linkend="search_folder">search folder</link> based on the current filter.</para></listitem>
            <listitem><para><guimenuitem>Save as application folder</guimenuitem> – create an <link linkend="search_folder">application folder</link> based on the current filter. This option is available to users with the specific <code>cuba.gui.appFolder.global</code> permission only.</para></listitem>
            </itemizedlist>
            <para>The <guimenuitem>Edit</guimenuitem> option opens the filter editor, allowing advanced configuration of the current filter:</para>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="img/gui_filter_editor.png"/>
                </imageobject>
            </mediaobject>
            <para>Filter name should be provided in the <guilabel>Name</guilabel> field. This name will be displayed in available filter list for the current screen.</para>
            <para>Filter can be made <firstterm>global</firstterm> (i.e., available for all users) using the <guilabel>Available to all users</guilabel> checkbox, or default using the <guilabel>Default</guilabel> checkbox.</para>
            <para>The filter conditions are in the tree. They can be added using the <guibutton>Add</guibutton> button, swapped using <inlinemediaobject>
              <imageobject>
                <imagedata fileref="img/gui_filter_cond_down.png"/>
              </imageobject>
            </inlinemediaobject>/<inlinemediaobject>
              <imageobject>
                <imagedata fileref="img/gui_filter_cond_up.png"/>
              </imageobject>
            </inlinemediaobject> or removed using the <guibutton>Remove</guibutton> button.</para>
            <para>AND or OR grouping conditions can be added with the help of the corresponding buttons. All top level conditions (i.e., without explicit grouping) are joined with AND.</para>
            <para>Selecting a condition in the tree opens a list of its properties in the right part of the editor.</para>
            <para>The conditions can be made hidden or required by means of corresponding checkboxes. The hidden condition parameter is invisible to the user, so it should be entered when the filter is being edited.</para>
            <para><guilabel>Width</guilabel> property allows selecting the width of the parameter field for the current condition. By default, conditions on the filter panel are displayed in three columns. The field width equals the number of columns it can occupy (1, 2 or 3).</para>
            <para>Default parameter value for the current condition can be selected in the <guilabel>Default value</guilabel> field.</para>
            <para>A custom caption for filter condition can be provided in the <guilabel>Caption</guilabel> field.</para>
            <para><guilabel>Operation</guilabel> field allows selecting the search operator. The list of available operators depends on the attribute type.</para>
            <warning>
                <para>Clicking <guilabel>OK</guilabel> in the filter editor saves the changes to the filter only for current search. In order to keep them for further re-use, click the options button and select <guilabel>Save/Save as</guilabel>. Otherwise, all the changes will disappear once the screen is closed.</para>
            </warning>
        </section>
        <section>
          <title>Filter Component</title>
          <para>XML name of the component:  <sgmltag>filter</sgmltag>.</para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/gui_filter_dia.png"/>
            </imageobject>
          </mediaobject>
          <para>The component is implemented for  <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
          <para>An example of component declaration in XML screen descriptor is shown below:<programlisting language="xml">&lt;dsContext&gt;
  &lt;collectionDatasource id=&quot;carsDs&quot; class=&quot;com.company.sample.entity.Car&quot; view=&quot;carBrowse&quot;&gt;
      &lt;query&gt;
          select c from ref$Car c order by c.createTs
      &lt;/query&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;
&lt;layout spacing=&quot;true&quot;&gt;

  &lt;filter id=&quot;carsFilter&quot; datasource=&quot;carsDs&quot;&gt;
      &lt;properties include=&quot;.*&quot;/&gt;
  &lt;/filter&gt;

  &lt;table id=&quot;carsTable&quot; width=&quot;100%&quot;&gt;
      &lt;buttonsPanel&gt;
          &lt;button action=&quot;carsTable.create&quot;/&gt;
          &lt;button action=&quot;carsTable.edit&quot;/&gt;
          &lt;button action=&quot;carsTable.remove&quot;/&gt;
      &lt;/buttonsPanel&gt;
      &lt;rowsCount/&gt;
      &lt;columns&gt;
          &lt;column id=&quot;vin&quot;/&gt;
          &lt;column id=&quot;model.name&quot;/&gt;
          &lt;column id=&quot;colour.name&quot;/&gt;
      &lt;/columns&gt;
      &lt;rows datasource=&quot;carsDs&quot;/&gt;
  &lt;/table&gt;</programlisting></para>
          <para>In the example above, <code>collectionDatasource</code> is defined in the <code>dsContext</code>. The datasource selects <code>Car</code> entity instances using JPQL query. The filtered data source is specified in  <code>filter</code> component’s <code>datasource</code> attribute. Data are displayed using the  <link linkend="gui_Table">Table</link> component, which is connected to the same data source.</para>
          <para><sgmltag>filter</sgmltag> may contain nested elements. They describe conditions available
for user selection in <guibutton>Add Condition</guibutton> dialog:
<itemizedlist>
              <listitem id="gui_element_filter_properties">
                <para><code>properties</code> – several entity attributes can be made available. This element can have the following attributes:<itemizedlist>
                    <listitem id="gui_attr_filter_include">
                      <para><code>include</code> – required attribute. It contains a regular expression, which should be matched with the entity attribute name.</para>
                    </listitem>
                    <listitem id="gui_attr_filter_exclude">
                      <para><code>exclude</code> – contains a regular expression. If the attribute matches the expression, it will be excluded from previously included ones (using <code>include</code>).</para>
                    </listitem>
                  </itemizedlist></para>
                <para>Example:<programlisting language="xml">&lt;filter id=&quot;transactionsFilter&quot; datasource=&quot;transactionsDs&quot;&gt;
  &lt;properties include=&quot;.*&quot; exclude=&quot;(masterTransaction)|(authCode)&quot;/&gt;
&lt;/filter&gt;</programlisting></para>
                <para>The following entity attributes are automatically ignored when  <code>properties</code> element is used:<itemizedlist>
                    <listitem>
                      <para>Collections  (<code>@OneToMany</code>, <code>@ManyToMany</code>).</para>
                    </listitem>
                    <listitem>
                      <para>Attributes that do not have  <link linkend="entity_localization"> localized names</link>.</para>
                    </listitem>
                    <listitem>
                      <para>The  <code>version</code> attribute.</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
              <listitem id="gui_element_filter_property">
                <para><code>property</code> – explicitly includes an entity attribute by name. This element can have the following attributes:<itemizedlist>
                    <listitem id="gui_attr_filter_name">
                      <para><code>name</code> – required attribute. It contains an included entity attribute name. It can be a path (using &quot;.&quot;) in the entity graph. For example:<programlisting language="xml">&lt;filter id=&quot;transactionsFilter&quot; datasource=&quot;transactionDs&quot; applyTo=&quot;table&quot;&gt;
  &lt;properties include=&quot;.*&quot; exclude=&quot;(masterTransaction)|(authCode)&quot;/&gt;
  &lt;property name=&quot;creditCard.maskedPan&quot; caption=&quot;msg://EmbeddedCreditCard.maskedPan&quot;/&gt;
  &lt;property name=&quot;creditCard.startDate&quot; caption=&quot;msg://EmbeddedCreditCard.startDate&quot;/&gt;
&lt;/filter&gt;</programlisting></para>
                    </listitem>
                    <listitem id="gui_attr_filter_caption">
                      <para><code>caption</code> – localized entity attribute name that is displayed in filter condition. Generally it is a string with the  <code>msg://</code> prefix in accordance with  <link linkend="messageTools.loadString">MessageTools.loadString</link>() rules. </para>
                      <para>If the  <code>name</code> attribute is specified as a path (using &quot;.&quot;) in an entity graph, then the  <code>caption</code> attribute is required.</para>
                    </listitem>
                    <listitem>
                      <para id="gui_attr_filter_paramWhere"><sgmltag>paramWhere</sgmltag> − specifies a JPQL expression which is used to select a list of condition parameter values if the parameter is a related entity. The <code> {E}</code> placeholder should be used in the expression instead of a selected entity alias. </para>
                      <para>For example, there is a filter for the <code>Car</code> entity. The related <code>Model</code> entity condition is added to this filter. Then possible condition parameter values list can be limited to  <userinput>Audi</userinput> models only:<programlisting language="xml">&lt;filter id=&quot;carsFilter&quot; datasource=&quot;carsDs&quot;&gt;
 &lt;property name=&quot;model&quot; paramWhere=&quot;{E}.manufacturer = &apos;Audi&apos;&quot;/&gt;
&lt;/filter&gt;</programlisting><mediaobject>
                          <imageobject>
                            <imagedata align="center" fileref="img/gui_filter_paramWhere.png"/>
                          </imageobject>
                        </mediaobject></para>
                      <para>Screen parameters, session attributes and screen components including those showing other parameters can be used in JPQL expression. Query parameters specification rules are described in  <xref linkend="datasource_query"/>. </para>
                      <para>An example of session and screen parameters usage is shown below:<programlisting>{E}.createdBy = :session$userLogin and {E}.name like :param$groupName</programlisting></para>
                      <para>An example of using another filter condition parameter value is shown below:<programlisting>{E}.proc.id = :component$cardsFilter.proc68779</programlisting></para>
                      <para>It is possible to see a name of component showing condition parameter by opening a context menu on a condition table row in the filter editor:</para>
                      <mediaobject>
                        <imageobject>
                          <imagedata align="center" fileref="img/gui_filter_component_name.png"/>
                        </imageobject>
                      </mediaobject>
                    </listitem>
                    <listitem>
                      <para id="gui_attr_filter_paramView"><sgmltag>paramView</sgmltag> − specifies a <link linkend="views">view</link>, which will be used when a list of condition parameter values are loaded if the parameter is a related entity. For example,  <literal>_local</literal>. If view is not specified, <code>_minimal</code> view will be used.</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
              <listitem id="gui_element_filter_custom">
                <para><code>custom</code> – element that defines an arbitrary condition. An element content should be a JPQL expression (<link linkend="jpql_macro">JPQL Macros</link> can be used), which will be added to the data source query  <code>where</code> condition. The condition can have only one parameter, it is denoted by &quot;?&quot; if specified.</para>
                <para>An example of filter with arbitrary conditions is shown below:<programlisting language="xml">&lt;filter id=&quot;carsFilter&quot; datasource=&quot;carsDs&quot;&gt;
 &lt;properties include=&quot;.*&quot;/&gt;
 &lt;custom name=&quot;vin&quot; paramClass=&quot;java.lang.String&quot; caption=&quot;msg://vin&quot;&gt;
    {E}.vin like ?
 &lt;/custom&gt;
 &lt;custom name=&quot;colour&quot; paramClass=&quot;com.company.sample.entity.Colour&quot; caption=&quot;msg://colour&quot; inExpr=&quot;true&quot;&gt;
    ({E}.colour.id in (?))
 &lt;/custom&gt;
 &lt;custom name=&quot;repair&quot; paramClass=&quot;java.lang.String&quot; caption=&quot;msg://repair&quot;
         join=&quot;join {E}.repairs cr&quot;&gt;
    cr.description like ?
 &lt;/custom&gt;
 &lt;custom name=&quot;updateTs&quot; caption=&quot;msg://updateTs&quot;&gt;
    @between({E}.updateTs, now-1, now+1, day)
 &lt;/custom&gt;
&lt;/filter&gt;</programlisting></para>
                <para>Created <code>custom</code> conditions are displayed in the  <guilabel>Custom conditions</guilabel> section of the <guibutton>Add condition</guibutton> dialog:<mediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="img/gui_filter_custom.png"/>
                    </imageobject>
                  </mediaobject></para>
                <para><sgmltag>custom</sgmltag> attributes:</para>
                <itemizedlist>
                  <listitem>
                    <para id="gui_attr_filter_custom_name"><sgmltag>name</sgmltag> − required attribute − condition name.</para>
                  </listitem>
                  <listitem>
                    <para id="gui_attr_filter_custom_caption"><sgmltag>caption</sgmltag> − required attribute – localized condition name. Generally it is a string with the  <code>msg://</code> prefix in accordance with  <link linkend="messageTools.loadString">MessageTools.loadString()</link> rules.</para>
                  </listitem>
                  <listitem>
                    <para id="gui_attr_filter_custom_paramClass"><sgmltag>paramClass</sgmltag>  − Java class of a condition parameter. If the parameter is not specified, this attribute is optional.</para>
                  </listitem>
                  <listitem>
                    <para id="gui_attr_filter_custom_inExpr"><sgmltag>inExpr</sgmltag> − should be set to <literal>true</literal>, if a JPQL expression contains  <code>in (?)</code> conditions. In this case user will be able to enter several condition parameter values.</para>
                  </listitem>
                  <listitem>
                    <para id="gui_attr_filter_custom_join"><sgmltag>join</sgmltag> − optional attribute. It specifies a row, which will be added to the data source query <literal>from</literal> section. It is useful if condition for related collection attribute should be created. <code>join</code> or <code>left join</code> statements should be included into the attribute value. </para>
                    <para>For example, let us assume that the <code>Car</code> entity has a  <code>repairs</code> attribute, which is a related entity  <code>Repair</code> instances collection. Then to filter  <code>Car</code> by  <code>Repair</code> entity <code>description</code> attribute, the following condition can be written:<programlisting language="xml">&lt;filter id=&quot;carsFilter&quot; datasource=&quot;carsDs&quot;&gt;
  &lt;custom name=&quot;repair&quot;
          caption=&quot;msg://repair&quot;
          paramClass=&quot;java.lang.String&quot;
          join=&quot;join {E}.repairs cr&quot;&gt;
    cr.description like ?
 &lt;/custom&gt;</programlisting></para>
                    <para>If the condition above is used, the original data source query <programlisting>select c from sample$Car c order by c.createTs</programlisting>will be transformed into the following one:<programlisting>select c from sample$Car c join c.repairs cr
where (cr.description like :component_carsFilter_YpzKVsCpmF64816 )
order by c.createTs</programlisting></para>
                  </listitem>
                  <listitem>
                    <para><sgmltag>paramWhere</sgmltag> − specifies a JPQL expression that is used to select a list of condition parameter values if the parameter is a related entity. See the description of the <code>property</code> element attribute of the same name.</para>
                  </listitem>
                  <listitem>
                    <para><sgmltag>paramView</sgmltag> − specifies a  <link linkend="views">view</link>, which will be used when a list of condition parameter values are loaded if the parameter is a related entity. For example, <literal>_local</literal>. If it is not specified, <code>_minimal</code> view will be used.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist></para>
          <para><code>filter</code> attributes:<itemizedlist>
              <listitem>
                <para id="gui_attr_filter_editable"><code>editable</code> – if the attribute value is  <literal>false</literal>, the <guibutton>Filter</guibutton> button is hidden.</para>
              </listitem>
              <listitem>
                <para id="gui_attr_filter_required"><code>required</code> – if the attribute value is <literal>true</literal>, <code>&lt;no filter&gt;</code> is not displayed in a filter list and user should select one of available filters. If no default filter is set for the screen, the first created filter will be automatically selected in the filter list.</para>
              </listitem>
              <listitem>
                <para id="gui_attr_filter_manualApplyRequired"><sgmltag>manualApplyRequired</sgmltag> − defines when the filter will be applied. If the attribute value is <literal>false</literal>, the filter will be applied when the screen is opened. If the value is  <literal>false</literal>, the filter will be applied only after the <guibutton>Apply</guibutton> button is clicked. This attribute takes precedence over the <link linkend="cuba.gui.genericFilterManualApplyRequired">cuba.gui.genericFilterManualApplyRequired</link> application property.</para>
              </listitem>
              <listitem id="gui_attr_filter_useMaxResults">
                <para><code>useMaxResults</code>  − limits the page size of entity instances loaded into the data source. It is set to <code>true</code> by default.</para>
                <para>If the attribute value is  <literal>false</literal>, the filter will not show the <guilabel>Show N rows</guilabel> checkbox and a corresponding field. The number of records in the data source (and displayed in the table accordingly) will be limited only by the  <code>MaxFetchUI</code> parameter of an  <link linkend="entity_statistics">entity statistics</link>, which is set to 10000 by default.</para>
                <para>If the attribute is not specified or is <code>true</code>, the <guilabel>Show N rows</guilabel> checkbox and a corresponding field will be displayed only if the user has specific  <code>cuba.gui.filter.maxResults</code> <link linkend="permissions">permission</link>. If the <code>cuba.gui.filter.maxResults</code> permission is not granted, the filter will force selecting only the first N rows without user to be able to disable it or specify another N. N is defined by  <literal>FetchUI</literal>, <literal>DefaultFetchUI</literal> parameters. They are obtained from the <link linkend="entity_statistics">entity statistics</link> mechanism.
              </para>
                <para>A filter shown below has the following parameters: <code>useMaxResults=&quot;true&quot;</code>, specific permission is denied, and  <code>cuba.gui.filter.maxResults</code>  <code>DefaultFetchUI = 2.</code></para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="img/gui_filter_useMaxRezult.png"/>
                  </imageobject>
                </mediaobject>
              </listitem>
              <listitem>
                <para id="gui_attr_filter_folderActionsEnabled"><sgmltag>folderActionsEnabled</sgmltag> − if it is set to <code>false</code>, the following filter actions can be hidden: Save as <guilabel>Search Folder</guilabel>, <guilabel>Save as Application Folder</guilabel>. By default, the attribute value is <code>true</code>, <guilabel>Save as Search Folder</guilabel>, <guilabel>Save as Application Folder</guilabel> are available.</para>
              </listitem>
              <listitem>
                <para id="gui_attr_filter_applyTo"><sgmltag>applyTo</sgmltag> − optional attribute, contains an associated with the filter component identifier. It is used when related component views access is required. For example, when saving the filter as a <link linkend="search_folder">search folder</link> or as an  <link linkend="application_folder">application folder</link>, the view that will be applied when browsing this folder can be specified.</para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="img/gui_filter_apply_to.png"/>
                  </imageobject>
                </mediaobject>
              </listitem>
            </itemizedlist></para>
          <para>All  <sgmltag>filter</sgmltag> attributes:</para>
          <informaltable frame="none" pgwide="0" align="left">
            <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
                <row><entry align="left">
                    <link linkend="gui_attr_filter_applyTo">applyTo</link>
                  </entry><entry>
                    <link linkend="gui_attr_basic_enable">enable</link>
                  </entry><entry align="left">
                    <link linkend="gui_attr_filter_manualApplyRequired">manualApplyRequired</link>
                  </entry><entry>
                    <link linkend="gui_attr_basic_stylename">stylename</link>
                  </entry>editable</row>
                <row>
                  <entry>
                    <link linkend="gui_attr_basic_datasource">datasource</link>
                  </entry>
                  <entry align="left">
                    <link linkend="gui_attr_filter_folderActionsEnabled">folderActionsEnabled</link>
                  </entry>
                  <entry align="left">
                    <link linkend="gui_attr_basic_margin">margin</link>
                  </entry>
                  <entry>
                    <link linkend="gui_attr_filter_useMaxResults">useMaxResults</link>
                  </entry>
                </row>
                <row>
                  <entry align="left">
                    <link linkend="gui_attr_filter_editable">editable</link>
                  </entry>
                  <entry align="left">
                    <link linkend="gui_attr_basic_id">id</link>
                  </entry>
                  <entry>
                    <link linkend="gui_attr_filter_required">required</link>
                  </entry>
                  <entry>
                    <link linkend="gui_attr_basic_visible">visible</link>
                  </entry>
                </row>
              </tbody></tgroup>
          </informaltable>
          <para><sgmltag>filter</sgmltag> elements:</para>
          <informaltable frame="none" pgwide="0" align="left">
            <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
                <row><entry align="left">
                    <link linkend="gui_element_filter_custom">custom</link>
                  </entry>editable</row>
                <row>
                  <entry>
                    <link linkend="gui_element_filter_properties">properties</link>
                  </entry>
                </row>
                <row>
                  <entry>
                    <link linkend="gui_element_filter_property">property</link>
                  </entry>
                </row>
              </tbody></tgroup>
          </informaltable>
          <para><sgmltag>properties</sgmltag> attributes:</para>
          <informaltable frame="none" pgwide="0" align="left">
            <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
                <row><entry align="left">
                    <link linkend="gui_attr_filter_exclude">exclude</link>
                  </entry>editable</row>
                <row>
                  <entry>
                    <link linkend="gui_attr_filter_include">include</link>
                  </entry>
                </row>
              </tbody></tgroup>
          </informaltable>
          <para><sgmltag>property</sgmltag> attributes:</para>
          <informaltable frame="none" pgwide="0" align="left">
            <tgroup cols="2" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/>c <tbody>
                <row><entry align="left">
                    <link linkend="gui_attr_filter_caption">caption</link>
                  </entry>editable<entry align="left">
                    <link linkend="gui_attr_filter_paramView">paramView</link>
                  </entry></row>
                <row>
                  <entry>
                    <link linkend="gui_attr_filter_name">name</link>
                  </entry>
                  <entry align="left">
                    <link linkend="gui_attr_filter_paramWhere">paramWhere</link>
                  </entry>
                </row>
              </tbody></tgroup>
          </informaltable>
          <para><sgmltag>custom</sgmltag> attributes:</para>
          <informaltable frame="none" pgwide="0" align="left">
            <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
                <row><entry align="left">
                    <link linkend="gui_attr_filter_custom_caption">caption</link>
                  </entry>editable<entry align="left">
                    <link linkend="gui_attr_filter_custom_name">name</link>
                  </entry><entry align="left">
                    <link linkend="gui_attr_filter_paramWhere">paramWhere</link>
                  </entry></row>
                <row>
                  <entry>
                    <link linkend="gui_attr_filter_custom_inExpr">inExpr</link>
                  </entry>
                  <entry>
                    <link linkend="gui_attr_filter_custom_paramClass">paramClass</link>
                  </entry>
                </row>
                <row>
                  <entry align="left">
                    <link linkend="gui_attr_filter_custom_join">join</link>
                  </entry>
                  <entry align="left">
                    <link linkend="gui_attr_filter_paramView">paramView</link>
                  </entry>
                </row>
              </tbody></tgroup>
          </informaltable>
        </section>
        <section>
          <title>User Permissions</title>
          <itemizedlist>
            <listitem>
              <para>To create/change/delete global (available to all users) filters, user must have a  <property>cuba.gui.filter.global</property> <link linkend="permissions">permission</link>.</para>
            </listitem>
            <listitem>
              <para>To create/change <code>custom</code> conditions user must have a   <property>cuba.gui.filter.customConditions</property> permission.</para>
            </listitem>
            <listitem>
              <para>To be able to change the maximum number of rows per page table using the checkbox and the   <guilabel>Show first N rows</guilabel> field, user must have a  <property>cuba.gui.filter.maxResults</property> permission. See also the  <link linkend="gui_attr_filter_useMaxResults">useMaxResults</link> filter attribute.</para>
            </listitem>
          </itemizedlist>
          <para>For specific permissions configuration information, see <xref linkend="chapter_security"/>.</para>
        </section>
        <section>
          <title>External Filter Control Parameters</title>
          <para><emphasis role="bold">System-wide parameters</emphasis></para>
          <para>The following application properties affect filter behavior:</para>
          <itemizedlist>
            <listitem>
              <para><link linkend="cuba.gui.genericFilterManualApplyRequired">cuba.gui.genericFilterManualApplyRequired</link>  − allows automatic filter applying to be disabled (i.e., data loading) when the screen is opened.</para>
            </listitem>
            <listitem>
              <para><link linkend="cuba.gui.genericFilterChecking">cuba.gui.genericFilterChecking</link> − allows to
                  enable the check that at least one condition is filled before applying the filter.</para>
            </listitem>
            <listitem>
              <para><link linkend="cuba.gui.genericFilterTreeConditionSelect">cuba.gui.genericFilterTreeConditionSelect</link> − allows flat drop-down list to be used instead of condition selection tree structure described above.</para>
            </listitem>
            <listitem>
              <para><link linkend="cuba.allowQueryFromSelected">cuba.allowQueryFromSelected</link> allows <link linkend="sequential_filter_para">sequential filters application</link>  mechanism to be disabled.</para>
            </listitem>
          </itemizedlist>
          <para><emphasis role="bold">Screen invocation parameters </emphasis></para>
          <para>It is possible to specify the filter and parameters that should be applied when the screen is opened. For this purpose, the filter should be created in advance, stored in the database, and a corresponding entry in the  <database>SEC_FILTER</database> table should have the <database>CODE</database> field filled.</para>
          <para>To specify a filter code, the parameter with the same name as filter component identifier in this screen should be passed to the screen. Parameter value should be a filter code, which should be set and applied.</para>
          <para>To set filter parameter values, parameters with the names equal to the parameter names and string values should be passed to the screen.</para>
          <para>An example of main menu item descriptor is shown below. It sets a filter with the <userinput>FilterByVIN</userinput> code into the <code>carsFilter</code> component of the <code>sample$Car.browse</code> opening screen. The component <userinput>$carsFilter.vin79216</userinput> parameter condition has <userinput>TMA</userinput> value:<programlisting language="xml">&lt;item id=&quot;sample$Car.browse&quot;&gt;
  &lt;param name=&quot;carsFilter&quot; value=&quot;FilterByVIN&quot;/&gt;
  &lt;param name=&quot;component$carsFilter.vin79216&quot; value=&quot;TMA&quot;/&gt;
&lt;/item&gt;</programlisting></para>
          <para>It should be noted that the filter with the set  <database>CODE</database> field has special properties:</para>
          <itemizedlist>
            <listitem>
              <para>It cannot be edited by users.</para>
            </listitem>
            <listitem>
              <para>This filter name can be displayed in several languages. To achieve this, a string with key equal to the filter code should be specified in the application  <link linkend="main_message_pack">main message pack</link>.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section id="sequential_filter">
          <title>Sequential Filter Application</title>
          <para><emphasis role="bold">Sequential Filter Application</emphasis></para>
          <para>When the <link linkend="cuba.allowQueryFromSelected">cuba.allowQueryFromSelected</link> application property is turned on, the last applied filter and current filtration results can be pinned in the UI component. Then another filter or parameters can be chosen and applied on the selected records.</para>
          <para>This approach allows two problems to be solved:</para>
          <itemizedlist>
            <listitem>
              <para>Decompose complex filters.</para>
            </listitem>
            <listitem>
              <para>Apply filters to the records selected using  <link linkend="application_folder">application</link> or <link linkend="search_folder">search</link> folders.</para>
            </listitem>
          </itemizedlist>
          <para>To use this mechanism in the UI, choose and apply one of the filters. Then click the filter settings button and select <guibutton>Pin applied</guibutton>. The filter will be pinned at the top of the filter panel. Then another filter can be applied to the selected records. Any number of filters can be applied sequentially. Filters can also be removed using <inlinemediaobject>
              <imageobject>
                <imagedata fileref="img/gui_filter_remove.png"/>
              </imageobject>
            </inlinemediaobject>.</para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/gui_filter_sequential.png"/>
            </imageobject>
          </mediaobject>
          <para>The sequential filter application mechanism is based on the <link linkend="dataManager">DataManager</link> ability to run  <link linkend="query_from_selected">sequential queries</link>.</para>
          <warning>
            <para>When this manual is being written, the sequential applying filters mechanism has been implemented only for  <structname>Web Client</structname>.</para>
          </warning>
        </section>
      </section>
      <section id="gui_GroupTable">
        <title>GroupTable</title>
        <para> <code>GroupTable</code> component is a table with an ability to group information dynamically by any field. In order to group a table by a column the required column should be dragged to the left and dropped on the   <inlinemediaobject>
            <imageobject>
              <imagedata fileref="img/gui_groupTableIcon.png"/>
            </imageobject>
          </inlinemediaobject> element of the table header. Grouped values can be expanded and collapsed using   <inlinemediaobject>
            <imageobject>
              <imagedata fileref="img/gui_groupBox_plus.png"/>
            </imageobject>
          </inlinemediaobject>/<inlinemediaobject>
            <imageobject>
              <imagedata fileref="img/gui_groupBox_minus.png"/>
            </imageobject>
          </inlinemediaobject>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_groupTableDragColumn.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component: <sgmltag>groupTable</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_GroupTable_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>Component is implemented only for  <structname>Web Client</structname>. In  <structname>Desktop Client</structname> it behaves like a regular table.</para>
        <para><link linkend="datasources">groupDatasource</link> must be specified for <code>GroupTable</code> in the  <code>datasource</code> attribute of the <code>rows</code> element. Otherwise, grouping will not work. Example:</para>
        <para><programlisting language="xml">&lt;dsContext&gt;
 &lt;groupDatasource id=&quot;ordersDs&quot; class=&quot;com.sample.sales.entity.Order&quot;
                  view=&quot;orderWithCustomer&quot;&gt;
     &lt;query&gt;
         select o from sales$Order o order by o.date
     &lt;/query&gt;
 &lt;/groupDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;groupTable id=&quot;ordersTable&quot; width=&quot;100%&quot;&gt;
      &lt;columns&gt;
          &lt;group&gt;
              &lt;column id=&quot;date&quot;/&gt;
          &lt;/group&gt;
          &lt;column id=&quot;customer.name&quot;/&gt;
          &lt;column id=&quot;amount&quot;/&gt;
      &lt;/columns&gt;
      &lt;rows datasource=&quot;ordersDs&quot;/&gt;
  &lt;/groupTable&gt;</programlisting></para>
        <para id="gui_element_groupTable_group"><sgmltag>group</sgmltag> is an optional element that can be present in a single instance inside  <link linkend="gui_element_table_columns">columns</link>. It contains a set of <code>column</code> elements, by which grouping will be performed initially when opening a screen.</para>
        <para>If <code>aggregatable</code> attribute is <code>true</code>, the table shows aggregation results for each group and results for all rows in an additional row on the top. If <code>showTotalAggregation</code> attribute is <code>false</code>, results for all rows are not shown.</para>
        <para>The rest of the  <code>GroupTable</code> functionality is similar to a simple  <link linkend="gui_Table">Table</link>.</para>
        <para><sgmltag>groupTable</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_table_allowPopupMenu">allowPopupMenu</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry><entry>
                  <link linkend="gui_attr_table_reorderingAllowed">reorderingAllowed</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>editable</row>
              <row>
                <entry>
                  <link linkend="gui_attr_table_columnControlVisible">columnControlVisible</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_table_sortable">sortable</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_table_multiselect">multiselect</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_table_presentations">presentations</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>groupTable</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_element_table_actions">actions</link>
                </entry>
              </row>
              <row>buttonsPanel<entry>
                  <link linkend="gui_ButtonsPanel">buttonsPanel</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_element_table_columns">columns</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_element_table_rows">rows</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_table_rowsCount">rowsCount</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para><sgmltag>columns</sgmltag> elements:</para>
        <informaltable frame="none" align="left">
          <tgroup cols="1">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_element_table_columns">column</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_element_groupTable_group">group</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para> <link linkend="gui_element_table_columns">column</link> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_table_column_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_dateField_dateFormat">dateFormat</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_dateField_resolution">resolution</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_table_column_editable">editable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_clickAction">clickAction</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_table_column_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_table_column_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_table_column_collapsed">collapsed</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para> <link linkend="gui_element_table_columns">column</link> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_formatter">formatter</link>
                </entry>editable</row>
            </tbody></tgroup>
        </informaltable>
        <para> <link linkend="gui_element_table_rows">rows</link> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>editable</row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_Label">
        <title>Label</title>
        <para><code>Label</code> is a text component that displays static text or value of entity attribute.</para>
        <para>XML name of the component: <sgmltag>label</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_label_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The  <code>Label</code> component is implemented for  <structname>Web Client</structname> and  <structname>Desktop Client</structname>.</para>
        <para>Below is an example of setting a label with text taken from the  <link linkend="message_packs">localized message pack</link>:<programlisting language="xml">&lt;label value=&quot;msg://orders&quot;/&gt;</programlisting></para>
        <para id="gui_attr_label_value">The  <sgmltag>value</sgmltag> attribute sets text for a label.</para>
        <para>In a web client, the text contained in  <sgmltag>value</sgmltag> will be split into multiple lines if its length exceeds the  <link linkend="gui_attr_basic_width">width</link> value. Therefore, to display a multiline label, it is sufficient to specify an absolute value of  <link linkend="gui_attr_basic_width">width</link>. If the label text is too long and the value of  <link linkend="gui_attr_basic_width">width</link> is not specified, the text will be truncated.<programlisting language="xml">&lt;label
     value=&quot;Label, which should be split into multiple lines&quot;
     width=&quot;200px&quot;/&gt;</programlisting></para>
        <para>You can set label parameters in the screen controller. To do this, you should specify a component identifier to get a reference to it in the controller:<programlisting language="xml">&lt;label id=&quot;dynamicLabel&quot;/&gt;</programlisting><programlisting language="java">@Inject
private Label dynamicLabel;

public void init(Map&lt;String, Object&gt; params) {
  dynamicLabel.setValue(&quot;Some value&quot;);
}</programlisting></para>
        <para>The  <code>Label</code> component can display value of an entity attribute. For this purpose, <link linkend="gui_attr_basic_datasource">datasource</link> and <link linkend="gui_attr_basic_property">property</link> attributes are used. For example:<programlisting language="xml">&lt;dsContext&gt;
 &lt;datasource id=&quot;customerDs&quot; class=&quot;com.sample.sales.entity.Customer&quot; view=&quot;_local&quot;/&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
...
  &lt;label datasource=&quot;customerDs&quot; property=&quot;name&quot;/&gt;</programlisting></para>
        <para>In the example above, component displays the  <code>name</code> attribute of the  <code>Customer</code> entity located in the  <code>customerDs</code> data source.</para>
        <para id="gui_attr_label_htmlEnabled"><sgmltag>htmlEnabled</sgmltag> attribute indicates the way the  <link linkend="gui_attr_label_value">value</link> attribute will be interpreted: if <code>htmlEnabled=&quot;true&quot;</code>, the attribute will be treated as HTML code, otherwise as string. Note that the desktop implementation of the screen will not support all  <code>html</code> tags.</para>
        <para><sgmltag>label</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_label_htmlEnabled">htmlEnabled</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_label_value">value</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>label</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_formatter">formatter</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_Link">
        <title>Link</title>
        <para><code>Link</code> is hyperlink, which allows uniform opening of external web resources for the Web and Desktop client. </para>
        <para>XML-name of the component: <code>link</code></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_link_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>An example of XML-description for <code>link</code>: </para>
        <programlisting language="xml">&lt;link caption=&quot;Link&quot; url=&quot;https://www.cuba-platform.com&quot; target=&quot;_blank&quot;/&gt;</programlisting>
        <para><code>link</code> attributes:</para>
        <itemizedlist>
          <listitem>
            <para><code>url</code> – the URL of the web resource.</para>
          </listitem>
          <listitem>
            <para><code>target</code> – sets the web page opening mode for the Web Client, similar to the <code>target</code> attribute of the <code>&lt;a&gt;</code> HTML element.</para>
          </listitem>
        </itemizedlist>
        <para>Additional <code>link</code> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_LinkButton">
        <title>LinkButton</title>
        <para><code>LinkButton</code> is a button that looks like a hyperlink.</para>
        <para>XML name of the component: <sgmltag>linkButton</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_linkButton_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The link button component is implemented for <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <para>The link button can contain text or icon (or both). The figure below shows different types of buttons.</para>
        <mediaobject>
          <imageobject>
            <imagedata fileref="img/gui_linkButtonTypes.png"/>
          </imageobject>
        </mediaobject>
        <para>The link button differs from regular  <code>Button</code> only in its appearance. All properties and behavior are identical to those described for <link linkend="gui_Button">Button</link>.</para>
        <para>Below is an example of XML description of a link button that invokes the  <code>someMethod()</code> method of a controller with caption (the  <link linkend="gui_attr_basic_caption">caption</link> attribute), tooltip (the <link linkend="gui_attr_basic_description">description</link> attribute) and icon (the  <link linkend="gui_attr_basic_icon">icon</link> attribute): <programlisting language="xml">&lt;linkButton id=&quot;linkButton&quot;
          caption=&quot;msg://linkButton&quot;
          description=&quot;Press me&quot;
          icon=&quot;icons/save.png&quot;
          invoke=&quot;someMethod&quot;/&gt;</programlisting></para>
        <para><sgmltag>linkButton</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_button_action">action</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_icon">icon</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_button_invoke">invoke</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_LookupField">
        <title>LookupField</title>
        <para>This is a component to select a value from drop-down list. Drop-down list provides the filtration of values as the user inputs some text, and the pagination of available values.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_lookupField.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component:  <sgmltag>lookupField</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_LookupField_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The <code>LookupField</code> component is implemented for  <structname>Web Client</structname> and  <structname>Desktop Client</structname>.</para>
        <itemizedlist>
          <listitem>
            <para>The simplest case of using  <code>LookupField</code> is to select an enumeration value for an entity attribute. For example, a <code>Role</code> entity has a  <code>type</code> attribute of the  <code>RoleType</code> type, which is an enumeration. Then you can use  <code>LookupField</code> to edit this attribute as follows:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;roleDs&quot; class=&quot;com.haulmont.cuba.security.entity.Role&quot; view=&quot;_local&quot;/&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;lookupField datasource=&quot;roleDs&quot; property=&quot;type&quot;/&gt;</programlisting></para>
            <para>In the example above, the screen defines  <literal>roleDs</literal> <link linkend="datasources">data source</link> for the  <code>Role</code> entity. In the  <code>lookupField</code> component, you should specify a link to a data source in the  <link linkend="gui_attr_basic_datasource">datasource</link> attribute, and a name of an entity attribute, which value should be displayed in the <link linkend="gui_attr_basic_property">property</link> attribute. In this case, the attribute is an enumeration and the drop-down list will display  <link linkend="enum_localization">localized names</link> of all enumeration values.</para>
          </listitem>
          <listitem>
            <para>Similarly,  <code>LookupField</code> can be used to select an instance of a related entity.  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link> attribute is used to create a list of options:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;carDs&quot; class=&quot;com.company.sample.entity.Car&quot; view=&quot;_local&quot;/&gt;
  &lt;collectionDatasource id=&quot;coloursDs&quot; class=&quot;com.company.sample.entity.Colour&quot; view=&quot;_local&quot;&gt;
      &lt;query&gt;select c from sample$Colour c&lt;/query&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;lookupField datasource=&quot;carDs&quot; property=&quot;colour&quot; optionsDatasource=&quot;coloursDs&quot;/&gt;</programlisting></para>
            <para>In this case, the component will display  <link linkend="namePattern">instance names</link> of the  <code>Colour</code> entity located in the <code>colorsDs</code> data source, and the selected value will be put into the <code>colour</code> attribute of the  <code>Car</code> entity, which is located in the <code>carDs</code> data source.</para>
            <para><link linkend="gui_attr_basic_captionProperty">captionProperty</link> attribute defines which entity attribute can be used instead of an instance name for string option names.</para>
          </listitem>
          <listitem>
            <para>The list of component options can be specified arbitrarily using <code>setOptionsList()</code> and  <code>setOptionsMap()</code>, or using an XML  <code>optionsDatasource</code> attribute.</para>
            <itemizedlist>
              <listitem>
                <para><code>setOptionsList()</code> allows you to programmatically specify a list of component options. To do this, declare a component in the XML descriptor:</para>
                <programlisting language="xml">&lt;lookupField id=&quot;numberOfSeatsField&quot; datasource=&quot;modelDs&quot; property=&quot;numberOfSeats&quot;/&gt;</programlisting>
                <para>Then inject the component into the controller and specify a list of options in the  <code>init()</code> method:<programlisting language="java">@Inject
protected LookupField numberOfSeatsField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
  list.add(2);
  list.add(4);
  list.add(5);
  list.add(7);
  numberOfSeatsField.setOptionsList(list);
}</programlisting></para>
                <para>In the dropdown list of the component values 2, 4, 5 and 7 will be displayed. Selected number will be put into the  <code>numberOfSeats</code> attribute of an entity located in the  <code>modelDs</code> data source.</para>
              </listitem>
              <listitem>
                <para><code>setOptionsMap()</code> allows to specify string names and option values separately. For example, in the <code>numberOfSeatsField</code> component in the XML descriptor, specify an option map in <code>init()</code>:<programlisting language="java">@Inject
protected LookupField numberOfSeatsField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  Map&lt;String, Object&gt; map = new LinkedHashMap&lt;&gt;();
  map.put(&quot;two&quot;, 2);
  map.put(&quot;four&quot;, 4);
  map.put(&quot;five&quot;, 5);
  map.put(&quot;seven&quot;, 7);
  numberOfSeatsField.setOptionsMap(map);
}</programlisting></para>
                <para>In the drop down list of the component,  <userinput>two</userinput>, <userinput>four</userinput>, <userinput>five</userinput>, <userinput>seven</userinput> strings will be displayed. However, the value of the component will be a number that corresponds to the selected row. It will be put into the <code>numberOfSeats</code> attribute of an entity located in the  <code>modelDs</code> data source.</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para id="gui_attr_lookupField_filterMode">Using the  <sgmltag>filterMode</sgmltag> attribute, filtration option type can be defined for the user input:</para>
            <itemizedlist>
              <listitem>
                <para><literal>NO</literal> − no filtration.</para>
              </listitem>
              <listitem>
                <para><literal>STARTS_WITH</literal> − by the beginning of a phrase.</para>
              </listitem>
              <listitem>
                <para><literal>CONTAINS</literal> − by any occurrence (is used by default).</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>If the  <code>LookupField</code> component has no  <link linkend="gui_attr_basic_required">required</link> attribute to set up and if the related entity attribute is not declared as required, the list of component options has an empty row. If this row is selected, the component returns <code>null</code>. The  <link linkend="gui_attr_nullName">nullName</link> attribute allows to specify a row to be displayed in this case instead of an empty one. Below is an example of use:<programlisting language="xml">&lt;lookupField datasource=&quot;carDs&quot; property=&quot;colour&quot; optionsDatasource=&quot;coloursDs&quot; nullName=&quot;(none)&quot;/&gt;</programlisting></para>
            <para>In this case, instead of an empty row,  <userinput>(none)</userinput> will be displayed. If this row is selected, <code>null</code> will be put into a related entity attribute.</para>
            <para>If you specify a list of options programmatically using <code>setOptionsList()</code> , you can pass one of the options into  <code>setNullOption()</code> method. Then, if the user selects it, the component value will be  <code>null</code>.</para>
          </listitem>
          <listitem><para>The  <code>LookupField</code> component is able to handle user input if there is no suitable option in the list. In this case, <code>setNewOptionAllowed()</code> and <code>setNewOptionHandler()</code> are used. For example:<programlisting language="java">@Inject
protected LookupField colourField;

@Inject
protected CollectionDatasource&lt;Colour, UUID&gt; coloursDs;

@Override
public void init(Map&lt;String, Object&gt; params) {
  colourField.setNewOptionAllowed(true);
  colourField.setNewOptionHandler(new LookupField.NewOptionHandler() {
      @Override
      public void addNewOption(String caption) {
          Colour colour = new Colour();
          colour.setName(caption);
          coloursDs.addItem(colour);
          colourField.setValue(colour);
      }
  });
}</programlisting></para><para>The  <code>NewOptionHandler</code> handler is invoked if the user enters a value that does not coincide with any option and presses  <keycap>Enter</keycap>. In this case, a new  <code>Colour</code> entity instance is created in the handler, its  <code>name</code> attribute is set to the value entered by the user, this instance is added to an option data source and selected in the component.</para>Instead of implementing the <code>LookupField.NewOptionHandler</code>interface for processing user input, the controller method name can be specified in the <code>newOptionHandler</code>XML-attribute. This method should have two parameters, one of <code>LookupField</code>, and the other of <code>String</code>type. They will be set to the component instance and the value entered by the user, accordingly.</listitem>
        </itemizedlist>
        <para><sgmltag>lookupField</sgmltag> attributes: </para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_nullName">nullName</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry></row>
              <row><entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>required</row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_lookupField_filterMode">filterMode</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>lookupField</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_LookupPickerField">
        <title>LookupPickerField</title>
        <para>The  <code>LookupPickerField</code> component enables to display an entity instance in a text field, select an instance in a drop-down list and perform actions by pressing buttons on the right.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_lookupPickerField.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component:  <sgmltag>lookupPickerField</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_LookupPickerField_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for  <structname>Web Client</structname> and  <structname>Desktop Client</structname>.</para>
        <para> In fact <code>LookupPickerField</code> is  a hybrid of  <link linkend="gui_LookupField">LookupField</link> and <link linkend="gui_PickerField">PickerField</link>. Thus it has the same features except the default list of actions added when determining the component in XML: for <code>LookupPickerField</code> these are  <code>lookup</code> <inlinemediaobject>
            <imageobject>
              <imagedata fileref="img/lookupBtn.png"/>
            </imageobject>
          </inlinemediaobject> and  <code>open</code> <inlinemediaobject>
            <imageobject>
              <imagedata fileref="img/openBtn.png"/>
            </imageobject>
          </inlinemediaobject> actions.</para>
        <para>Below is an example of using  <code>LookupPickerField</code> to select a value of the  <code>colour</code> reference attribute of the  <code>Car</code> entity:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;carDs&quot; class=&quot;com.company.sample.entity.Car&quot; view=&quot;_local&quot;/&gt;
  &lt;collectionDatasource id=&quot;coloursDs&quot; class=&quot;com.company.sample.entity.Colour&quot; view=&quot;_local&quot;&gt;
      &lt;query&gt;select c from sample$Colour c&lt;/query&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;lookupPickerField datasource=&quot;carDs&quot; property=&quot;colour&quot; optionsDatasource=&quot;coloursDs&quot;/&gt;</programlisting></para>
        <para><sgmltag>lookupPickerField</sgmltag> attributes: </para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry>
                  <link linkend="gui_attr_pickerField_metaclass">metaClass</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry></row>
              <row><entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry>
                  <link linkend="gui_attr_nullName">nullName</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>required</row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_lookupField_filterMode">filterMode</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry>
                <entry/>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>lookupPickerField</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_Action">actions</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_MaskedField">
        <title>MaskedField</title>
        <para>This is a text field, in which data is entered in a predefined format. For example, it is convenient to use  <code>MaskedField</code> to enter telephone numbers. </para>
        <para>XML name of the component: <sgmltag>maskedField</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_MaskedField_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The  <code>MaskedField</code> component is implemented for  <structname>Web Client</structname> only.</para>
        <para>Basically, <code>MaskedField</code> repeats the functionality of  <link linkend="gui_TextField">TextField</link>, except that you cannot set  <code>datatype</code> for it. So,  <code>MaskedField</code> is intended for work only with text and string entity attributes. <code>MaskedField</code> has the following specific attributes:</para>
        <itemizedlist>
          <listitem>
            <para id="gui_attr_maskedField_mask"><sgmltag>mask</sgmltag> – sets a mask for the field. To set a mask, use the following characters:</para>
            <itemizedlist>
              <listitem>
                <para><sgmltag>#</sgmltag> – number</para>
              </listitem>
              <listitem>
                <para><sgmltag>U</sgmltag> – uppercase letter</para>
              </listitem>
              <listitem>
                <para><sgmltag>L</sgmltag> – lowercase letter</para>
              </listitem>
              <listitem>
                <para><sgmltag>?</sgmltag> – letter</para>
              </listitem>
              <listitem>
                <para><sgmltag>А</sgmltag> – letter or number</para>
              </listitem>
              <listitem>
                <para><sgmltag>*</sgmltag> – any character</para>
              </listitem>
              <listitem>
                <para><sgmltag>H</sgmltag> – hex character</para>
              </listitem>
              <listitem>
                <para><sgmltag>~</sgmltag> – &quot; +&quot; or &quot;-&quot; character</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para id="gui_attr_maskedField_valueMode"><sgmltag>valueMode</sgmltag> – defines a format of a returned value (with a mask or not) and can take either <sgmltag>masked</sgmltag> or  <sgmltag>clear</sgmltag>.</para>
          </listitem>
        </itemizedlist>
        <para>Example of a text field with a mask for entering telephone numbers is provided below:</para>
        <programlisting language="xml">&lt;maskedField id=&quot;phoneNumberField&quot; mask=&quot;(###)###-##-##&quot; valueMode=&quot;masked&quot;/&gt;
&lt;button caption=&quot;msg://showPhoneNumberBtn&quot; invoke=&quot;showPhoneNumber&quot;/&gt;</programlisting>
        <programlisting language="java">@Inject
private MaskedField phoneNumberField;

public void showPhoneNumber(){
  showNotification((String) phoneNumberField.getValue(), NotificationType.HUMANIZED);
}</programlisting>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_MaskedField.png"/>
          </imageobject>
        </mediaobject>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_MaskedField_maskedValueMode.png"/>
          </imageobject>
        </mediaobject>
        <para><sgmltag>maskedField</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="5" colsep="1" rowsep="1" align="left"><colspec colname="c0"/><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry>
                  <link linkend="gui_attr_basic_align">align</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_maskedField_mask">mask</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_textField_maxLength">maxLength</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_textField_trim">trim</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_maskedField_valueMode">valueMode</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para> <sgmltag>maskedField</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_OptionsGroup">
        <title>OptionsGroup</title>
        <para>This is a component that allows you to choose from a list of options using an option group to choose a single value or a checkbox group to select several values.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_optionsGroup.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component: <sgmltag>optionsGroup</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_OptionsGroup_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The  <code>OptionsGroup</code> component is implemented for  <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <itemizedlist>
          <listitem>
            <para>The simplest case of using  <code>OptionsGroup</code> is to select an enumeration value for an entity attribute. For example, a  <code>Role</code> entity has <code>type</code> attribute of the <code>RoleType</code> type, which is an enumeration. Then you can use  <code>OptionsGroup</code> to edit this attribute as follows:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;roleDs&quot; class=&quot;com.haulmont.cuba.security.entity.Role&quot; view=&quot;_local&quot;/&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;optionsGroup datasource=&quot;roleDs&quot; property=&quot;type&quot;/&gt;</programlisting></para>
            <para>In the example above <literal>roleDs</literal>   <link linkend="datasources">data source</link> is defined for the <code>Role</code> entity. In the  <code>optionsGroup</code> component, you should specify link to a data source in the  <link linkend="gui_attr_basic_datasource">datasource</link> attribute and a name of an entity attribute, which value should be displayed, in the <link linkend="gui_attr_basic_property">property</link>  attribute.</para>
            <para>As a result, the component will be as follows:<mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="img/gui_optionsGroup_roleType.png"/>
                </imageobject>
              </mediaobject></para>
          </listitem>
          <listitem>
            <para>The list of component options can be specified arbitrarily using <code>setOptionsList()</code> and <code>setOptionsMap()</code>, or using an  <code>optionsDatasource</code> attribute.</para>
            <itemizedlist>
              <listitem>
                <para><code>setOptionsList()</code> allows to specify programmatically a list of component options. To do this, declare a component in the XML descriptor:</para>
                <programlisting language="xml">&lt;optionsGroup id=&quot;numberOfSeatsField&quot;/&gt;</programlisting>
                <para>Then inject the component into the controller and specify a list of options in the  <code>init()</code> method:<programlisting language="java">@Inject
protected OptionsGroup numberOfSeatsField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
  list.add(2);
  list.add(4);
  list.add(5);
  list.add(7);
  numberOfSeatsField.setOptionsList(list);
}</programlisting></para>
                <para>The component will be as follows:<mediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="img/gui_optionsGroup_integerList.png"/>
                    </imageobject>
                  </mediaobject></para>
                <para>Depending on the selected option, the  <code>getValue()</code> method of the component will return   <code>Integer</code> values: 2, 4, 5, 7.</para>
              </listitem>
              <listitem>
                <para><code>setOptionsMap()</code> allows to specify string names and option values separately. For example, we can set the following options map for the  <code>numberOfSeatsField</code> component, described the XML descriptor, in the  <code>init()</code> method of the controller:<programlisting language="java">@Inject
protected OptionsGroup numberOfSeatsField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  Map&lt;String, Object&gt; map = new LinkedHashMap&lt;&gt;();
  map.put(&quot;two&quot;, 2);
  map.put(&quot;four&quot;, 4);
  map.put(&quot;five&quot;, 5);
  map.put(&quot;seven&quot;, 7);
  numberOfSeatsField.setOptionsMap(map);
}</programlisting></para>
                <para>The component will be as follows:<mediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="img/gui_optionsGroup_integerMap.png"/>
                    </imageobject>
                  </mediaobject></para>
                <para>Depending on the selected option, the  <code>getValue()</code> method of the component will return  <code>Integer</code> values: 2, 4, 5, 7, and not the strings that are displayed on the screen.</para>
              </listitem>
              <listitem>
                <para>The component can take a list of options from a data source. For this purpose, the  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link> attribute is used. For example:<programlisting language="xml">&lt;dsContext&gt;
  &lt;collectionDatasource id=&quot;coloursDs&quot; class=&quot;com.company.sample.entity.Colour&quot; view=&quot;_local&quot;&gt;
      &lt;query&gt;select c from sample$Colour c&lt;/query&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;optionsGroup id=&quot;coloursField&quot; optionsDatasource=&quot;coloursDs&quot;/&gt;</programlisting></para>
                <para>In this case, the  <code>coloursField</code> component will display  <link linkend="namePattern">instance names</link> of the  <code>Colour</code> entity, located in the  <code>coloursDs</code> data source, and its  <code>getValue()</code> method will return the selected entity instance.</para>
                <para>With the help of  <link linkend="gui_attr_basic_captionProperty">captionProperty</link> attribute entity attribute to be used instead of an instance name for string option names can be defined.</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem id="gui_attr_optionsGroup_multiselect">
            <para><sgmltag>multiselect</sgmltag> attribute is used to switch <code>OptionsGroup</code> to a multiple choice mode. If  <code>multiselect</code> is turned on, the component is displayed as a group of independent checkboxes, and the component value is a list of selected options.</para>
            <para>For example, if we create the component in the XML screen descriptor:<programlisting language="xml">&lt;optionsGroup id=&quot;roleTypesField&quot; multiselect=&quot;true&quot;/&gt;</programlisting></para>
            <para>and set a list of options for it –  <code>RoleType</code> enumeration values:<programlisting language="java">@Inject
protected OptionsGroup roleTypesField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  roleTypesField.setOptionsList(Arrays.asList(RoleType.values()));
}</programlisting></para>
            <para>then the component will be as follows:<mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="img/gui_optionsGroup_roleType_multi.png"/>
                </imageobject>
              </mediaobject></para>
            <para>In this case the  <code>getValue()</code> method of the component will return a <code>java.util.List</code>, containing  <code>RoleType.READONLY</code> and <code>RoleType.DENYING</code> values.</para>
            <para>The example above also illustrates an ability of the  <code>OptionsGroup</code> component to display localized values of enumerations included in the data model.</para>
          </listitem>
          <listitem>
            <para id="gui_attr_optionsGroup_orientation">The  <sgmltag>orientation</sgmltag> attribute defines the orientation of group elements. By default, elements are arranged vertically. The <literal>horizontal</literal> value sets the horizontal orientation.</para>
          </listitem>
        </itemizedlist>
        <para><sgmltag>optionsGroup</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry></row>
              <row><entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>required<entry>
                  <link linkend="gui_attr_optionsGroup_orientation">orientation</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry></row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_optionsGroup_multiselect">multiselect</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>optionsGroup</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_PasswordField">
        <title>PasswordField</title>
        <para>This is a text field that displays echo characters instead of those entered by a user.</para>
        <para>XML name of the component:  <code>passwordField</code>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_PasswordField_dia.png"/>
          </imageobject>
        </mediaobject>
        <para><code>PasswordField</code> is implemented for  <structname>Web Client</structname> and  <structname>Desktop Client</structname>.</para>
        <para>Basically, <code>PasswordField</code> is similar to  <link linkend="gui_TextField">TextField</link> apart from the ability to set <code>datatype</code>.  <code>PasswordField</code> is intended to work with text and string entity attributes only.</para>
        <para>Example:</para>
        <programlisting language="xml">&lt;passwordField id=&quot;passwordField&quot; caption=&quot;msg://name&quot;/&gt;
&lt;button caption=&quot;msg://buttonsName&quot; invoke=&quot;showPassword&quot;/&gt;</programlisting>
        <programlisting language="java">@Inject
private PasswordField passwordField;

public void showPassword(){
  showNotification((String) passwordField.getValue(), NotificationType.HUMANIZED);
}</programlisting>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_passwordField.png"/>
          </imageobject>
        </mediaobject>
        <para><sgmltag>passwordField</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/><colspec colname="c5"/>c <tbody>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_textField_maxLength">maxLength</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>editable<entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry></row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_required">required</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>passwordField</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_PickerField">
        <title>PickerField</title>
        <para>The input field with additional action buttons (<code>PickerField</code>) allows to display an entity instance in a text field and perform actions by clicking buttons on the right.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/PickerField.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component: <sgmltag>pickerField</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_pickerField_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The  <code>PickerField</code> component is implemented for  <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <itemizedlist>
          <listitem>
            <para>As a rule,  <code>PickerField</code> is used for reference entity attributes. It is sufficient to specify  <link linkend="gui_attr_basic_datasource">datasource</link> and  <link linkend="gui_attr_basic_property">property</link> attributes for the component:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;carDs&quot; class=&quot;com.company.sample.entity.Car&quot; view=&quot;_local&quot;/&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;pickerField datasource=&quot;carDs&quot; property=&quot;colour&quot;/&gt;</programlisting></para>
            <para>In the example above, the screen defines <code>carDs</code>   <link linkend="datasources">data source</link> for a  <code>Car</code> entity having the  <code>colour</code> attribute. In the  <code>pickerField</code> element, you should specify a link to a data source in the <code>datasource</code> attribute, and a name of an entity attribute, the value of which should be displayed in the component – in the  <code>property</code> attribute. The entity attribute should refer to another entity, in the example above it is  <code>Colour</code>.</para>
          </listitem>
          <listitem id="gui_element_pickerField_actions">
            <para>For  <code>PickerField</code>, you can define an arbitrary number of  <link linkend="gui_Action">actions</link>, displayed as buttons on the right. It can be done either in the XML descriptor using the <code>actions</code> nested element, or programmatically in the controller using  <code>addAction()</code>. </para>
            <itemizedlist>
              <listitem>
                <para>There are  <link linkend="standard_actions">standard actions</link>, defined by the <code>PickerField.ActionType</code>: <code>lookup</code>, <code>clear</code>, <code>open</code>. They perform the selection of a related entity, clearing the field and opening the edit screen of a selected related entity, respectively. For standard actions in XML, you do not have to define any attributes except the identifier. If no actions in the  <sgmltag>actions</sgmltag> element are defined when declaring the component, the XML loader will define  <literal>lookup</literal> and <literal>clear</literal> actions for it. To add a default action, for example,  <literal>open</literal>, you need to define the  <sgmltag>actions</sgmltag> element as follows:<programlisting language="xml">&lt;pickerField datasource=&quot;carDs&quot; property=&quot;colour&quot;/&gt;
  &lt;actions&gt;
      &lt;action id=&quot;lookup&quot;/&gt;
      &lt;action id=&quot;open&quot;/&gt;
      &lt;action id=&quot;clear&quot;/&gt;
  &lt;/actions&gt;
&lt;/pickerField&gt;</programlisting></para>
                <para>The  <sgmltag>action</sgmltag> element does not extend but overrides a set of standard actions. Identifiers of all required actions have to be defined in order to use them. The component looks like the following:</para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="img/gui_pickerFieldActionsSt.png"/>
                  </imageobject>
                </mediaobject>
                <para>Use  <code>addLookupAction()</code>, <code>addOpenAction()</code> and  <code>addClearAction()</code> to set standard actions programmatically. If the component is defined in the XML descriptor without  <code>actions</code> nested element, it is sufficient to add missing actions:<programlisting language="java">@Inject
protected PickerField colourField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  colourField.addOpenAction();
}    </programlisting></para>
                <para>If the component is created in the controller, it will get no default actions and you need to explicitly add all necessary actions:<programlisting language="java">@Inject
protected ComponentsFactory componentsFactory;

@Override
public void init(Map&lt;String, Object&gt; params) {
  PickerField colourField = componentsFactory.createComponent(PickerField.NAME);
  colourField.setDatasource(carDs, &quot;colour&quot;);
  colourField.addLookupAction();
  colourField.addOpenAction();
  colourField.addClearAction();
}</programlisting></para>
                <para>You can parameterize standard actions. The XML descriptor has limited abilities to do this: there is only   <code>openType</code> attribute, in which you can specify the mode to open a selection screen (for  <code>LookupAction</code>) or edit screen (for  <code>OpenAction</code>).</para>
                <para>If you create actions programmatically, you can specify any properties of  <code>PickerField.LookupAction</code>, <code>PickerField.OpenAction</code> and <code>PickerField.ClearAction</code> objects returned by methods of adding standard actions. For example, you can set a specific selection screen as follows:<programlisting language="java">PickerField.LookupAction lookupAction = customerField.addLookupAction();
lookupAction.setLookupScreen(&quot;customerLookupScreen&quot;);</programlisting></para>
                <para>For more information, see JavaDocs for <link linkend="standard_actions">standard actions</link> classes.</para>
              </listitem>
              <listitem>
                <para>Arbitrary actions in the XML descriptor are also defined in the  <code>actions</code> nested element, for example:<programlisting language="xml">&lt;pickerField datasource=&quot;carDs&quot; property=&quot;colour&quot;/&gt;
  &lt;actions&gt;
      &lt;action id=&quot;lookup&quot;/&gt;
      &lt;action id=&quot;show&quot; icon=&quot;icons/show.png&quot;
              invoke=&quot;showColour&quot; caption=&quot;&quot;/&gt;
  &lt;/actions&gt;
&lt;/pickerField&gt;</programlisting></para>
                <para>You can programmatically set an arbitrary action as follows:<programlisting language="java">@Inject
protected PickerField colourField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  colourField.addAction(new AbstractAction(&quot;show&quot;) {
      @Override
      public void actionPerform(Component component) {
          showColour(colourField.getValue());
      }
      @Override
      public String getCaption() {
          return &quot;&quot;;
      }
      @Override
      public String getIcon() {
          return &quot;icons/show.png&quot;;
      }
  });
}</programlisting></para>
                <para>The declarative and programmatic creation of actions is described in   <xref linkend="gui_Action"/>.</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem id="gui_attr_pickerField_metaclass">
            <para><code>PickerField</code> can be used without any direct reference to data, i.e., without  <link linkend="gui_attr_basic_datasource">datasource</link> and <link linkend="gui_attr_basic_property">property</link> specification. In this case  <code>metaClass</code> attribute should be used to specify an entity type for  <code>PickerField</code>.  <link linkend="entity_class_annotations">Entity name in metadata</link> should be defined, for example:<programlisting language="xml">&lt;pickerField id=&quot;colourField&quot; metaClass=&quot;sample$Colour&quot;/&gt;</programlisting></para>
            <para>You can get an instance of a selected entity by injecting the component into a controller and invoking its <code>getValue()</code> method.</para>
            <warning>
              <para>For proper operation of the  <code>PickerField</code> component you need either set a <code>metaClass</code> attribute, or simultaneously set  <link linkend="gui_attr_basic_datasource">datasource</link> and  <link linkend="gui_attr_basic_property">property</link> attributes.</para>
            </warning>
          </listitem>
          <listitem>
            <para>You can use keyboard shortcuts in PickerField, see <xref linkend="shortcuts"/> for details.</para>
          </listitem>
        </itemizedlist>
        <para><sgmltag>pickerField</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_property">property</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry></row>
              <row><entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>required<entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry></row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_pickerField_metaclass">metaClass</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>pickerField</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_element_pickerField_actions">actions</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_PopupButton">
        <title>PopupButton</title>
        <para>This is a button with a drop-down list of actions.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/PopupButton.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component:  <sgmltag>popupButton</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_popupButton_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for  <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <para>The PopupButton contain text or icon (or both). The figure below shows different types of buttons.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_popupButtonTypes.png"/>
          </imageobject>
        </mediaobject>
        <para>Below is an example of a button with a drop-down list containing two actions.</para>
        <para>The button has a caption, which is specified using the  <link linkend="gui_attr_basic_caption">caption</link> attribute, and a tooltip defined in the  <link linkend="gui_attr_basic_description">description</link> attribute. The drop-down <link linkend="gui_Action">actions</link> list is specified in the <sgmltag>actions</sgmltag> element. <code>PopupButton</code> displays only the following action properties: <code>caption</code>, <code>enable</code>, <code>visible</code>. The  <code>description</code>, <code>icon</code>, and <code>shortcut</code> properties are ignored.</para>
        <para><sgmltag>popupButton</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_icon">icon</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>popupButton</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_Action">actions</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_ProgressBar">
        <title>ProgressBar</title>
        <para>The  <code>ProgressBar</code> component is used to display the progress of a long process.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_progressBar.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component:  <sgmltag>progressBar</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_progressBar_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for  <structname>Web Client</structname> and <structname>Desktop Client</structname>. </para>
        <para>Below is an example of the component usage together with the mechanism of background tasks:<programlisting language="xml">&lt;progressBar id=&quot;progressBar&quot; width=&quot;100%&quot;/&gt;</programlisting><programlisting language="java">@Inject
protected ProgressBar progressBar;

@Inject
protected BackgroundWorker backgroundWorker;

private static final int ITERATIONS = 5;

@Override
public void init(Map&lt;String, Object&gt; params) {
  BackgroundTask&lt;Integer, Void&gt; task = new BackgroundTask&lt;Integer, Void&gt;(300, this) {
      @Override
      public Void run(TaskLifeCycle&lt;Integer&gt; taskLifeCycle) throws Exception {
          for (int i = 1; i &lt;= ITERATIONS; i++) {
              TimeUnit.SECONDS.sleep(2); // time consuming task
              taskLifeCycle.publish(i);
          }
          return null;
      }

      @Override
      public void progress(List&lt;Integer&gt; changes) {
          float lastValue = changes.get(changes.size() – 1);
          progressBar.setValue(lastValue / ITERATIONS);
      }
  };

  BackgroundTaskHandler taskHandler = backgroundWorker.handle(task);
  taskHandler.execute();
}</programlisting></para>
        <para>Here in the  <code>BackgroundTask.progress()</code> method, which is executed in UI thread, the <code>ProgressBar</code> component is set to the current value. The component value should be a <code>float</code> number from  <code>0.0</code> to <code>1.0</code>.</para>
        <para id="gui_attr_progressBar_indeterminate">If a running process is unable to send information about the progress an indeterminate state of the indicator can be displayed using the  <sgmltag>indeterminate</sgmltag> attribute. Indicator shows an indeterminate state if the attribute value is  <literal>true</literal>. Default is   <literal>false</literal>. For example:<programlisting language="xml">&lt;progressBar id=&quot;progressBar&quot; width=&quot;100%&quot; indeterminate=&quot;true&quot;/&gt;</programlisting></para>
        <para><sgmltag>progressBar</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_progressBar_indeterminate">indeterminate</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_RelatedEntities">
        <title>Related Entities</title>
        <para><code>Related Entities</code> component is a popup button with a list of classes related to the entity displayed in the table. Once the user selects the required entity class, a new lookup window is opened, containing the instances of this entity class,  related to the entity instances selected in the initial table.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_relatedEntities.png"/>
          </imageobject>
        </mediaobject>
        <para>The XML-name of the component: <code>relatedEntities</code></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_relatedEntities_dia.png"/>
          </imageobject>
        </mediaobject>
          <para>The component is implemented for
              <structname>Web Client</structname>
              and<structname>Desktop Client</structname>.
          </para>
          <para>Related entities are selected according to the user permissions for entities , entity attributes and
              screens.
          </para>
          <para>By default, the lookup window for the class selected in the dropdown is defined by convention (<code>
              .browse</code>,<code>.lookup</code>). Optionally, you can define the screen explicitly in the component.
          </para>
          <para>A filter selecting records related to the selected entities is dynamically created in the lookup
              window.
          </para>
          <para>Example of using the component in screen XML-descriptor:</para>
          <programlisting language="xml"><![CDATA[
<table id="invoiceTable"
                                    multiselect="true"
                                    width="100%">
  <actions>
      <action id="create"/>
      <action id="edit"/>
      <action id="remove"/>
  </actions>
  <buttonsPanel id="buttonsPanel">
      <button id="createBtn"
              action="invoiceTable.create"/>
      <button id="editBtn"
              action="invoiceTable.edit"/>
      <button id="removeBtn"
              action="invoiceTable.remove"/>
      <relatedEntities for="invoiceTable"
                       openType=”NEW_TAB”>
      <property name="invoiceItems"
                screen="sales$InvoiceItem.lookup"
                filterCaption="msg://invoiceItems"/>
  </relatedEntities>
</buttonsPanel>
          ]]></programlisting>
        <para id="gui_attr_related_for">The <code>for</code> attribute is required. It contains the table identifier.</para>
        <para>The <code>openType=”NEW_TAB”</code> attribute sets the opening mode of the lookup windows to new tab. The entity browser is opened in the current tab by default. </para>
        <para id="gui_attr_related_property">The <code>property</code> element allows explicitly defining the related entity displayed in the dropdown.</para>
        <para><code>property</code> attributes:</para>
        <itemizedlist>
          <listitem id="gui_attr_related_property_name">
            <para><code>name</code> – the current entity attribute name, referencing the related entity. </para>
          </listitem>
          <listitem id="gui_attr_related_property_screen">
            <para><code>screen</code> – the identifier of the lookup screen that should be opened.</para>
          </listitem>
          <listitem id="gui_attr_related_property_filterCaption">
            <para><code>filterCaption</code> – the name of the dynamically generated filter.</para>
          </listitem>
        </itemizedlist>
        <para id="gui_attr_related_exclude">The  <code>exclude</code> attribute allows excluding some of the related entities from the dropdown list. The value of the property is a list of reference attributes of the current entity, separated by commas.</para>
        <figure>
          <title>Related Entities Component in a Table</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/gui_relatedEntitiesTable.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure>
          <title>Related Entities Browser in a New Tab</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/gui_relatedEntitiesBrowser.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The  <code>relatedEntities</code> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_related_exclude">exclude</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_tokenList_lookup_openType">openType</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_related_for">for</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_icon">icon</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
          </tbody></tgroup>
        </informaltable>
        <para><code>property</code> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
              </row>
              <row>buttonsPanel<entry>
                  <link linkend="gui_attr_related_property_filterCaption">filterCaption</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_related_property_name">name</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_related_property_screen">screen</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_RichTextArea">
        <title>RichTextArea</title>
        <para>This is a text area to display and enter rich text.</para>
        <para>XML name of the component:  <sgmltag>richTextArea</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_RichTextArea_dia.png"/>
          </imageobject>
        </mediaobject>
        <para><code>RichTextArea</code> is implemented only for  <structname>Web Client</structname>.</para>
        <para>Basically, <code>RichTextArea</code> mirrors the functionality of <link linkend="gui_TextField">TextField</link>, except that you cannot set  <code>datatype</code> for it. So,  <code>RichTextArea</code> is intended for work only with text and string entity attributes.</para>
        <para>You can apply formatting tools to the text entered in the  <code>RichTextArea</code> component: change the font style, size and family – using controls located at the top of the component.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_RichTextAreaInfo.png"/>
          </imageobject>
        </mediaobject>
        <para><sgmltag>richTextArea</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_property">property</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_SearchPickerField">
        <title>SearchPickerField</title>
        <para>The  <code>SearchPickerField</code> component is used to search for entity instances according to the entered string. User should enter a few characters and press  <keycap>Enter</keycap>. If several matches have been found all of them will be displayed in a drop-down list. If only one instance matches the search query it immediately becomes a component value. <code>SearchPickerField</code> allows also to perform actions by clicking on buttons on the right.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_searchPickerFieldOverlap.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component:  <sgmltag>searchPickerField</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_SearchPickerField_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for  <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <itemizedlist>
          <listitem>
            <para>To use  <sgmltag>SearchPickerField</sgmltag> component, you need to create  <link linkend="datasources">collectionDatasource</link> and specify a query, which contains corresponding search conditions. Condition must contain a parameter named  <code>custom$searchString</code>. Component will pass a substring entered by the user after pressing <keycap>Enter</keycap>. A data source with a search condition should be defined in the  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link> attribute of the component. For example:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;carDs&quot; class=&quot;com.company.sample.entity.Car&quot; view=&quot;_local&quot;/&gt;
  &lt;collectionDatasource id=&quot;coloursDs&quot; class=&quot;com.company.sample.entity.Colour&quot; view=&quot;_local&quot;&gt;
      &lt;query&gt;
          select c from sample$Colour c
          where c.name like :(?i)custom$searchString
      &lt;/query&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;searchPickerField datasource=&quot;carDs&quot; property=&quot;colour&quot; optionsDatasource=&quot;coloursDs&quot;/&gt;</programlisting></para>
            <para>In this case, the component will look for instances of  <code>Colour</code> entity according to the occurrence of the substring in its  <code>name</code> attribute. The  <code>(?i)</code> prefix is used for case-insensitive search (see  <xref linkend="datasource_query_case_insensitive"/>). The selected value will be put into the <code>colour</code> attribute of the  <code>Car</code> entity located in the   <code>carDs</code> datasource.</para>
          </listitem>
          <listitem>
            <para id="gui_attr_searchPickerField_minSearchStringLength">Using the  <sgmltag>minSearchStringLength</sgmltag> attribute the minimum number of characters, which the user should enter to search for values, can be defined.</para>
          </listitem>
          <listitem>In the screen controller two component methods can be implemented that will be invoked:<itemizedlist>
              <listitem>
                <para>If the number of entered characters is less than the value of  <code>minSearchStringLength</code> attribute.</para>
              </listitem>
              <listitem>
                <para>If the search of characters entered by the user has returned no results.</para>
              </listitem>
            </itemizedlist><para>Below is an example of implementing methods to display on-screen messages:<programlisting language="java">@Inject
private SearchPickerField colourField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  colourField.setSearchNotifications(new SearchField.SearchNotifications() {
      @Override
      public void notFoundSuggestions(String filterString) {
          showNotification(&quot;No colours found for search string: &quot; + filterString,
              NotificationType.TRAY);
      }

      @Override
      public void needMinSearchStringLength(String filterString, int minSearchStringLength) {
          showNotification(&quot;Minimum length of search string is &quot; + minSearchStringLength,
              NotificationType.TRAY);
      }
  });
}</programlisting></para></listitem>
          <listitem>
            <para><code>SearchPickerField</code> implements <link linkend="gui_LookupField">LookupField</link> and  <link linkend="gui_PickerField">PickerField</link> interfaces. Thus, it inherits the same functionality except the default list of actions added when defining the component in XML: for <code>SearchPickerField</code> these are  <code>lookup</code> <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="img/lookupBtn.png"/>
                </imageobject>
              </inlinemediaobject> and <code>open</code> <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="img/openBtn.png"/>
                </imageobject>
              </inlinemediaobject>  actions.</para>
          </listitem>
        </itemizedlist>
        <para><sgmltag>searchPickerField</sgmltag> attributes: </para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_pickerField_metaclass">metaClass</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry></row>
              <row><entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry>
                  <link linkend="gui_attr_searchPickerField_minSearchStringLength">minSearchStringLength</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>required</row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_lookupField_filterMode">filterMode</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_nullName">nullName</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>searchPickerField</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_Action">actions</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_Table">
        <title>Table</title>
        <para>The <code>Table</code> component presents information in a table view, sorts data, manages table columns and headers and invokes actions for selected rows.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_table.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component: <sgmltag>table</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_Table_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for both  <structname>Web Client</structname> and <structname>Desktop Client</structname>. </para>
        <para>An example of component definition in an XML-descriptor of a screen:</para>
        <programlisting language="xml">&lt;dsContext&gt;
 &lt;collectionDatasource id=&quot;ordersDs&quot;
                       class=&quot;com.sample.sales.entity.Order&quot;
                       view=&quot;orderWithCustomer&quot;&gt;
     &lt;query&gt;
         select o from sales$Order o order by o.date
     &lt;/query&gt;
 &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;table id=&quot;ordersTable&quot; width=&quot;300px&quot;&gt;
      &lt;columns&gt;
          &lt;column id=&quot;date&quot;/&gt;
          &lt;column id=&quot;customer.name&quot;/&gt;
          &lt;column id=&quot;amount&quot;/&gt;
      &lt;/columns&gt;
      &lt;rows datasource=&quot;ordersDs&quot;/&gt;
  &lt;/table&gt;</programlisting>
        <para>In the example the  <sgmltag>dsContext</sgmltag> element defines <link linkend="datasources">collectionDatasource</link>, which selects  <code>Order</code> entities using <link linkend="jpql">JPQL</link> query. For the  <code>table</code> component  <code>rows</code> element defines the data source that should be used, while  <code>columns</code> element defines which entity attributes from the datasource should be used as table columns.</para>
        <para><code>table</code> elements:</para>
        <itemizedlist>
          <listitem id="gui_element_table_rows">
            <para><sgmltag>rows</sgmltag> – a mandatory element; its  <code>datasource</code> attribute defines the  <link linkend="datasources">data source</link> to be used by the table.</para>
            <para id="gui_attr_table_headerMode"><code>Rows</code> element can contain  <code>rowHeaderMode</code> attribute defining how the row headers will be displayed in an extra column on the left: </para>
            <itemizedlist>
              <listitem>
                <para><code>NONE</code> – no headers (default).</para>
              </listitem>
              <listitem>
                <para><code>ICON</code> – icons. With this option, different icons for each row can be set by implementing the <code>Table.IconProvider</code> interface in the screen controller and setting it for the table:</para>
              </listitem>
            </itemizedlist>
            <programlisting language="java">@Inject
protected Table customersTable;

customersTable.setIconProvider(new Table.IconProvider() {
  @Nullable
  @Override
  public String getItemIcon(Entity entity) {
      CustomerGrade grade = ((Customer) entity).getGrade();
      switch (grade) {
          case PREMIUM: return &quot;icons/premium_grade.png&quot;;
          case HIGH: return &quot;icons/high_grade.png&quot;;
          case MEDIUM: return &quot;icons/medium_grade.png&quot;;
          default: return null;
      }
  }
});</programlisting>
          </listitem>
          <listitem id="gui_element_table_columns">
            <para><sgmltag>columns</sgmltag> – a mandatory element defining the set of columns for a table. </para>
            <para>Each column is described in a nested  <code>column</code> element with the following attributes:</para>
          <itemizedlist>
                <listitem id="gui_attr_table_column_id">
                  <para><sgmltag>id</sgmltag> − a mandatory attribute, contains the name of an entity attribute displayed in the column. Can be either an attribute of the entity from the data source or a linked entity – object graph traversal is indicated with a dot. For example:<programlisting language="xml">&lt;columns&gt;
  &lt;column id=&quot;date&quot;/&gt;
  &lt;column id=&quot;customer&quot;/&gt;
  &lt;column id=&quot;customer.name&quot;/&gt;
  &lt;column id=&quot;customer.address.country&quot;/&gt;
&lt;/columns&gt;</programlisting></para>
                </listitem>
                <listitem id="gui_attr_table_column_caption">
                  <para><sgmltag>caption</sgmltag> − an optional attribute containing the column caption. If not specified, a  <link linkend="entity_localization">localized attribute name</link> will be displayed.</para>
                </listitem>
                <listitem id="gui_attr_table_column_collapsed">
                  <para><sgmltag>collapsed</sgmltag> − an optional attribute; hides the column by default when set to <code>true</code>. Users can control column’s visibility using the menu accessible via a  <inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="img/gui_table_columnControl.png"/>
                      </imageobject>
                    </inlinemediaobject> button in the top right part of the table when the table’s  <code>columnControlVisible</code> attribute is not  <code>false</code>. By default,  <code>collapsed</code> is set to  <literal>false</literal>.</para>
                </listitem>
                <listitem id="gui_attr_table_column_width">
                  <para><sgmltag>width</sgmltag> − an optional attribute controlling default column width.</para>
                </listitem>
                <listitem id="gui_attr_table_column_width_1">
                  <para><sgmltag>align</sgmltag> − an optional attribute that sets text align for column cells. Possible values: <code>LEFT</code>, <code>RIGHT</code>, <code>CENTER</code>. Default is <code>LEFT</code>.</para>
                </listitem>
                <listitem id="gui_attr_table_column_editable">
                  <para><sgmltag>editable</sgmltag> − an optional attribute allowing / prohibiting editing of the corresponding column in the table. In order for a column to be editable, the  <code>editable</code> attribute of the entire table (see below) should be set to <code>true</code> as well.</para>
                </listitem>
                <listitem id="gui_attr_table_column_maxTextLength">
                  <para><sgmltag>maxTextLength</sgmltag> – an optional attribute allowing  to limit the number of characters in a cell. If the difference between the actual and the maximum allowed number of characters does not exceed the 10 character threshold, the &quot;extra” characters remain unhidden. To see the entire record, users need to click on its visible part. An example of a column with a 5 character limitation:</para>
                  <mediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="img/gui_table_column_maxTextLength.png"/>
                    </imageobject>
                  </mediaobject>
                </listitem>
                <listitem id = "gui_attr_table_column_link">
                    <para><code>link</code> - if set to <code>true</code>, allows displaying a link to an entity editor in a table column (supported for <structname>Web Client</structname> only). The <code>link</code> attribute may be set to true for primitive type columns, too; in this case, the main entity editor will be opened. This approach may be used to ease the navigation: the users will be able to open entity editors simply by clicking on some key attributes.</para>
                </listitem>
                <listitem id = "gui_attr_table_column_linkScreen">
                    <para><code>linkScreen</code> - contains the identifier of the screen that is opened by clicking the link enabled in the <code>link</code> attribute.</para>
                </listitem>
                <listitem id = "gui_attr_table_column_linkScreenOpenType">
                    <para><code>linkScreenOpenType</code> - sets the screen opening mode (<code>THIS_TAB</code>, <code>NEW_TAB</code> or <code>DIALOG</code>).</para>
                </listitem>
                <listitem id = "gui_attr_table_column_linkInvoke">
                    <para><code>linkInvoke</code> - invokes the controller method instead of opening the screen.</para>
                </listitem>
                <listitem>
                <para><code>column</code> element may contain a nested <link linkend="gui_formatter">formatter</link> element that allows to represent the attribute value in a format different from the standard for this <link linkend="datatype">Datatype</link>:</para>
                <programlisting language="xml">&lt;column id=&quot;date&quot;&gt;
  &lt;formatter class=&quot;com.haulmont.cuba.gui.components.formatters.DateFormatter&quot; format=&quot;yyyy-MM-dd HH:mm:ss&quot;/&gt;
&lt;/column&gt;</programlisting>
               </listitem>
              </itemizedlist></listitem>
          <listitem id="gui_attr_table_rowsCount">
            <para><sgmltag>rowsCount</sgmltag> − an optional element adding the  <code>RowsCount</code> component for the table; this component allows loading the table data in pages. Page size can be defined by limiting the number of records in the data source using  <code>CollectionDatasource.setMaxResults()</code> method. Typically, this is performed by a  <link linkend="gui_Filter">Filter</link> component linked to the table’s data source. However, if there is no generic filter, this method can be called directly from the screen controller.</para>
            <para><code>RowsCount</code> component can also show the total number of records returned by the current query from the datasource without extracting the records themselves. It invokes <code>AbstractCollectionDatasource.getCount()</code> when user clicks the <guilabel>?</guilabel> icon, which results in performing a database query with the same conditions as the current query, but using a <code>COUNT(*)</code> aggregate  function instead. The number retrieved is displayed instead of the <guilabel>?</guilabel> icon.</para>
          </listitem>
          <listitem>
            <para id="gui_element_table_actions"><sgmltag>actions</sgmltag> − an optional element describing the  <link linkend="gui_Action">actions</link>, related to the table. In addition to custom arbitrary actions, the element supports the following  <link linkend="standard_actions">standard actions</link>, defined in   <code>ListActionType</code> enum: <code>create</code>, <code>edit</code>, <code>remove</code>, <code>refresh</code>, <code>add</code>, <code>exclude</code>, <code>excel</code>.</para>
          </listitem>
          <listitem>
            <para><code>buttonsPanel</code> – an optional element, which adds a <link linkend="gui_ButtonsPanel">ButtonsPanel</link> container to show action buttons above the table.</para>
          </listitem>
        </itemizedlist>
        <para><code>table</code> attributes:</para>
        <itemizedlist>
          <listitem id="gui_attr_table_multiselect">
            <para><code>multiselect</code> attribute allows setting multiple selection mode for table rows. If  <code>multiselect</code> is <code>true</code>, users can select multiple rows in the table using keyboard or mouse holding <keycap>Ctrl</keycap> or <keycap>Shift</keycap> keys. By default, multiple selection mode is switched off.</para>
          </listitem>
          <listitem id="gui_attr_table_sortable">
            <para><sgmltag>sortable</sgmltag> attribute enables sorting data in the table. By default, it is set to  <literal>true</literal>. If sorting is allowed, clicking a column header will show a <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="img/gui_sortable_down.png"/>
                </imageobject>
              </inlinemediaobject>/<inlinemediaobject>
                <imageobject>
                  <imagedata fileref="img/gui_sortable_up.png"/>
                </imageobject>
              </inlinemediaobject> icon to the right of the column name.</para>
            <para>Table sorting can be performed differently depending on whether all the records can be placed on one page or not. If they can, sorting is performed in memory without database queries. If there is more than one page, sorting is performed in the database by sending a new query with the corresponding  <code>ORDER BY</code> condition. For database sorting to work correctly, the table column must refer to a local attribute of an entity, not the entire linked entity. I.e., if the table is showing <code>Order</code> instances and you need to show a column with a name of the related  <code>Customer</code>, it is better  to declare a column for the  <code>customer.name</code> attribute instead of the  <code>customer</code> entity itself (as in the example above). In the latter case the customer name will be shown as well,  if the  <link linkend="namePattern">instance name</link> for a  <code>Customer</code> contains the  <code>name</code> attribute, but sorting will not work for this column if the  <code>Order</code> entities do not fit on one page.</para>
          </listitem>
          <listitem id="gui_attr_table_presentations">
            <para><sgmltag>presentations</sgmltag> attribute controls the mechanism of <link linkend="gui_Table_presentations">presentations</link>. By default, the value is <literal>false</literal>. If the attribute value is  <literal>true</literal>, a corresponding icon is added to the top right corner of the table  <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="img/gui_presentation.png"/>
                </imageobject>
              </inlinemediaobject>. The mechanism of presentations is implemented for the  <structname>Web Client</structname> only.</para>
          </listitem>
          <listitem id="gui_attr_table_columnControlVisible">
            <para>Setting  <sgmltag>columnControlVisible</sgmltag> attribute to  <code>false</code> forbids the user to hide columns using the drop-down menu of the  <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="img/gui_table_columnControl.png"/>
                </imageobject>
              </inlinemediaobject> button in the right part of the table header. Currently displayed columns are marked with checkmarks in the menu.</para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_table_columnControl_all.png"/>
              </imageobject>
            </mediaobject>
          </listitem>
          <listitem>
            <para id="gui_attr_table_reorderingAllowed">Setting  <sgmltag>reorderingAllowed</sgmltag> attribute to <code>false</code> forbids users to change columns order by dragging them with a mouse. </para>
          </listitem>
          <listitem>
            <para id="gui_attr_table_allowPopupMenu"><sgmltag>contextMenuEnabled</sgmltag> attribute enables the context menu. By default this attribute is set to  <sgmltag>true</sgmltag>. The context menu shows table actions (if any) and the <structname>System Information</structname> item containing information on the selected entity (if the user has    <code>cuba.gui.showInfo</code> <link linkend="permissions">permission</link>).</para>
          </listitem>
          <listitem>
            <para>Setting <sgmltag>multiLineCells</sgmltag> to  <code>true</code> enables multi-line display for cells containing several lines of text. In this mode, the web browser will load all the rows of the current table page at once, instead of lazy-loading the visible part of the table. It is required for proper scrolling in the Web Client. The default value is <code>false</code>.</para>
          </listitem>
          <listitem>
            <para><code>aggregatable</code> attribute enables aggregation for table rows. The following operations are supported:<itemizedlist>
                <listitem>
                  <para><code>SUM</code> – calculate the sum</para>
                </listitem>
                <listitem>
                  <para><code>AVG</code> – find the average value</para>
                </listitem>
                <listitem>
                  <para><code>COUNT</code> – calculate the total number</para>
                </listitem>
                <listitem>
                  <para><code>MIN</code> – find the minimum value</para>
                </listitem>
                <listitem>
                  <para><code>MAX</code> – find the maximum value</para>
                </listitem>
              </itemizedlist></para>
            <para>The <code>aggregation</code> element should be set for aggregated table cells with the  <code>type</code> attribute, which sets the aggregation function. The aggregated table values are shown in an additional row  at the top of the table. An example of an aggregated table description:<programlisting language="xml">&lt;table id=&quot;itemsTable&quot;
     aggregatable=&quot;true&quot;&gt;
  &lt;columns&gt;
      &lt;column id=&quot;product&quot;/&gt;
      &lt;column id=&quot;quantity&quot;/&gt;
      &lt;column id=&quot;amount&quot;&gt;
          &lt;aggregation type=&quot;SUM&quot;/&gt;
      &lt;/column&gt;
  &lt;/columns&gt;
  &lt;rows datasource=&quot;itemsDs&quot;/&gt;
&lt;/table&gt;</programlisting></para>
            <para>A <link linkend="gui_formatter">Formatter</link> can be specified to display the aggregated value in the format other than the standard for this  <link linkend="datatype">Datatype</link>:<programlisting language="xml" lang="">&lt;column id=&quot;amount&quot;&gt;
  &lt;aggregation type=&quot;SUM&quot;&gt;
      &lt;formatter class=&quot;com.haulmont.sample.MyFormatter&quot;/&gt;
  &lt;/aggregation&gt;
&lt;/column&gt;</programlisting></para>
          </listitem>
          <listitem>
            <para><code>editable</code> attribute allows switching the table to in-place editing mode for cells. In this mode, the columns with  <code>editable = true</code> attribute show components to edit the attributes of the corresponding entity.</para>
            <para>The component type for each editable column is selected automatically based on the type of the corresponding entity attribute. For example, for string and numeric attributes, the application will use <link linkend="gui_TextField">TextField</link>, for  <code>Date</code> – <link linkend="gui_DateField">DateField</link>, for lists –  <link linkend="gui_LookupField">LookupField</link>, for links to other entities – <link linkend="gui_PickerField">PickerField</link>. </para>
            <para>For a <code>Date</code> type editable column, you can additionally define  <code>dateFormat</code> or  <code>resolution</code> attributes similar to the ones described for the  <link linkend="gui_DateField">DateField</link>.</para>
            <para><link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link> and <link linkend="gui_attr_basic_captionProperty">captionProperty</link> attributes can be additionally defined for an editable column showing a linked entity. If  <code>optionsDatasource</code> is set, the application will use <link linkend="gui_LookupField">LookupField</link> instead of  <link linkend="gui_PickerField">PickerField</link>.</para>
            <para>Custom configuration (including editing) of a cell can be performed using <code>Table.addGeneratedColumn()</code> method – see below.</para>
          </listitem>
        </itemizedlist>
        <para>Methods of the  <code>Table</code> interface:</para>
        <itemizedlist>
          <listitem>
            <para><code>getSelected()</code>, <code>getSingleSelected()</code> return instances of the entities corresponding to the selected rows of the table. A collection can be obtained by invoking  <code>getSelected()</code>. If nothing is selected, the application returns an empty set. If  <code>multiselect</code> is disabled, it is more convenient to use  <code>getSingleSelected()</code> method returning one selected entity or  <code>null</code>, if nothing is selected.</para>
          </listitem>
          <listitem>
            <para><code>addGeneratedColumn()</code>  method allows to define custom representation of data in a column. It takes two parameters: identifier of the column and an implementation of the <code>Table.ColumnGenerator</code> interface. Identifier can match one of the identifiers set for table columns in XML-descriptor – in this case the new column is inserted instead of the one defined in XML. If the identifier does not match any of the columns, a new column is added to the right.</para>
            <para><code>generateCell()</code> method of the  <code>Table.ColumnGenerator</code> interface is invoked for each row of the table. The method receives an instance of the entity displayed in the corresponding row.  <code>generateCell()</code> method should return a visual component which will be displayed in the cell. </para>
            <para>Example of using the component:<programlisting language="java">@Inject
protected Table carsTable;

@Inject
protected ComponentsFactory componentsFactory;

@Override
public void init(Map&lt;String, Object&gt; params) {
  carsTable.addGeneratedColumn(&quot;colour&quot;, new Table.ColumnGenerator() {
      @Override
      public Component generateCell(Entity entity) {
          LookupPickerField field = componentsFactory.createComponent(LookupPickerField.NAME);
          field.setDatasource(carsTable.getItemDatasource(entity), &quot;colour&quot;);
          field.setOptionsDatasource(coloursDs);
          field.addLookupAction();
          field.addOpenAction();
          return field;
      }
  });
}</programlisting></para>
            <para>In the example above, all cells within the <code>colour</code> column in the table show the <link linkend="gui_LookupPickerField">LookupPickerField</link> component. The component should save its value into the <code>colour</code> attribute of the entity which instance is displayed in the corresponding row. For this purpose   <code>getItemDatasource()</code> method is used to get the datasource for the current  entity instance from the table and pass it to the  <code>LookupPickerField</code> component.</para>
            <para>If  <code>addGeneratedColumn()</code> method receives the identifier of a column which is not declared in XML-descriptor, the header for the new column to be set as  follows:<programlisting language="java">carsTable.getColumn(&quot;colour&quot;).setCaption(&quot;Colour&quot;);</programlisting></para>
          </listitem>
          <listitem>
            <para><code>setStyleProvider()</code> method allows setting table cell display style. The method accepts an implementation of  <code>Table.StyleProvider</code> interface as a parameter.  <code>getStyleName()</code> method of this interface is invoked by the table for each row and each cell separately. If the method is invoked for a row, the first parameter contains the entity instance displayed by the row, the second parameter is <code>null</code>. If the method is called for a cell, the second parameter contains the name of the attribute displayed by the cell.</para>
            <para>Example of setting a style:<programlisting language="java">@Inject
protected Table customersTable;

@Override
public void init(Map&lt;String, Object&gt; params) {
  customersTable.setStyleProvider(new Table.StyleProvider() {
      @Nullable
      @Override
      public String getStyleName(Entity entity, @Nullable String property) {
          Customer customer = (Customer) entity;
          if (property == null) {
              // style for row
              if (hasComplaints(customer))
                  return &quot;unsatisfied-customer&quot;;
          } else if (property.equals(&quot;grade&quot;)) {
              // style for column &quot;grade&quot;
              switch (customer.getGrade()) {
                  case PREMIUM: return &quot;premium-grade&quot;;
                  case HIGH: return &quot;high-grade&quot;;
                  case MEDIUM: return &quot;medium-grade&quot;;
                  default: return null;
              }
          }
          return null;
      }
  });
}</programlisting></para>
            <para>Then the cell and row styles set in the application theme should be defined. Detailed information on creating a theme is available in   <xref linkend="gui_themes"/>. For web client, new styles are defined in the   <filename>styles.scss</filename> file. Style names defined in the controller, together with prefixes identifying table row and column form CSS selectors. For example:<programlisting language="css">.v-table-row-unsatisfied-customer {
  font-weight: bold;
}

.v-table-cell-content-premium-grade {
background-color: red;
}

.v-table-cell-content-high-grade {
background-color: green;
}

.v-table-cell-content-medium-grade {
background-color: blue;
}</programlisting></para>
          </listitem>
          <listitem>
            <para><code>addPrintable()</code> method allows setting a custom presentation of the data within a column when exporting to an XLS file via the <code>excel</code>   <link linkend="standard_actions">standard action</link> or  directly using the  <code>ExcelExporter</code> class. The method accepts the column identifier and an implementation of the  <code>Table.Printable</code> interface for the column. For example:<programlisting language="java">ordersTable.addPrintable(&quot;customer&quot;, new Table.Printable&lt;Customer, String&gt;() {
  @Override
  public String getValue(Customer customer) {
return &quot;Name: &quot; + customer.getName;
  }
});</programlisting></para>
            <para><code>getValue()</code> method of the <code>Table.Printable</code> interface should return data to be displayed in the table cell. This is not necessarily a string – the method may return values of other types, for example, numeric data or dates, which will be represented in the XLS file accordingly. </para>
            <para>If  formatted output to XLS is required for a generated column, an implementation of the   <code>Table.PrintableColumnGenerator</code> interface passed to the  <code>addGeneratedColumn()</code> method should be used. The value for a cell in an XLS document is defined in the  <code>getValue()</code> method of this interface:<programlisting language="java">ordersTable.addGeneratedColumn(&quot;product&quot;, new Table.PrintableColumnGenerator&lt;Order, String&gt;() {
  @Override
  public Component generateCell(Order entity) {
    Label label = componentsFactory.createComponent(Label.NAME);
    Product product = order.getProduct();
    label.setValue(product.getName() + &quot;, &quot; + product.getCost());
    return label;
  }

  @Override
  public String getValue(Order entity) {
    Product product = order.getProduct();
    return product.getName() + &quot;, &quot; + product.getCost();
  }
});</programlisting></para>
            <para>If <code>Printable</code> presentation is not defined for a generated column in one way or another, then the column will either show the value of corresponding entity attribute or nothing if there is no associated entity attribute.</para>
          </listitem>
          <listitem>
            <para>The  <code>setItemClickAction()</code> method allows to define an  <link linkend="gui_Action">action</link> that will be performed when a table row is double-clicked. If such action is not defined, the table will attempt to find an appropriate one in the list of its actions in the following order: <itemizedlist>
                <listitem>
                  <para>The action assigned to the  <keycap>Enter</keycap> key by the  <code>shortcut</code> property</para>
                </listitem>
                <listitem>
                  <para>The  <code>edit</code> action</para>
                </listitem>
                <listitem>
                  <para>The <code>view</code> action</para>
                </listitem>
              </itemizedlist></para>
            <para>If such action is found, and has <code>enabled = true</code> property, the action is executed.</para>
          </listitem>
          <listitem>
            <para>The  <code>setEnterPressAction()</code> allows to define an  <link linkend="gui_Action">action</link> executed when  <keycap>Enter</keycap> is pressed. If such action is not defined, the table will attempt to find an appropriate one in the list of its actions in the following order: <itemizedlist>
                <listitem>
                  <para>The action defined by the  <code>setItemClickAction()</code> method</para>
                </listitem>
                <listitem>
                  <para>The action assigned to the  <keycap>Enter</keycap> key by the  <code>shortcut</code> property</para>
                </listitem>
                <listitem>
                  <para>The  <code>edit</code> action</para>
                </listitem>
                <listitem>
                  <para>The <code>view</code> action</para>
                </listitem>
              </itemizedlist></para>
            <para>If such action is found, and has <code> enabled = true</code> property, the action is executed.</para>
          </listitem>
        </itemizedlist>
        <para><sgmltag>table</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry>
                  <link linkend="gui_attr_table_allowPopupMenu">allowPopupMenu</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_table_multiselect">multiselect</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_table_columnControlVisible">columnControlVisible</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_table_presentations">presentations</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_table_reorderingAllowed">reorderingAllowed</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_margin">margin</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_table_sortable">sortable</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>table</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_element_table_actions">actions</link>
                </entry>
              </row>
              <row>buttonsPanel<entry>
                  <link linkend="gui_ButtonsPanel">buttonsPanel</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_element_table_columns">columns</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_element_table_rows">rows</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_table_rowsCount">rowsCount</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para><link linkend="gui_element_table_columns">column</link> attributes:</para>
          <informaltable frame="none" pgwide="0" align="left">
              <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
                  <row>
                      <entry align="left">
                          <link linkend="gui_attr_table_column_caption">caption</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_dateField_dateFormat">dateFormat</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_table_column_linkInvoke">linkInvoke</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                      </entry>
                  </row>
                  <row>
                      <entry>
                          <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                      </entry>
                      <entry align="left">
                          <link linkend="gui_attr_table_column_editable">editable</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_table_column_linkScreen">linkScreen</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_dateField_resolution">resolution</link>
                      </entry>
                  </row>
                  <row>
                      <entry align="left">
                          <link linkend="gui_attr_basic_clickAction">clickAction</link>
                      </entry>
                      <entry align="left">
                          <link linkend="gui_attr_table_column_id">id</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_table_column_linkScreenOpenType">linkScreenOpenType</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_basic_visible">visible</link>
                      </entry>
                  </row>
                  <row>
                      <entry align="left">
                          <link linkend="gui_attr_table_column_collapsed">collapsed</link>
                      </entry>
                      <entry align="left">
                          <link linkend="gui_attr_table_column_link">link</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_table_column_maxTextLength">maxTextLength</link>
                      </entry>
                      <entry>
                          <link linkend="gui_attr_table_column_width">width</link>
                      </entry>
                  </row>
              </tbody></tgroup>
          </informaltable>
        <para><link linkend="gui_element_table_columns">column</link> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_formatter">formatter</link>
                </entry>editable</row>
            </tbody></tgroup>
        </informaltable>
        <para><link linkend="gui_element_table_rows">rows</link> attribute:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>editable</row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_TextArea">
        <title>TextArea</title>
        <para><code>TextArea</code>  is a multi-line  text editor field.</para>
        <para>XML-name of the component:  <sgmltag>textArea</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_TextArea_dia.png"/>
          </imageobject>
        </mediaobject>
        <para><code>TextArea</code> component is implemented for both <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <para><code>TextArea</code> mostly replicates the functionality of the <link linkend="gui_TextField">TextField</link> component except that a  <code>datatype</code> can not be assigned to it. I.e. <code>TextArea</code> is intended to be used for text and string attributes of entities only.</para>
        <para><code>TextArea</code> component has the following attributes:</para>
        <itemizedlist>
          <listitem>
            <para id="gui_attr_textArea_cols_rows"><sgmltag>cols</sgmltag> and  <sgmltag>rows</sgmltag> set the number of columns and rows of text:<programlisting language="xml">&lt;textArea id=&quot;textArea&quot; cols=&quot;20&quot; rows=&quot;5&quot; caption=&quot;msg://name&quot;/&gt;</programlisting></para>
            <para>The values of  <code>cols</code> and  <code>rows</code> have priority over the values of <code>width</code> and <code>height</code>.</para>
          </listitem>
          <listitem>
            <para id="gui_attr_textArea_resizable"><sgmltag>resizable</sgmltag> – if this attribute is set to  <literal>true</literal> and the number of rows is more than one, it becomes possible to change the size of the component:</para>
            <programlisting language="xml">&lt;textArea id=&quot;textArea&quot; resizable=&quot;true&quot; caption=&quot;msg://name&quot; rows=&quot;5&quot;/&gt;</programlisting>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_textField_resizable.png"/>
              </imageobject>
            </mediaobject>
          </listitem>
        </itemizedlist>
        <para><sgmltag>textArea</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="5" colsep="1" rowsep="1" align="left"><colspec colname="c0"/><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry>
                  <link linkend="gui_attr_basic_align">align</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_description">description</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_textField_trim">trim</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_textField_maxLength">maxLength</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_textArea_resizable">resizable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_textArea_cols_rows">cols</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_textArea_cols_rows">rows</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_required">required</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_TextField">
        <title>TextField</title>
        <para><code>TextField</code> is a component for text editing. It can be used both for working with entity attributes and entering/displaying arbitrary textual information.</para>
        <para>XML-name of the component:  <sgmltag>textField</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_TextField_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>Text field component is implemented for both  <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <itemizedlist>
          <listitem><para>An example of a text field with a caption retrieved from the  <link linkend="message_packs">localized messages pack</link>:<programlisting language="xml">&lt;textField id=&quot;nameField&quot; caption=&quot;msg://name&quot;/&gt;</programlisting></para>The figure below shows an example of a simple text field.<mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_textField.png"/>
              </imageobject>
            </mediaobject></listitem>
          <listitem>
            <para>To create a text field connected to data, <link linkend="gui_attr_basic_datasource">datasource</link> and  <link linkend="gui_attr_basic_property">property</link> attributes should be used.<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;customerDs&quot; class=&quot;com.sample.sales.entity.Customer&quot; view=&quot;_local&quot;/&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;textField datasource=&quot;customerDs&quot; property=&quot;name&quot; caption=&quot;msg://name&quot;/&gt;</programlisting></para>
            <para>As you can see in the example, the screen describes the  <literal>customerDs</literal> <link linkend="datasources">datasource</link> for     <code>Customer</code> entity, which has  <code>name</code> attribute. The text field component has a link to the data source specified in the  <link linkend="gui_attr_basic_datasource">datasource</link> attribute;  <link linkend="gui_attr_basic_property">property</link> attribute contains the name of the entity attribute that should be displayed in the text field.</para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_textField_data.png"/>
              </imageobject>
            </mediaobject>
          </listitem>
          <listitem>
            <para id="gui_attr_textField_datatype">If the field is not connected to an entity attribute (i.e. the data source and attribute name are not set), you can set the data type using the  <sgmltag>datatype</sgmltag> attribute. It is used to format field values. The attribute value accepts any data type registered in the application metadata – see <xref linkend="datatype"/>. Typically,  <code>TextField</code> uses the following data types:</para>
            <itemizedlist>
              <listitem>
                <para><literal>decimal</literal></para>
              </listitem>
              <listitem>
                <para><literal>double</literal></para>
              </listitem>
              <listitem>
                <para><literal>int</literal></para>
              </listitem>
              <listitem>
                <para><literal>long</literal></para>
              </listitem>
            </itemizedlist>
            <para>As an example, let’s look at a text field with an  <literal>Integer</literal> data type. <programlisting language="xml">&lt;textField id=&quot;integerField&quot; datatype=&quot;int&quot; caption=&quot;msg://integerFieldName&quot;/&gt;</programlisting></para>
            <para>If a user enters a value that cannot be interpreted as an integer number, then when the field looses focus, the application will show an error message and revert field value to the previous one:</para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_textField_int.png"/>
              </imageobject>
            </mediaobject>
          </listitem>
          <listitem>
            <para>Text field can be assigned a <link linkend="gui_validator">validator</link> – a class implementing  <code>Field.Validator</code> interface. The validator limits user input in addition to what is already done by the <code>datatype</code>. For example, to create an input field for positive integer numbers, you need to create a validator class: <programlisting language="java">public class PositiveIntegerValidator implements Field.Validator {
  @Override
  public void validate(Object value) throws ValidationException {
      Integer i = (Integer) value;
      if (i &lt;= 0)
          throw new ValidationException(&quot;Value must be positive&quot;);
  }
}</programlisting></para>
            <para>and assign it as a validator to the text field with    <code>int</code> datatype:<programlisting language="xml">&lt;textField id=&quot;integerField&quot; datatype=&quot;int&quot;&gt;
  &lt;validator class=&quot;com.sample.sales.gui.PositiveIntegerValidator&quot;/&gt;
&lt;/textField&gt;</programlisting></para>
            <para>Unlike  input check against the data type,  validation is performed not when the field looses focus, but after  invocation of the field’s <code>validate()</code> method. It means that the field (and the linked entity attribute) may temporarily contain a value that does not satisfy validation conditions (a non-positive number in the example above). This should not be an issue, because validated fields are typically used in <link linkend="screen_edit">editor screens</link>, which automatically invoke validation for all their fields before commit. If the field is located not in an editing screen, the field’s <code>validate()</code> method should be invoked explicitly in the controller.</para>
          </listitem>
          <listitem id="gui_attr_textField_maxLength">
            <para>If a text field is linked to an entity attribute (via  <code>datasource</code> and  <code>property</code>), and if the entity attribute has a <code>length</code> parameter defined in the <code>@Column</code> JPA-annotation, then the <code>TextField</code> will limit the maximum length of entered text accordingly.</para>
            <para>If a text field is not linked to an attribute, or if the attribute does not have  <code>length</code> value defined, or this value needs to be overridden, then the maximum length of the entered text can be limited using  <sgmltag>maxLength</sgmltag> attribute. The value of &quot;-1&quot; means there are no limitations. For example:<programlisting language="xml">&lt;textField id=&quot;shortTextField&quot; maxLength=&quot;10&quot;/&gt;</programlisting></para>
          </listitem>
          <listitem id="gui_attr_textField_trim">
            <para>By default, text field trims spaces at the beginning and at the end of the entered string. I.e. if user enters      &quot;                <userinput> aaa bbb </userinput> &quot;, the value of the field returned by the  <code>getValue()</code> method and saved to the linked entity attribute will be &quot;<userinput>aaa bbb</userinput>&quot;. You can disable trimming of spaces by setting the  <sgmltag>trim</sgmltag> attribute to  <code>false</code>.</para>
            <para>It should be noted that trimming only works when users enter a new value. If the value of the linked attribute already has spaces in it, the spaces will be displayed until user edits the value.</para>
          </listitem>
          <listitem>
            <para>Text field always returns  <code>null</code> instead of an entered empty string. Therefore, with the   <sgmltag>trim</sgmltag> attribute enabled, any string containing spaces only will be converted to  <code>null</code>.</para>
          </listitem>
        </itemizedlist>
        <para><sgmltag>textField</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry></row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_textField_datatype">datatype</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_textField_maxLength">maxLength</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_textField_trim">trim</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>textField</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_TimeField">
        <title>TimeField</title>
        <para><code>TimeField</code> is a field to display and enter date and time values.</para>
        <mediaobject>
          <imageobject>
            <imagedata fileref="img/gui_timeField.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component:  <sgmltag>timeField</sgmltag>.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_timeField_dia.png"/>
          </imageobject>
        </mediaobject>
        <para><code>TimeField</code> component is implemented for both   <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <itemizedlist>
          <listitem>
            <para>To create a date field associated with data, <link linkend="gui_attr_basic_datasource">datasource</link> and  <link linkend="gui_attr_basic_property">property</link> attributes should be used:</para>
            <programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;orderDs&quot; class=&quot;com.sample.sales.entity.Order&quot; view=&quot;_local&quot;/&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;timeField datasource=&quot;orderDs&quot; property=&quot;deliveryTime&quot;/&gt;</programlisting>
            <para>As you can see in the example above, the screen defines the <code>orderDs</code> <link linkend="datasources">data source</link> for <code>Order</code> entity, which has <code>deliveryTime</code> attribute. The <code>datasource</code> attribute of the time input component contains a link to the <code>datasource</code>, and the <code>property</code> attribute – the name of the entity attribute displayed in the field.</para>
            <para>Related entity attribute should have  <code>java.util.Date</code> or <code>java.sql.Time</code> type.</para>
          </listitem>
          <listitem>
            <para>The time format for representation is defined by the <code>time</code> <link linkend="datatype">datatype</link> and is specified in the   <link linkend="main_message_pack">main localized messages pack</link> in the  <code>timeFormat</code> key.</para>
          </listitem>
          <listitem>
            <para id="gui_attr_timeField_showSeconds">Regardless of the mentioned above format display of seconds can be controlled using  <sgmltag>showSeconds</sgmltag> attribute. By default, seconds are displayed if the format contains &quot;<code>ss&quot;</code>.<programlisting language="xml">&lt;timeField datasource=&quot;orderDs&quot; property=&quot;createTs&quot; showSeconds=&quot;true&quot;/&gt;</programlisting><mediaobject>
                <imageobject>
                  <imagedata fileref="img/gui_timeFieldSec.png"/>
                </imageobject>
              </mediaobject></para>
          </listitem>
        </itemizedlist>
        <para><sgmltag>timeField</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_property">property</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_required">required</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_timeField_showSeconds">showSeconds</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>timeField</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="gui_TokenList">
        <title>TokenList</title>
        <para><code>TokenList</code> component offers a simplified way of working with lists: instance names are listed vertically or horizontally, adding is done using drop-down list, removal – using the buttons located near each instance.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_tokenList.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component: <sgmltag>tokenList</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_TokenList_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for both <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        <para>Below is an example description of  <code>TokenList</code> in an XML-descriptor of a screen:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;orderDs&quot;
              class=&quot;com.sample.sales.entity.Order&quot;
              view=&quot;order-edit&quot;&gt;
      &lt;collectionDatasource id=&quot;productsDs&quot; property=&quot;products&quot;/&gt;
  &lt;/datasource&gt;
  &lt;collectionDatasource id=&quot;allProductsDs&quot;
                        class=&quot;com.sample.sales.entity.Product&quot;
                        view=&quot;_minimal&quot; &gt;
      &lt;query&gt;select p from sales$Product p order by p.name&lt;/query&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;tokenList id=&quot;productsList&quot; datasource=&quot;productsDs&quot; inline=&quot;true&quot; width=&quot;500px&quot;&gt;
      &lt;lookup optionsDatasource=&quot;allProductsDs&quot;/&gt;
      &lt;button caption=&quot;msg://add&quot;/&gt;
  &lt;/tokenList&gt;</programlisting></para>
        <para>In the example the nested <code>productsDs</code> <link linkend="datasources">datasource</link> which includes a collection of products within an order is defined in <code>dsContext</code>, as well as <code>allProductsDs</code> datasource containing a collection of all products available in the database. The <code>TokenList</code> component with <code>productsList</code> identifier displays the content of the <code>productsDs</code> datasource and allows changing the collection by adding instances from <code>allProductsDs</code>.</para>
        <para><code>tokenList</code> attributes:<itemizedlist>
            <listitem>
              <para id="gui_attr_tokenList_position"><sgmltag>position</sgmltag> – sets the position for the drop-down list. The attribute can take two values: <code>TOP</code>, <code>BOTTOM</code>. Default is  <code>TOP</code>.</para>
              <mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="img/gui_tokenListBottom.png"/>
                </imageobject>
              </mediaobject>
            </listitem>
            <listitem>
              <para id="gui_attr_tokenList_inline"><code>inline</code> attribute defines how the list with selected items will be displayed: vertically or horizontally. <code>true</code> corresponds to horizontal alignment, <code>false</code> – to vertical. An example of a component with horizontal alignment:</para>
              <mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="img/gui_tokenListInline.png"/>
                </imageobject>
              </mediaobject>
            </listitem>
            <listitem>
              <para id="gui_attr_tokenList_simple"><sgmltag>simple</sgmltag> – when set to <code>true</code>, the items selection component will be hidden with only the <guibutton>Add</guibutton> button left. Clicking the <guibutton>Add</guibutton> button opens the screen with the list of entity instances which type is defined by the datasource. Selection screen identifier is selected according to the rules for the <code>PickerField.LookupAction</code> standard action.</para>
            </listitem>
          </itemizedlist></para>
        <para><code>tokenList</code> elements:<itemizedlist>
            <listitem id="gui_element_tokenList_lookup">
              <para><sgmltag>lookup</sgmltag> − values selection component descriptor.</para>
              <para>Attributes of the  <code>lookup</code> attribute:</para>
              <para><itemizedlist>
                  <listitem id="gui_attr_tokenList_lookup_lookup">
                    <para><sgmltag>lookup</sgmltag> attribute makes it possible to select items using an entity lookup screen:</para>
                    <mediaobject>
                      <imageobject>
                        <imagedata align="center" fileref="img/gui_tokenListLookup.png"/>
                      </imageobject>
                    </mediaobject>
                  </listitem>
                  <listitem id="gui_attr_tokenList_lookup_lookupScreen">
                    <para><code>lookupScreen</code> attribute sets the identifier of the screen used for items selection in <code>lookup=&quot;true&quot;</code> mode. If this attribute is not set, screen identifier is selected according to the rules for the <code>PickerField.LookupAction</code>    <link linkend="standard_actions">standard action</link>.</para>
                  </listitem>
                  <listitem id="gui_attr_tokenList_lookup_openType">
                    <para><sgmltag>openType</sgmltag> attribute defines how the lookup screen will be opened, similar to what is described for the   <code>PickerField.LookupAction</code> <link linkend="standard_actions">standard action</link>. Default value –  <literal>THIS_TAB</literal>.</para>
                  </listitem>
                  <listitem>
                    <para id="gui_attr_tokenList_lookup_multiselect">If the value of the     <sgmltag>multiselect</sgmltag> attribute is set to  <code>true</code>, then a value of <code>true</code> will be passed to parameters map of the lookup screen for the <code>MULTI_SELECT</code> key. This flag can be used to set the screen into multiple selection mode. This flag is defined in the <code>WindowParams</code> enum so it is convenient to work with it in the following way:<programlisting language="java">@Override
public void init(Map&lt;String, Object&gt; params) {
  if (WindowParams.MULTI_SELECT.getBool(getContext())) {
      usersTable.setMultiSelect(true);
  }
}</programlisting></para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem id="gui_element_tokenList_button">
              <para><sgmltag>button</sgmltag> – descriptor of the button for adding items. Can contain <link linkend="gui_attr_basic_caption">caption</link> and <link linkend="gui_attr_basic_icon">icon</link> attributes.</para>
            </listitem>
          </itemizedlist></para>
        <para>A full list of <sgmltag>tokenList</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_tokenList_inline">inline</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry></row>
              <row><entry>
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>required<entry>
                  <link linkend="gui_attr_tokenList_position">position</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry></row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_tokenList_simple">simple</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>tokenList</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_element_tokenList_button">button</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_element_tokenList_lookup">lookup</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>A full list of <link linkend="gui_element_tokenList_lookup">lookup</link> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_tokenList_lookup_lookupScreen">lookupScreen</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                </entry></row>
              <row><entry>
                  <link linkend="gui_attr_lookupField_filterMode">filterMode</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_tokenList_lookup_multiselect">multiselect</link>
                </entry>required</row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_tokenList_lookup_lookup">lookup</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_tokenList_lookup_openType">openType</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><link linkend="gui_element_tokenList_button">button</link> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>editable</row>
              <row><entry>
                  <link linkend="gui_attr_basic_icon">icon</link>
                </entry>required</row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_Tree">
        <title>Tree</title>
        <para>The  <code>Tree</code> component is intended to display hierarchical structures represented by entities referencing themselves.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_Tree.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component:  <sgmltag>tree</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_tree_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for  both <structname>Web Client</structname> and <structname>Desktop Client</structname>. </para>
        <para>For the <code>Tree</code> component, the <code>datasource</code> attribute of the  <code>treechildren</code> element should contain a reference to a <link linkend="datasources">hierarchicalDatasource</link>. Declaration of a  <code>hierarchicalDatasource</code> should contain a  <code>hierarchyProperty</code> attribute – the name of the entity attribute which is a reference to same entity.</para>
        <para>Below is an example of the  <code>Tree</code> component description in a screen XML-descriptor:<programlisting language="xml">&lt;dsContext&gt;
  &lt;hierarchicalDatasource id=&quot;departmentsDs&quot; class=&quot;com.sample.sales.entity.Department&quot; view=&quot;browse&quot;
                          hierarchyProperty=&quot;parentDept&quot;&gt;
      &lt;query&gt;
          select d from sales$Department d order by d.createTs
      &lt;/query&gt;
  &lt;/hierarchicalDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;tree id=&quot;departmentsTree&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
      &lt;treechildren datasource=&quot;departmentsDs&quot; captionProperty=&quot;name&quot;/&gt;
  &lt;/tree&gt;</programlisting></para>
        <para id="gui_element_tree_treechildren">The name of the entity attribute to be displayed in the tree can be set using the  <code>captionProperty</code> attribute of the  <sgmltag>treechildren</sgmltag> element. If this attribute is not defined, the screen will show the entity <link linkend="namePattern">instance name</link>.</para>
          <para>The <code>setItemClickAction()</code> method may be used to define an <link linkend="gui_Action">action</link> that will be performed when a tree node is double-clicked.</para>
          <para><sgmltag>tree</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="2" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/>c <tbody>
              <row><entry>
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>editable</row>
              <row><entry>
                  <link linkend="gui_attr_basic_height">height</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>required</row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>tree</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_element_table_actions">actions</link>
                </entry>editable</row>
              <row><entry>
                  <link linkend="gui_element_tree_treechildren">treechildren</link>
                </entry>required</row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>treechildren</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry>editable</row>
              <row><entry>
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>required</row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_TreeTable">
        <title>TreeTable</title>
        <para><code>TreeTable</code> component is a hierarchical table displaying a tree-like structure in the leftmost column. The component is used for entities that have references to themselves. For example, it can be a file system or a company organization chart.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_treeTable.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component: <sgmltag>treeTable</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_TreeTable_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented for both  <structname>Web Client</structname> and <structname>Desktop Client</structname>. </para>
        <para>For      <code>TreeTable</code>,  the <link linkend="datasources">hierarchicalDatasource</link> should be set in the  <code>datasource</code> attribute of the    <code>rows</code> element. Declaration of a <code>hierarchicalDatasource</code> should contain  <code>hierarchyProperty</code> attribute – the name of the entity attribute which references the same entity.</para>
        <para>Below is an example of component description in a screen XML descriptor:<programlisting language="xml">&lt;dsContext&gt;
  &lt;hierarchicalDatasource id=&quot;tasksDs&quot; class=&quot;com.sample.sales.entity.Task&quot; view=&quot;browse&quot;
                          hierarchyProperty=&quot;parentTask&quot;&gt;
      &lt;query&gt;
          select t from sales$Task t
      &lt;/query&gt;
  &lt;/hierarchicalDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;treeTable id=&quot;tasksTable&quot; width=&quot;100%&quot;&gt;
      &lt;columns&gt;
          &lt;column id=&quot;name&quot;/&gt;
          &lt;column id=&quot;dueDate&quot;/&gt;
          &lt;column id=&quot;assignee&quot;/&gt;
      &lt;/columns&gt;
      &lt;rows datasource=&quot;tasksDs&quot;/&gt;
  &lt;/treeTable&gt;</programlisting></para>
        <para>The functionality of  <code>TreeTable</code> is similar to a simple  <link linkend="gui_Table">Table</link>.</para>
        <para><sgmltag>treeTable</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_table_allowPopupMenu">allowPopupMenu</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry><entry>
                  <link linkend="gui_attr_table_reorderingAllowed">reorderingAllowed</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>editable</row>
              <row>
                <entry>
                  <link linkend="gui_attr_table_columnControlVisible">columnControlVisible</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_table_sortable">sortable</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_table_multiselect">multiselect</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_table_presentations">presentations</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>treeTable</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry>
                  <link linkend="gui_element_table_actions">actions</link>
                </entry>
              </row>
              <row>buttonsPanel<entry>
                  <link linkend="gui_ButtonsPanel">buttonsPanel</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_element_table_columns">columns</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_element_table_rows">rows</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para><link linkend="gui_element_table_columns">column</link> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_table_column_caption">caption</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_dateField_dateFormat">dateFormat</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_dateField_resolution">resolution</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_table_column_editable">editable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_clickAction">clickAction</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_table_column_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_table_column_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_table_column_collapsed">collapsed</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><link linkend="gui_element_table_columns">column</link> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_formatter">formatter</link>
                </entry>editable</row>
            </tbody></tgroup>
        </informaltable>
        <para><link linkend="gui_element_table_rows">rows</link> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left"><colspec colname="c1"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>editable</row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_TwinColumn">
        <title>TwinColumn</title>
        <para><code>TwinColumn</code> is a twin list component for multiple items selection. The left part of the list contains available unselected values, the right part – selected values. Users select the values by transferring them from the left to the right and backward using double click or dedicated buttons. A unique representation style and an icon can be defined for each value.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/TwinColumn.png"/>
          </imageobject>
        </mediaobject>
        <para>XML name of the component: <sgmltag>twinColumn</sgmltag></para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_TwinColumn_dia.png"/>
          </imageobject>
        </mediaobject>
        <para>The component is implemented  for <structname>Web Client</structname> only.</para>
        <para>Below is an example of a  <sgmltag>twinColumn</sgmltag> component usage to select entity instances:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;carDs&quot; class=&quot;com.company.sample.entity.Car&quot; view=&quot;_local&quot;/&gt;
  &lt;collectionDatasource id=&quot;coloursDs&quot; class=&quot;com.company.sample.entity.Colour&quot; view=&quot;_local&quot;&gt;
      &lt;query&gt;select c from sample$Colour c&lt;/query&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;
&lt;layout&gt;
  &lt;twinColumn id=&quot;coloursField&quot; optionsDatasource=&quot;coloursDs&quot; addAllBtnEnabled=&quot;true&quot;/&gt;</programlisting></para>
        <para>In this example, the <code>coloursField</code> component will display <code>Colour</code> entity instances names  located in the <code>coloursDs</code> <link linkend="datasources">data source</link> and its <code>getValue()</code> method will return a collection of selected entity instances.</para>
        <para><code>addAllBtnEnabled</code> attribute shows the buttons moving all items between the lists.</para>
        <para id="gui_attr_twinColumn_columns_rows"><sgmltag>columns</sgmltag> attribute is used to set the number of characters in a row, and the  <sgmltag>rows</sgmltag> attribute – to set the number of rows in each list.</para>
        <para>The presentation of the items can be defined by implementing the <code>TwinColumn.StyleProvider</code> interface and returning a style name and icon path for each entity instance displayed in the component.</para>
        <para>The list of component options can be specified arbitrarily using    <code>setOptionsList()</code> and <code>setOptionsMap()</code> as described for the  <link linkend="gui_OptionsGroup">OptionsGroup</link> component.</para>
        <para><sgmltag>twinColumn</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_editable">editable</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry></row>
              <row><entry>
                  <link linkend="gui_attr_basic_captionProperty">captionProperty</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry><entry align="left">
                  <link linkend="gui_attr_basic_required">required</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>required</row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_twinColumn_columns_rows">columns</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_requiredMessage">requiredMessage</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_datasource">datasource</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_twinColumn_columns_rows">rows</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_description">description</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_property">property</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>twinColumn</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="1" colsep="1" rowsep="1" align="left">
            <colspec colname="c1"/>
            <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_validator">validator</link>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
    </section>
    <section id="gui_layouts">
      <title>Containers</title>
      <para><link linkend="gui_BoxLayout">BoxLayout</link></para>
      <para><link linkend="gui_ButtonsPanel">ButtonsPanel</link></para>
      <para><link linkend="gui_IFrame">IFrame</link></para>
      <para><link linkend="gui_GridLayout">GridLayout</link></para>
      <para><link linkend="gui_GroupBoxLayout">GroupBoxLayout</link></para>
      <para><link linkend="gui_ScrollBoxLayout">ScrollBoxLayout</link></para>
      <para><link linkend="gui_SplitPanel">SplitPanel</link></para>
      <para><link linkend="gui_TabSheet">TabSheet</link></para>
      <section id="gui_BoxLayout">
        <title>BoxLayout</title>
        <para><code>BoxLayout</code> is a container with sequential placement of components.</para>
        <para>There are three types of  <code>BoxLayout</code>, identified by the XML-elements:</para>
        <itemizedlist>
          <listitem>
            <para><sgmltag>hbox</sgmltag> − components are placed horizontally.</para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_hbox.png"/>
              </imageobject>
            </mediaobject>
            <programlisting language="xml">&lt;hbox spacing=&quot;true&quot; margin=&quot;true&quot;&gt;
  &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot;/&gt;
  &lt;lookupField datasource=&quot;orderDs&quot; property=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot;/&gt;
  &lt;textField datasource=&quot;orderDs&quot; property=&quot;amount&quot;/&gt;
&lt;/hbox&gt;</programlisting>
          </listitem>
          <listitem>
            <para><sgmltag>vbox</sgmltag> − components are placed vertically.  <sgmltag>vbox</sgmltag> has 100% width by default.</para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_vbox.png"/>
              </imageobject>
            </mediaobject>
            <programlisting language="xml">&lt;vbox spacing=&quot;true&quot; margin=&quot;true&quot;&gt;
  &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot;/&gt;
  &lt;lookupField datasource=&quot;orderDs&quot; property=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot;/&gt;
  &lt;textField datasource=&quot;orderDs&quot; property=&quot;amount&quot;/&gt;
&lt;/vbox&gt;</programlisting>
          </listitem>
          <listitem>
            <para><sgmltag>flowBox</sgmltag> − components are placed horizontally with line wrapping. If there is not enough  space in a line, the components that do not fit will be displayed in the next line (the behavior is similar to Swing  <code>FlowLayout</code>).</para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_flowbox.png"/>
              </imageobject>
            </mediaobject>
            <programlisting language="xml">&lt;flowBox spacing=&quot;true&quot; margin=&quot;true&quot;&gt;
  &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot;/&gt;
  &lt;lookupField datasource=&quot;orderDs&quot; property=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot;/&gt;
  &lt;textField datasource=&quot;orderDs&quot; property=&quot;amount&quot;/&gt;
&lt;/flowBox&gt;</programlisting>
          </listitem>
        </itemizedlist>
        <para>The following XML-attributes can be used in the <code>hbox</code>, <code>vbox</code>, <code>flowBox</code> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_expand">expand</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_margin">margin</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_spacing">spacing</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_ButtonsPanel">
        <title>ButtonsPanel</title>
        <para><code>ButtonsPanel</code> is a container that streamlines the use and placement of the components (usually, buttons) for data management in a table. </para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_buttonsPanel.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component:   <sgmltag>buttonsPanel</sgmltag>.</para>
        <para>A sample  description of a <code>ButtonsPanel</code> in screen XML-descriptor:<programlisting language="xml">&lt;table id=&quot;customersTable&quot;
     editable=&quot;false&quot; width=&quot;100%&quot;&gt;
  &lt;actions&gt;
      &lt;action id=&quot;create&quot;/&gt;
      &lt;action id=&quot;edit&quot;/&gt;
      &lt;action id=&quot;remove&quot;/&gt;
      &lt;action id=&quot;excel&quot;/&gt;
  &lt;/actions&gt;
  &lt;buttonsPanel&gt;
      &lt;button action=&quot;customersTable.create&quot;/&gt;
      &lt;button action=&quot;customersTable.edit&quot;/&gt;
      &lt;button action=&quot;customersTable.remove&quot;/&gt;
      &lt;button action=&quot;customersTable.excel&quot;/&gt;
  &lt;/buttonsPanel&gt;
  &lt;columns&gt;
      &lt;column id=&quot;name&quot;/&gt;
      &lt;column id=&quot;email&quot;/&gt;
  &lt;/columns&gt;
  &lt;rows datasource=&quot;customersDs&quot;/&gt;
&lt;/table&gt;</programlisting></para>
        <para><code>buttonsPanel</code> element can be located either inside a  <code>table</code>, or in any other place of a screen.  </para>
        <para>If the  <code>buttonsPanel</code> is located in a <code>table</code>, it is combined with the table&apos;s  <link linkend="gui_attr_table_rowsCount">rowsCount</link> component thus using vertical space more effectively. Additionally, if  a lookup screen is opened using  <code>IFrame.openLookup()</code> (for example, from the  <link linkend="gui_PickerField">PickerField</link> component) the buttons panel becomes hidden.</para>
        <para id="gui_attr_buttonsPanel_alwaysVisible"><sgmltag>alwaysVisible</sgmltag> attribute disables panel hiding in a lookup screen when it is opened by  <code>IFrame.openLookup()</code>. If the attribute value is <literal>true</literal>, the buttons panel is not hidden. By default, the attribute value is f <literal>false</literal>.</para>
        <para><sgmltag>buttonsPanel</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_buttonsPanel_alwaysVisible">alwaysVisible</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">styleName</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_expand">expand</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_GridLayout">
        <title>GridLayout</title>
        <para><code>GridLayout</code> is a container with grid placement of components.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_gridlayout.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component:  <sgmltag>grid</sgmltag>.</para>
        <para>Example  container usage:<programlisting language="xml">&lt;grid spacing=&quot;true&quot;&gt;
  &lt;columns count=&quot;4&quot;/&gt;
  &lt;rows&gt;
      &lt;row&gt;
          &lt;label value=&quot;Date&quot;/&gt;
          &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot;/&gt;
          &lt;label value=&quot;Customer&quot;/&gt;
          &lt;lookupField datasource=&quot;orderDs&quot; property=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot;/&gt;
      &lt;/row&gt;
      &lt;row&gt;
          &lt;label value=&quot;Amount&quot;/&gt;
          &lt;textField datasource=&quot;orderDs&quot; property=&quot;amount&quot;/&gt;
      &lt;/row&gt;
  &lt;/rows&gt;
&lt;/grid&gt;</programlisting></para>
        <para><code>grid</code> elements:<itemizedlist>
            <listitem id="gui_attr_grid_columns">
              <para><code>columns</code> – a required element, describes grid columns. It should have either a <code>count</code> attribute, or a nested    <code>column</code> element for each column.</para>
              <para>In the simplest case, it is enough to set the number of columns in the <code>count</code> attribute. Then, if the container width is explicitly defined in pixels or percents, free space will be divided between the columns equally.</para>
              <para>In order to divide screen space  non-equally,   a <code>column</code> element with a  <code>flex</code> attribute should be defined for each column.</para>
              <para>An example of a grid where the second and the fourth columns take all extra horizontal space and the fourth column takes three times more space:<programlisting language="xml">&lt;grid spacing=&quot;true&quot; width=&quot;100%&quot;&gt;
  &lt;columns&gt;
      &lt;column/&gt;
      &lt;column flex=&quot;1&quot;/&gt;
      &lt;column/&gt;
      &lt;column flex=&quot;3&quot;/&gt;
  &lt;/columns&gt;
  &lt;rows&gt;
      &lt;row&gt;
          &lt;label value=&quot;Date&quot;/&gt;
          &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot; width=&quot;100%&quot;/&gt;
          &lt;label value=&quot;Customer&quot;/&gt;
          &lt;lookupField datasource=&quot;orderDs&quot; property=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot; width=&quot;100%&quot;/&gt;
      &lt;/row&gt;
      &lt;row&gt;
          &lt;label value=&quot;Amount&quot;/&gt;
          &lt;textField datasource=&quot;orderDs&quot; property=&quot;amount&quot; width=&quot;100%&quot;/&gt;
      &lt;/row&gt;
  &lt;/rows&gt;
&lt;/grid&gt;</programlisting></para>
              <para>If <code>flex</code> is not defined, or is set to 0, the width of the column will be set according to its contents given that at least one other column has a non-zero <code>flex</code>. In the example above, the first and the third columns will get the width according to the maximum text length.</para>
              <tip>
                <para>In order for the free space to appear,  the entire  container width should be set in either pixels or percents. Otherwise, column width will be calculated according to content length, and <code>flex</code> attribute will have no effect.</para>
              </tip>
            </listitem>
            <listitem id="gui_attr_grid_rows">
              <para><sgmltag>rows</sgmltag> − a required element, contains a set of rows. Each line is defined in its own  <code>row</code> element. </para>
              <para><code>row</code> element can have a  <code>flex</code> attribute similar to the one defined for <code>column</code>, but affecting the distribution of free vertical space with a given total grid height.</para>
              <para><code>row</code> element should contain elements of the components displayed in the grid&apos;s current row cells. The number of components in a row should not exceed the defined number of columns, but it can be less.</para>
            </listitem>
          </itemizedlist></para>
        <para id="gui_GridLayout_span">Any component located in a  <code>grid</code> container can have  <code>colspan</code> and <code>rowspan</code> attributes. These attributes set the number of extra columns and rows occupied by the corresponding component. For example, this is how   <code>Field3</code> field can be extended to cover three columns:<programlisting language="xml">&lt;grid spacing=&quot;true&quot;&gt;
  &lt;columns count=&quot;4&quot;/&gt;
  &lt;rows&gt;
      &lt;row&gt;
          &lt;label value=&quot;Field1&quot;/&gt;
          &lt;textField/&gt;
          &lt;label value=&quot;Field2&quot;/&gt;
          &lt;textField/&gt;
      &lt;/row&gt;
      &lt;row&gt;
          &lt;label value=&quot;Field3&quot;/&gt;
          &lt;textField colspan=&quot;3&quot; width=&quot;100%&quot;/&gt;
      &lt;/row&gt;
  &lt;/rows&gt;
&lt;/grid&gt;</programlisting></para>
        <para>As a result the components will be placed in the following way:<mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/gui_gridlayout_colspan.png"/>
            </imageobject>
          </mediaobject></para>
        <para><sgmltag>grid</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_spacing">spacing</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">styleName</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_margin">margin</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>grid</sgmltag> elements:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_grid_columns">columns</link>
                </entry>editable</row>
              <row>
                <entry>
                  <link linkend="gui_attr_grid_rows">rows</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>columns</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_grid_columns">count</link>
                </entry>editable</row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>column</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry>
                  <link linkend="gui_attr_grid_rows">flex</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para><sgmltag>row</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row>
                <entry>
                  <link linkend="gui_attr_grid_rows">flex</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_GroupBoxLayout">
        <title>GroupBoxLayout</title>
        <para><code>GroupBoxLayout</code> is a container that allows  framing the embedded components  and setting a universal header for them. Additionally, it can collapse content</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_groupBox.png"/>
          </imageobject>
        </mediaobject>
        <para>Component XML-name: <sgmltag>groupBox</sgmltag>.</para>
        <para>An example  container description in a screen XML-descriptor:<programlisting language="xml">&lt;groupBox caption=&quot;Order&quot;&gt;
  &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot; caption=&quot;Date&quot;/&gt;
  &lt;lookupField datasource=&quot;orderDs&quot; property=&quot;customer&quot;
               optionsDatasource=&quot;customersDs&quot; caption=&quot;Customer&quot;/&gt;
  &lt;textField datasource=&quot;orderDs&quot; property=&quot;amount&quot; caption=&quot;Amount&quot;/&gt;
&lt;/groupBox&gt;</programlisting></para>
        <para><code>groupBox</code> attributes:<itemizedlist>
            <listitem>
              <para><code>caption</code> –  group header.</para>
            </listitem>
            <listitem id="gui_attr_groupBox_orientation">
              <para><code>orientation</code> – defines embedded components direction − horizontal or vertical. The default value is <literal>horizontal</literal> or <literal>vertical</literal>. The default value is<literal>vertical</literal>.</para>
            </listitem>
            <listitem id="gui_attr_groupBox_collapsable">
              <para><sgmltag>collapsable</sgmltag> – if the value is set to <code>true</code> the component’s content can be hidden using the icons  <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_groupBox_minus.png"/>
                  </imageobject>
                </inlinemediaobject>/<inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="img/gui_groupBox_plus.png"/>
                  </imageobject>
                </inlinemediaobject>.</para>
            </listitem>
            <listitem id="gui_attr_groupBox_collapsed">
              <para><sgmltag>collapsed</sgmltag> – if set to <code>true</code>, component’s content will be collapsed immediately after the screen gets opened. It is used  with  <code>collapsable=&quot;true&quot;</code>. </para>
              <para>An example of a collapsed <code>GroupBox</code>:</para>
              <mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="img/gui_groupBox_collapsed.png"/>
                </imageobject>
              </mediaobject>
            </listitem>
          </itemizedlist></para>
        <para>By default, the  <code>groupBox</code> container is 100% wide, similar to  <link linkend="gui_BoxLayout">vbox</link>.</para>
        <para>All  <sgmltag>groupBox</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_expand">expand</link>
                </entry><entry>
                  <link linkend="gui_attr_groupBox_orientation">orientation</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_groupBox_collapsable">collapsable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_spacing">spacing</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_groupBox_collapsed">collapsed</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_IFrame">
        <title>IFrame</title>
        <para><sgmltag>iframe</sgmltag> element is intended for including   <link linkend="frame">frames</link> into a screen.</para>
        <para>Attributes:<itemizedlist>
            <listitem>
              <para id="gui_attr_frame_src"><sgmltag>src</sgmltag> − path to the frame XML-descriptor.</para>
            </listitem>
            <listitem>
              <para><sgmltag>screen</sgmltag> – frame identifier in <link linkend="screens.xml">screens.xml</link> (if the frame is registered).</para>
            </listitem>
          </itemizedlist>One of these attributes should be defined. If both attributes are defined, frame will be loaded from the file explicitly set in  <sgmltag>src</sgmltag>. </para>
        <para>Other  <sgmltag>iframe</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_ScrollBoxLayout">
        <title>ScrollBoxLayout</title>
        <para><code>ScrollBoxLayout</code> − a container that supports content scrolling.</para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_scrollBox.png"/>
          </imageobject>
        </mediaobject>
        <para>Component XML-name: <sgmltag>scrollBox</sgmltag></para>
        <para>An example  container description in a screen XML-descriptor:<programlisting language="xml">&lt;groupBox caption=&quot;Order&quot; width=&quot;300&quot; height=&quot;170&quot;&gt;
  &lt;scrollBox width=&quot;100%&quot; height=&quot;100%&quot; spacing=&quot;true&quot; margin=&quot;true&quot;&gt;
      &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot; caption=&quot;Date&quot;/&gt;
      &lt;lookupField datasource=&quot;orderDs&quot; property=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot; caption=&quot;Customer&quot;/&gt;
      &lt;textField datasource=&quot;orderDs&quot; property=&quot;amount&quot; caption=&quot;Amount&quot;/&gt;
   &lt;/scrollBox&gt;
&lt;/groupBox&gt;</programlisting></para>
        <itemizedlist>
          <listitem>
            <para id="gui_attr_scrollBox_orientation">The embedded components direction can be define by   <sgmltag>orientation</sgmltag> attribute  − <literal>horizontal</literal>or <literal>vertical</literal>. Default is  <literal>vertical</literal>.</para>
          </listitem>
          <listitem>
            <para id="gui_attr_scrollBox_scrollBars"><sgmltag>scrollBars</sgmltag> attribute allows configuring scroll bars. It can be <sgmltag>horizontal</sgmltag>, <sgmltag>vertical</sgmltag> – for horizontal and vertical scrolling respectively, <sgmltag>both</sgmltag> – for scrolling in any direction. Setting the value to <sgmltag>none</sgmltag> forbids scrolling in any direction.</para>
          </listitem>
        </itemizedlist>
        <warning>
          <para>The components embedded into the  <sgmltag>scrollBox</sgmltag> should have fixed size or default size. It can not be set to  <code>height=&quot;100%&quot;</code> or <code>width=&quot;100%&quot;</code>.</para>
          <para>At the same time,  <sgmltag>scrollBox</sgmltag> cannot calculate its own size based on its content.  Its absolute size should either be specified or the scrollBox should be stretched it in a parent container by setting  <code>height=&quot;100%&quot;</code> and <code>width=&quot;100%&quot;</code>.</para>
        </warning>
        <para><sgmltag>scrollBox</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="3" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_align">align</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_margin">margin</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_spacing">spacing</link>
                </entry>editable</row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_scrollBox_orientation">orientation</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_scrollBox_scrollBars">scrollBars</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_SplitPanel">
        <title>SplitPanel</title>
        <para><code>SplitPanel</code> − a container divided into two areas, its horizontal or vertical size can be adjusted by moving the separator. </para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_splitPanel.png"/>
          </imageobject>
        </mediaobject>
        <para>Component XML-name:  <sgmltag>split</sgmltag>.</para>
        <para>An example  description of a split panel in a screen XML-descriptor:<programlisting language="xml">&lt;split orientation=&quot;horizontal&quot; pos=&quot;30&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
 &lt;vbox margin=&quot;true&quot; spacing=&quot;true&quot;&gt;
     &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot; caption=&quot;Date&quot;/&gt;
     &lt;lookupField datasource=&quot;orderDs&quot; property=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot; caption=&quot;Customer&quot;/&gt;
 &lt;/vbox&gt;
 &lt;vbox margin=&quot;true&quot; spacing=&quot;true&quot;&gt;
     &lt;textField datasource=&quot;orderDs&quot; property=&quot;amount&quot; caption=&quot;Amount&quot;/&gt;
 &lt;/vbox&gt;
&lt;/split&gt;</programlisting></para>
        <para><code>split</code> container must contain two nested containers or components. They will be displayed astride the separator.</para>
        <para><code>split</code> attributes:<itemizedlist>
            <listitem id="gui_attr_split_orientation">
              <para><code>orientation</code> – defines component orientation.   <code>horizontal</code> – nested components are aligned horizontally, <code>vertical</code> – they are aligned vertically.</para>
            </listitem>
            <listitem id="gui_attr_split_pos">
              <para><code>pos</code> – an integer number defining percentage of the first component area compared to the second one. For example,  <code>pos=&quot;30&quot;</code> means that the areas  ration is  30/70. By default the areas are divided 50/50.</para>
            </listitem>
          </itemizedlist></para>
        <para>All attributes of  <sgmltag>split</sgmltag>:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_split_pos">pos</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_split_orientation">orientation</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
      <section id="gui_TabSheet">
        <title>TabSheet</title>
        <para><code>TabSheet</code> container is a tabbed panel. The panel shows content of one tab at a time. </para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_tabsheet.png"/>
          </imageobject>
        </mediaobject>
        <para>XML-name of the component: <sgmltag>tabSheet</sgmltag>.</para>
        <para>An example  description of a tabbed panel in a screen XML-descriptor:<programlisting language="xml">&lt;tabSheet&gt;
  &lt;tab id=&quot;mainTab&quot; caption=&quot;Tab1&quot; margin=&quot;true&quot; spacing=&quot;true&quot;&gt;
      &lt;dateField datasource=&quot;orderDs&quot; property=&quot;date&quot; caption=&quot;Date&quot;/&gt;
      &lt;lookupField datasource=&quot;orderDs&quot; property=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot; caption=&quot;Customer&quot;/&gt;
  &lt;/tab&gt;
  &lt;tab id=&quot;additionalTab&quot; caption=&quot;Tab2&quot; margin=&quot;true&quot; spacing=&quot;true&quot;&gt;
      &lt;textField datasource=&quot;orderDs&quot; property=&quot;amount&quot; caption=&quot;Amount&quot;/&gt;
  &lt;/tab&gt;
&lt;/tabSheet&gt;</programlisting></para>
        <para>The  <sgmltag>tabSheet</sgmltag> component should contain nested   <sgmltag>tab</sgmltag>, elements describing tabs. Each tab is a container with a vertical components layout similar to <link linkend="gui_BoxLayout">vbox</link>.</para>
        <para><code>tab</code> element attributes:<itemizedlist>
            <listitem id="gui_attr_tabsheet_id">
              <para><code>id</code> – tab identifier. Please note that tabs are not components and their IDs are used only within a  <code>TabSheet</code> in order to work with tabs from the controller.</para>
            </listitem>
            <listitem>
              <para><link linkend="gui_attr_basic_caption">caption</link> – tab caption. </para>
            </listitem>
            <listitem id="gui_attr_tabsheet_lazy">
              <para><sgmltag>lazy</sgmltag> – sets lazy loading for tab content. </para>
              <para>Lazy-tabs do not load their content when a screen is opened, it reduces the number of components in memory. Components within a tab are loaded only when user selects the tab. Additionally, if a lazy-tab includes visual components linked to a <link linkend="datasources">data source</link>, containing a JPQL query, this query is not  invoked as well. As a result, screen opens quicker and data is loaded only when user requests it by selecting this tab. </para>
              <para>Please note that the components located on a lazy-tab do not exist  when the screen is opened. That is why they cannot be  <link linkend="screen_controller_injection">injected</link> into a controller and cannot be obtained by invoking  <code>getComponent()</code> in the controller’s  <code>init()</code> method. The   <code>lazy</code>-tab components  can be called only after user opens it. This moment may be caught using  <code>TabSheet.TabChangeListener</code>, for example:  </para>
              <programlisting language="java">@Inject
private TabSheet tabsheet;

private boolean detailsInitialized, historyInitialized;

@Override
public void init(Map&lt;String, Object&gt; params) {
  tabsheet.addListener(
          new TabSheet.TabChangeListener() {
              @Override
              public void tabChanged(TabSheet.Tab newTab) {
                  if (&quot;detailsTab&quot;.equals(newTab.getName()))
                      initDetails();
                  else if (&quot;historyTab&quot;.equals(newTab.getName()))
                      initHistory();
              }
          }
  );
}

private void initDetails() {
  if (detailsInitialized)
      return;

  // use getComponentNN(&quot;comp_id&quot;) here to get tab&apos;s components

  detailsInitialized = true;
}

private void initHistory() {
  if (historyInitialized)
      return;

  // use getComponentNN(&quot;comp_id&quot;) here to get tab&apos;s components

  historyInitialized = true;
}</programlisting>
              <para>By default, tabs are not  <code>lazy</code>, which means that all their content is loaded when a screen is opened.</para>
            </listitem>
            <listitem id="gui_attr_tabsheet_detachable">
              <para><code>detachable</code> – when it is   <code>true</code>,  a tab can be detached to a separate window in a screen desktop implementation . It allows , for example,  different parts of the application UI to be located on different displays. A detached tab has a dedicated button in its header:</para>
              <mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="img/gui_tabsheetDetachable.png"/>
                </imageobject>
              </mediaobject>
            </listitem>
          </itemizedlist></para>
        <para><sgmltag>tabSheet</sgmltag> attributes:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_height">height</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_visible">visible</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_basic_id">id</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_basic_width">width</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_stylename">stylename</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
        <para>All attributes of the   <sgmltag>tab</sgmltag> element:</para>
        <informaltable frame="none" pgwide="0" align="left">
          <tgroup cols="4" colsep="1" rowsep="1" align="left"><colspec colname="c1"/><colspec colname="c2"/><colspec colname="c3"/><colspec colname="c4"/>c <tbody>
              <row><entry align="left">
                  <link linkend="gui_attr_basic_caption">caption</link>
                </entry>editable<entry align="left">
                  <link linkend="gui_attr_basic_expand">expand</link>
                </entry><entry>
                  <link linkend="gui_attr_basic_margin">margin</link>
                </entry></row>
              <row>
                <entry>
                  <link linkend="gui_attr_tabsheet_detachable">detachable</link>
                </entry>
                <entry align="left">
                  <link linkend="gui_attr_tabsheet_id">id</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_basic_spacing">spacing</link>
                </entry>
              </row>
              <row>
                <entry align="left">
                  <link linkend="gui_attr_basic_enable">enable</link>
                </entry>
                <entry>
                  <link linkend="gui_attr_tabsheet_lazy">lazy</link>
                </entry>
              </row>
            </tbody></tgroup>
        </informaltable>
      </section>
    </section>
    <section id="gui_misc">
      <title>Miscellaneous</title>
      <para>This section describes different elements of the universal user interface that are related to visual components.</para>
      <section id="gui_formatter"><title>Formatter</title>Formatter is intended for formatting values as strings.<warning>
          <para>Formatter should be used with read-only components, such as <link linkend="gui_Label">Label</link>,  <link linkend="gui_Table">Table</link> column and similar. Editable components values, for example,  <link linkend="gui_TextField">TextField</link>, can be formatted using the  <code>
              <link linkend="datatype">Datatype</link>
            </code> mechanism.</para>
        </warning><para>In an XML-descriptor of a screen, a  component&apos;s formatter can be defined in a nested  <sgmltag>formatter</sgmltag> element. The element has a single attribute:</para><itemizedlist>
          <listitem>
            <para><sgmltag>class</sgmltag> − the name of a class implementing a  <code>com.haulmont.cuba.gui.components.Formatter</code></para>
          </listitem>
        </itemizedlist><para>If formatter&apos;s  constructor  class has a    <code>org.dom4j.Element</code>, parameter, then it will receive an XML element, describing this  <code>formatter</code>. This can be used to parameterize a formatter instance. For example, using a formatted string. Particularly,  <code>DateFormatter</code> and <code>NumberFormatter</code> classes in the platform can take the format string from the  <sgmltag>format</sgmltag> attribute. Example of using the component:<programlisting language="xml">&lt;column id=&quot;date&quot;&gt;
  &lt;formatter class=&quot;com.haulmont.cuba.gui.components.formatters.DateFormatter&quot; format=&quot;yyyy-MM-dd HH:mm:ss&quot;/&gt;
&lt;/column&gt;</programlisting></para><para>Additionally, <code>DateFormatter</code> class also recognizes a <sgmltag>type</sgmltag> attribute, which can have a   <literal>DATE</literal> or <literal>DATETIME</literal> value. In this case, formatting is done using the <code>
            <link linkend="datatype">Datatype</link>
          </code> mechanism using a <code>dateFormat</code> or a <code>dateTimeFormat</code> string respectively. For example:<programlisting language="xml">&lt;column id=&quot;endDate&quot;&gt;
  &lt;formatter class=&quot;com.haulmont.cuba.gui.components.formatters.DateFormatter&quot; type=&quot;DATE&quot;/&gt;
&lt;/column&gt;</programlisting></para><tip>
          <para>If a formatter is implemented as an internal class, it should be declared with a  <code>static</code> modifier and its name  should be separated by &quot;$&quot; for loading, for example:</para>
          <para><code>&lt;formatter class=&quot;com.sample.sales.gui.OrderBrowse$CurrencyFormatter&quot;/&gt;</code></para>
        </tip><para>Formatter can be assigned to a component not only using a screen XML-descriptor , but also programmatically – by submitting an formatter instance  into aд <code>setFormatter()</code> component.</para><para>An example of declaring a custom formatter and using it to format values in a table column:<programlisting language="java">public class CurrencyFormatter implements Formatter&lt;BigDecimal&gt; {

  protected GeneralConfiguration generalConfiguration;
  protected Currency currentCurrency;

  public CurrencyFormatter(GeneralConfiguration generalConfiguration) {
      this.generalConfiguration = generalConfiguration;
      currentCurrency = generalConfiguration.getCurrency();
  }

  @Override
  public String format(BigDecimal value) {
      return currentCurrency.format(value);
  }
}</programlisting><programlisting language="java">protected void initTableColumns() {
  Formatter&lt;BigDecimal&gt; currencyFormatter = new CurrencyFormatter(generalConfiguration);
  table.getColumn(&quot;totalPrice&quot;).setFormatter(currencyFormatter);
}</programlisting></para></section>
      <section id="gui_Table_presentations">
        <title>Presentation </title>
        <para>The mechanism of presentations allows users to manage component display settings.</para>
        <para><emphasis role="bold">Capabilities</emphasis>:</para>
        <itemizedlist>
          <listitem>
            <para>Saving presentations using their unique names</para>
          </listitem>
          <listitem>
            <para>Editing and removing presentations</para>
          </listitem>
          <listitem>
            <para>Fast switching between presentations</para>
          </listitem>
          <listitem>
            <para>Setting up a default presentation, which will be applied when a screen with a component opens</para>
          </listitem>
          <listitem>
            <para>Auto saving for security controls in an active presentation</para>
          </listitem>
          <listitem>
            <para>Global presentations, which can be accessed by any system user</para>
          </listitem>
        </itemizedlist>
        <para><emphasis role="bold">Classes and Interfaces </emphasis></para>
        <para>In order to use presentations, a component class should implement a <code>com.haulmont.cuba.gui.components.Component.HasPresentations</code> interface. In the platform, these components are:</para>
        <itemizedlist>
          <listitem>
            <para><link linkend="gui_Table">Table</link></para>
          </listitem>
          <listitem>
            <para><link linkend="gui_GroupTable">GroupTable</link></para>
          </listitem>
          <listitem>
            <para><link linkend="gui_TreeTable">TreeTable</link></para>
          </listitem>
        </itemizedlist>
        <para><code>Presentation</code> − POJO presentation object.</para>
        <para><code>Presentations</code> contains a list of component&apos;s presentations  and a set of methods to work with them. Main methods:</para>
        <itemizedlist>
          <listitem>
            <para><code>getCurrent()</code> − returns current presentation or  <code>null</code>,  if presentation is not defined</para>
          </listitem>
          <listitem>
            <para><code>setCurrent(Presentation p)</code> − sets an active presentation</para>
          </listitem>
          <listitem>
            <para><code>getSettings(Presentation p)</code> − returns an XML-element with display settings for the current presentation</para>
          </listitem>
          <listitem>
            <para><code>setSettings(Presentation p, Element e)</code> − modifies display settings for the specified presentation</para>
          </listitem>
          <listitem>
            <para><code>getPresentation(Object id)</code> − returns a presentation based on its identifier</para>
          </listitem>
          <listitem>
            <para><code>getPresentations()</code> − returns a list of  presentations identifiers for the given component</para>
          </listitem>
          <listitem>
            <para><code>commit()</code> − saves presentations to the database </para>
          </listitem>
        </itemizedlist>
        <para><code>PresentationsImpl</code> − element implementation <code>Presentations</code>.</para>
        <para><code>PresentationsChangeListener</code> − a listener interface tracking presentation changes.</para>
        <para>In order to create, change or remove global presentations, user should have rights to <property>cuba.gui.presentations.global</property>. More details are available in the <emphasis>CUBA Platform Manual. Security Subsystem</emphasis>.</para>
      </section>
      <section id="gui_Timer"><title>Timer</title><para>Timer is a non-visual component allowing  certain screen controller code to be run at specified time intervals. The timer works in a thread that handles user interface events, which allows  screen to be refreshed without any limitations. Timer stops working when a screen  it was created for gets closed.</para><para>The component is implemented for the  <structname>Web Client</structname> and the  <structname>Desktop Client</structname>. For the web client, timer implementation is based on interrogation server from web-browser, for the desktop client it based on <code>javax.swing.Timer</code>.</para><para>The main approach for creating the  timers  is by declaring them in a screen XML-descriptor – in the  <sgmltag>timers</sgmltag>, element which is located between  <sgmltag>dsContext</sgmltag> and  <sgmltag>layout</sgmltag> elements. </para><para>Timers are described using the <sgmltag>timer</sgmltag> element.</para><itemizedlist>
          <listitem>
            <para id="gui_attr_timer_delay"><sgmltag>delay</sgmltag> is a required attribute; it defines timer interval in milliseconds.</para>
          </listitem>
          <listitem>
            <para><sgmltag>autostart</sgmltag> – an optional attribute; when it is set to  <code>true</code>, timer starts immediately after a screen gets opened. By default the value is  <code>false</code>, which means that timer should be started by invoking its  <code>start()</code> method.</para>
          </listitem>
          <listitem>
            <para id="gui_attr_timer_repeating"><sgmltag>repeating</sgmltag> – an optional attribute, turns on repeating action for a timer. If the attribute is set to  <literal>true</literal>, timer runs in cycles at equal intervals defined in the <sgmltag>delay</sgmltag> attribute. Otherwise, timer runs only once –  <sgmltag>delay</sgmltag> milliseconds after the timer start.</para>
          </listitem>
          <listitem>
            <para id="gui_attr_timer_onTimer"><sgmltag>onTimer</sgmltag> – optional attribute containing a name of a method called when the timer fires. The handling method should be defined in a screen controller  with a <code>public</code> modifier and have one   <code>com.haulmont.cuba.gui.components.Timer</code> type parameter.  </para>
          </listitem>
        </itemizedlist><para>An example of using a timer to refresh table content periodically:</para><programlisting language="xml">&lt;window ...
  &lt;dsContext&gt;
      &lt;collectionDatasource id=&quot;bookInstanceDs&quot; ...
  &lt;/dsContext&gt;
  &lt;timers&gt;
      &lt;timer delay=&quot;3000&quot; autostart=&quot;true&quot; repeating=&quot;true&quot; onTimer=&quot;refreshData&quot;/&gt;
  &lt;/timers&gt;
  &lt;layout ...</programlisting><programlisting language="java">@Inject
private CollectionDatasource bookInstanceDs;

public void refreshData(Timer timer) {
  bookInstanceDs.refresh();
}</programlisting><para>Timer can be injected into a controller field, or acquired using the  <code>Window.getTimer()</code> method. Timer activity can be controlled using the timer’s <code>start()</code> and  <code>stop()</code> methods. For an already active timer,  <code>start()</code> invocation will be ignored. After stopping the timer using  <code>stop()</code> method,  it can be started again with  <code>start()</code>.</para><para>An event handler can be set for a timer using the implementation of a <code>Timer.TimerListener</code> interface:</para><programlisting language="xml">&lt;timers&gt;
  &lt;timer id=&quot;helloTimer&quot; delay=&quot;5000&quot;/&gt;
&lt;/timers&gt;</programlisting><programlisting language="java">@Inject
private Timer helloTimer;

@Override
public void init(Map&lt;String, Object&gt; params) {
  helloTimer.addTimerListener(new Timer.TimerListener() {
      @Override
      public void onTimer(Timer timer) {
          showNotification(&quot;Hello&quot;, NotificationType.HUMANIZED);
      }

      @Override
      public void onStopTimer(Timer timer) {
          showNotification(&quot;Timer is stopped&quot;, NotificationType.HUMANIZED);
      }
  });
  helloTimer.start();
}</programlisting>Timer can be also created in the application controller code:<programlisting language="java">@Inject
private ComponentsFactory componentsFactory;

@Override
public void init(Map&lt;String, Object&gt; params) {
  Timer helloTimer = componentsFactory.createTimer();
  helloTimer.setDelay(5000);
  helloTimer.setRepeating(true);
  helloTimer.addTimerListener(new Timer.TimerListener() {
      @Override
      public void onTimer(Timer timer) {
          showNotification(&quot;Hello&quot;, NotificationType.HUMANIZED);
      }

      @Override
      public void onStopTimer(Timer timer) {
          showNotification(&quot;Timer is stopped&quot;, NotificationType.HUMANIZED);
      }
  });
  helloTimer.start();

  addTimer(helloTimer);
}</programlisting></section>
      <section id="gui_validator"><title>Validator</title><para>Validator is intended to check values entered into visual components.</para><warning>
          <para>Validation and input type checking should be differentiated. If given component data type, for example <link linkend="gui_TextField">TextField</link> is set to anything different than string (this can happen when linking to an entity attribute or setting  <code>datatype</code>), then the component will not allow the user to enter a value that does not comply with this data type – when the component loses focus or when the user presses  <keycap>Enter</keycap>, the component will show the previous value.</para>
          <para>On the other hand, validation does not act immediately on data entry or on focus loss, but rather when  the component&apos;s  <code>validate()</code> method is invoked. It means that the component (and the entity attribute that it’s linked to) may temporarily contain a value, which does not comply with the conditions of validation. This should not be a problem, because the validated fields are typically found in  <link linkend="screen_edit">edit screens</link>, which automatically invoke validation for all their fields before commit. If the component is located not in an editing screen, its  <code>validate()</code> method should be invoked explicitly in the controller.</para>
        </warning><para>In a screen XML-descriptor, a component validator  can be defined in a nested  <sgmltag>validator</sgmltag> elements. The  <sgmltag>validator</sgmltag> element attributes:</para><itemizedlist>
          <listitem>
            <para><sgmltag>script</sgmltag> − path to the Groovy script performing validation.</para>
          </listitem>
          <listitem>
            <para><sgmltag>class</sgmltag> −  name of the Java class implementing a  <code>Field.Validator</code> interface.</para>
          </listitem>
          <listitem>
            <para>Groovy validator and standard classes of Java validators, located in the  <code>com.haulmont.cuba.gui.components.validators</code> package support   <sgmltag>message</sgmltag> attribute − a message displayed to a user when validation fails. The attribute should contain a message key from the package, for example,  <literal>message=&quot;msg://infoTextField.validationMsg&quot;</literal></para>
          </listitem>
        </itemizedlist>The validation mechanism is chosen according to the following logic:<itemizedlist>
          <listitem>
            <para>If the value of the  <sgmltag>script</sgmltag> attribute is not set and the  <sgmltag>validator</sgmltag> element itself does not contain text with a Groovy expression, then the system will use a class defined in the  <sgmltag>class</sgmltag> attribute as a validator..</para>
          </listitem>
          <listitem>
            <para>If the  <sgmltag>validator</sgmltag> element contains text, it will be used as a Groovy exception and will be executed using <link linkend="scripting">Scripting</link>.</para>
          </listitem>
          <listitem>
            <para>Otherwise, the system will use  <link linkend="scripting">Scripting</link> to run a Groovy script defined in the  <sgmltag>script</sgmltag>.</para>
          </listitem>
        </itemizedlist><para><code>value</code> variable will be passed to an expression or a Groovy script. It contains the value entered into a visual component. An expression or a script should return a <literal>boolean</literal> value: <literal>true</literal> − valid, <literal>false</literal> − not valid.</para><para>If a Java class is being used as a validator, it should have a default constructor without parameters or a constructor with the following set of parameters:<itemizedlist>
            <listitem>
              <para><code>org.dom4j.Element</code>, <code>String</code> – this constructor will receive the validator XML-element  and a screen message package name.</para>
            </listitem>
            <listitem>
              <para><code>org.dom4j.Element</code> – this constructor will receive a validator XML-element.</para>
            </listitem>
          </itemizedlist></para><tip>
          <para>If a validator is implemented as an internal class, it should be declared with a  <code>static</code>modifier and its name should be separated by &quot;$&quot; for loading, for example:</para>
          <para><code>&lt;validator class=&quot;com.sample.sales.gui.AddressEdit$ZipValidator&quot;/&gt;</code></para>
        </tip><para>The platform contains a set of implementations for the most frequently used validators (see <code>com.haulmont.cuba.gui.components.validators</code> package), which  can be use in other projects:</para><itemizedlist>
          <listitem>
            <para><code>DateValidator</code></para>
          </listitem>
          <listitem>
            <para><code>DoubleValidator</code></para>
          </listitem>
          <listitem>
            <para><code>EmailValidator</code></para>
          </listitem>
          <listitem>
            <para><code>IntegerValidator</code></para>
          </listitem>
          <listitem>
            <para><code>LongValidator</code></para>
          </listitem>
          <listitem>
            <para><code>PatternValidator</code></para>
          </listitem>
          <listitem>
            <para><code>ScriptValidator</code></para>
          </listitem>
        </itemizedlist><para>A validator-class can be assigned to a component not only using a screen XML-descriptor, but also programmatically – by submitting a validator instance into the component&apos;s  <code>addValidator()</code>method.</para><para>Example of creating a validator class for ZIP codes:<programlisting language="java">public class ZipValidator implements Field.Validator {
  @Override
  public void validate(Object value) throws ValidationException {
      if (value != null &amp;&amp; ((String) value).length() != 6)
          throw new ValidationException(&quot;Zip must be of 6 characters length&quot;);
  }
}</programlisting></para><para>Example of using a zip code validator and a standard pattern validator for fields within a  <link linkend="gui_FieldGroup">FieldGroup</link> component:<programlisting language="xml">&lt;fieldGroup ...&gt;
  &lt;field id=&quot;zip&quot; required=&quot;true&quot;&gt;
       &lt;validator class=&quot;com.sample.sales.gui.ZipValidator&quot;/&gt;
  &lt;/field&gt;
  &lt;field id=&quot;imei&quot;&gt;
      &lt;validator class=&quot;com.haulmont.cuba.gui.components.validators.PatternValidator&quot;
             pattern=&quot;\d{15}&quot;
             message=&quot;msg://general.imeiValidationFailed&quot;/&gt;
  &lt;/field&gt;
&lt;/fieldGroup&gt;</programlisting></para><para>Example of setting a validator programmatically:<programlisting language="java">if (Boolean.TRUE.equals(parameter.getRequired())) {
  tokenList.addValidator(new Field.Validator() {
      @Override
      public void validate(Object value) throws ValidationException {
          if (value instanceof Collection &amp;&amp; CollectionUtils.isEmpty((Collection) value)) {
              throw new ValidationException(getMessage(&quot;error.paramIsRequiredButEmpty&quot;));
          }
      }
  });
}</programlisting></para></section>
    </section>
    <section id="gui_attributes">
      <title>XML-Attributes of Components </title>
      <variablelist>
        <varlistentry id="gui_attr_basic_align">
          <term>align</term>
          <listitem>An attribute defining component position relative to the above container.<para>Possible values are:</para><itemizedlist>
              <listitem>
                <para><literal>TOP_RIGHT</literal></para>
              </listitem>
              <listitem>
                <para><literal>TOP_LEFT</literal></para>
              </listitem>
              <listitem>
                <para><literal>TOP_CENTER</literal></para>
              </listitem>
              <listitem>
                <para><literal>MIDDLE_RIGHT</literal></para>
              </listitem>
              <listitem>
                <para><literal>MIDDLE_LEFT</literal></para>
              </listitem>
              <listitem>
                <para><literal>MIDDLE_CENTER</literal></para>
              </listitem>
              <listitem>
                <para><literal>BOTTOM_RIGHT</literal></para>
              </listitem>
              <listitem>
                <para><literal>BOTTOM_LEFT</literal></para>
              </listitem>
              <listitem>
                <para><literal>BOTTOM_CENTER</literal></para>
              </listitem>
            </itemizedlist></listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_caption">
          <term>caption</term>
          <listitem><para>An attribute setting a visual component&apos;s caption.</para><para>Attribute value can either be a message string or a key for the  <link linkend="message_packs">message pack</link>. In case of a key, the value should begin with <literal>msg://prefix</literal>.</para>There are two ways of setting a key:<itemizedlist>
              <listitem>
                <para>A short key – in this case the message will be searched in a package set for the current screen:</para>
                <programlisting>caption=&quot;msg://infoFieldCaption&quot;</programlisting>
              </listitem>
              <listitem>Full key including package name:<programlisting>caption=&quot;msg://com.haulmont.refapp.gui.app/infoFieldCaption&quot;</programlisting></listitem>
            </itemizedlist></listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_captionProperty">
          <term>captionProperty</term>
          <listitem>Defines the name of an entity attribute which is displayed by a component. The property can only be used for entities in a datasources (for example, defined by the <link linkend="gui_attr_basic_optionsDatasource">optionsDatasource</link>) property of the <link linkend="gui_LookupField">LookupField</link>component.<para>If  <code>captionProperty</code> is not defined,  <link linkend="namePattern">names of instances</link> contained in a list will be shown.</para></listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_clickAction">
          <term>clickAction</term>
          <listitem>
            <para>The attribute contains a description of an action that will be executed when a user clicks in a cell or a field (for the  <link linkend="gui_FieldGroup">FieldGroup</link> component). Two types of actions are possible:</para>
            <itemizedlist>
              <listitem>
                <para><code>open</code> − opens an editing screen with the specified name for an entity displayed in the cell, for example:  <code>clickAction=&quot;open:sec$User.edit&quot;</code>. Entity name is displayed as a link:</para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="img/gui_clickAction_open.png"/>
                  </imageobject>
                </mediaobject>
              </listitem>
              <listitem>
                <para><code>invoke</code> − invokes a method of a screen controller with a specified name, for example: <code>clickAction=&quot;invoke:onClick&quot;</code>. The method should have a single  <code>Object</code> type parameter, which will be used to send an instance of the displayed entity.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_colspan">
          <term>colspan</term>
          <listitem>
            <para>Sets the number of  <link linkend="gui_GridLayout_span">extra grid columns</link> that the component should occupy (default is 1).
</para>
            <para>This attribute can be defined for any component located immediately within a  <link linkend="gui_GridLayout">GridLayout</link> container.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_datasource">
          <term>datasource</term>
          <listitem>
            <para>Intended for setting a <link linkend="datasources">data source</link>, described in a  <sgmltag>dsContext</sgmltag> section of a screen XML-descriptor.</para>
            <para>When setting a  <code>datasource</code> attribute for a component implementing a  <code>DatasourceComponent</code> interface, a <link linkend="gui_attr_basic_property">property</link> attribute should also be set.  </para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_description">
          <term>description</term>
          <listitem>
            <para>An attribute defining hint text for a component.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_editable">
          <term>editable</term>
          <listitem>
            <para>An attribute indicating that the component’s content can be edited (do not mix with <link linkend="gui_attr_basic_enable">enable</link>).</para>
            <para>Possible values −  <literal>true</literal>, <literal>false</literal>. Default value is  <literal>true</literal>.</para>
            <para>Ability to edit content of a component linked to data (inheritor of  <code>DatasourceComponent</code> or  <code>ListComponent</code>) is also influenced by the security subsystem. If the security subsystem data indicates that a component should not be editable, the value of its  <sgmltag>editable</sgmltag> attribute will be ignored.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_enable">
          <term>enable</term>
          <listitem>
            <para>An attribute defining component state: </para>
            <para>If a component is disabled, it does not accept input focus. Disabling a container disables all of its components as well. Possible values are  <literal>true</literal>, <literal>false</literal>.
By default all components are enabled.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_expand">
          <term>expand</term>
          <listitem>An attribute of a container controlling its internal layout.<para>Defines a component within a container that should be expanded to cover all available space in the directions of component placement. For a container with components vertical placement, this attribute sets 100% height to a component; for the containers with horizontal placement - 100% width. Additionally, resizing a container will also resize this component.</para></listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_height">
          <term>height</term>
          <listitem>An attribute setting component’s height.<para>Can be set in pixels or in percents of the  parent container height. For example: <literal>100px</literal>, <literal>100%</literal>, <literal>50</literal>. If it is specified without units, pixels are assumed.</para><para>Setting a value in  <literal>%</literal> means that the component will occupy the corresponding height within an area provided by the parent container.</para><para>When set to  <code>AUTO</code> or <code>-1px</code>, a default value will be used for the component height. For a container, height is defined by the content, according to a sum of heights of all nested components.</para></listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_icon">
          <term>icon</term>
          <listitem>An attribute setting a visual component icon.<para>Attribute value should contain a path to an icon file relative to the  <link linkend="gui_themes">themes</link> folder. For example::</para><programlisting>icon=&quot;icons/create.png&quot;</programlisting><para>If the icon should be changed depending on the user’s language, you can set a path to it in the messages package and specify a message key in an <sgmltag>icon</sgmltag> attribute, for example:</para><programlisting>icon=&quot;msg://addIcon&quot;</programlisting></listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_id">
          <term>id</term>
          <listitem>Component identifier.<para>It’s recommended that  values are generated using the rules for Java-identifiers and  camelСase is used, for example,  <code>userGrid</code>, <code>filterPanel</code>.
It can be specified for any component and should be unique within a screen.</para></listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_margin">
          <term>margin</term>
          <listitem><para><sgmltag>margin</sgmltag> attribute defines indentation between the outer borders and the container content.</para>It can take 2 value types:<itemizedlist>
              <listitem>
                <para><sgmltag>margin</sgmltag>=<literal>&quot;true&quot;</literal> − enables margins for all sides</para>
              </listitem>
              <listitem>
                <para><sgmltag>margin</sgmltag>=<literal>&quot;true;false;true;false;&quot;</literal> − enables only the top and the bottom margin (the value format is &quot;top,right,bottom,left&quot;)</para>
              </listitem>
            </itemizedlist>By default margins are disabled.</listitem>
        </varlistentry>
        <varlistentry id="gui_attr_nullName">
          <term>nullName</term>
          <listitem>
            <para>Selection of this option is equal to setting the <code>null</code> value.</para>
            <para>Attribute is used for  <link linkend="gui_LookupField">LookupField</link>, <link linkend="gui_LookupPickerField">LookupPickerField</link>, and <link linkend="gui_SearchPickerField">SearchPickerField</link> components.</para>
            <para>Example for a  <link linkend="gui_LookupField">LookupField</link>, component, setting an attribute value in an  <link linkend="screen_xml_glossentry">XML-descriptor</link>:</para>
            <programlisting language="xml">&lt;lookupField datasource=&quot;orderDs&quot;
           property=&quot;customer&quot;
           nullName=&quot;(none)&quot;
           optionsDatasource=&quot;customersDs&quot; width=&quot;200px&quot;/&gt;</programlisting>
            <para>Example for a  <link linkend="gui_LookupField">LookupField</link>, component, setting an attribute value in a  <link linkend="screen_controller_glossentry">controller</link>: <programlisting language="xml">&lt;lookupField id=&quot;customerLookupField&quot; optionsDatasource=&quot;customersDs&quot;
           width=&quot;200px&quot; datasource=&quot;orderDs&quot; property=&quot;customer&quot;/&gt;</programlisting><programlisting language="java">customerLookupField.setNullOption(&quot;&lt;null&gt;&quot;);</programlisting></para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_optionsDatasource">
          <term>optionsDatasource</term>
          <listitem>
            <para>Sets the name of a  <link linkend="datasources">data source</link>, used to generate a list of options.</para>
            <para><link linkend="gui_attr_basic_captionProperty">captionProperty</link> attribute can be used together with <sgmltag>optionsDatasource</sgmltag>.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_property">
          <term>property</term>
          <listitem>
            <para>An attribute of a component implementing a  <code>DatasourceComponent</code> interface.</para>
            <para>It is intended to set the name of an entity attribute which value will be displayed and edited using this visual component.</para>
            <para>It is always used together with a  <link linkend="gui_attr_basic_datasource">datasource</link> attribute.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_required">
          <term>required</term>
          <listitem>
            <para>An attribute of a visual component implementing a <code>Field</code> interface. Identifies that this field requires a value.</para>
            <para>Possible values  − <literal>true</literal>, <literal>false</literal>. Default is  <literal>false</literal>.</para>
            <para>  <sgmltag>requiredMessage</sgmltag> attribute can be used together with <sgmltag>required</sgmltag>.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_requiredMessage">
          <term>requiredMessage</term>
          <listitem>
            <para>An XML-attribute used together with a  <link linkend="gui_attr_basic_required">required</link> attribute. It allows setting a message that will be displayed to a user when the <link linkend="gui_attr_basic_required">required</link> rule is not fulfilled..</para>
            <para>An attribute should contain a key of a message from a package, for example: <sgmltag>requiredMessage</sgmltag>=&quot;<literal>msg://infoTextField.requiredMessage</literal>&quot;</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_rowspan">
          <term>rowspan</term>
          <listitem>
            <para>Sets the number of  <link linkend="gui_GridLayout_span">additional grid lines</link> that the component should occupy (default is 1).</para>
            <para>This attribute can be set for any component located immediately within a <link linkend="gui_GridLayout">GridLayout</link> container.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_spacing">
          <term>spacing</term>
          <listitem>
            <para><sgmltag>spacing</sgmltag> attribute sets spacing between components within a container.</para>
            <para>Possible values  − <literal>true</literal>, <literal>false</literal>.</para>
            <para>By default spacing is disabled.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_stylename">
          <term>stylename</term>
          <listitem>
            <para>An attribute defining a style name for a component.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_visible">
          <term>visible</term>
          <listitem>
            <para>An attribute setting component visibility. Possible values  − <literal>true</literal>, <literal>false</literal>. </para>
            <para>If a container is invisible all its components are invisible. By default all components are visible.</para>
          </listitem>
        </varlistentry>
        <varlistentry id="gui_attr_basic_width">
          <term>width</term>
          <listitem>
            <para>An attribute defining component width.</para>
            <para>The value can be set in pixels or in percents of the width of the parent container. For example:  <literal>100px</literal>, <literal>100%</literal>, <literal>50</literal>. If specified without units, pixels are assumed. Setting a value in  <literal>%</literal> means that the component will occupy the corresponding width within an area provided by the parent container.</para>
            <para>When set to  <code>AUTO</code> or  <code>-1px</code>, a default value will be used for a component width. For a container, width is defined by the content, according to the sum of widths of all nested components.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
  <section id="datasources"><title>Datasources</title><para>datasources provide work of data-aware components.</para><para>Visual components themselves do not access <structname>Middleware</structname> and get entity instances from related datasources. Furthermore, one data source can work with multiple visual components if they need the same instance or set of instances.</para>The link between a visual component and a data source consists of the following:<itemizedlist>
      <listitem>
        <para>When the user changes the value in the component, the new value is set for the entity attribute in the data source</para>
      </listitem>
      <listitem>
        <para>When the entity attribute is modified in the code, the new value is set and displayed in the visual component </para>
      </listitem>
      <listitem>
        <para>User input can be monitored both by the <link linkend="datasource_listeners">datasource listener</link> and the value listener of the component – they are fired sequentially. </para>
      </listitem>
      <listitem>
        <para>To read or write the value of an attribute in the application code, it is recommended to use the data source, rather than the component. Below is an example of reading the attribute:<programlisting language="java">@Inject
private FieldGroup fieldGroup;
@Inject
private Datasource&lt;Order&gt; orderDs;

public void init(Map&lt;String, Object&gt; params) {
  Customer customer;
  // Get customer from component
  customer = (Customer) fieldGroup.getFieldValue(&quot;customer&quot;);
  // Get customer from datasource
  customer = orderDs.getItem().getCustomer();
}</programlisting></para>
        <para>As can be seen, working entity attribute values through the component requires type casting and, in case of the  <link linkend="gui_FieldGroup">FieldGroup</link>, specifying the attribute name as a string. At the same time, if the instance is obtained from the datasource via the  <code>getItem()</code> method, the values of attributes can be read and modified directly. </para>
      </listitem>
    </itemizedlist><warning>
      <para>Typically, the visual component is bound to the attribute that directly belongs to the entity in the data source. In the example above, the component is bound to the  <code>customer</code> attribute of the  <code>Order</code> entity. </para>
      <para>A component can be associated with an attribute of a related entity, for example,  <code>customer.name</code>. In this case, the component will display the value of the name attribute, however when the user changes the value, the datasource listeners will not be invoked and the changes will not be saved. Therefore, it makes sense to bind the component to second-order entity attributes only if they are intended for display. For example in a  <link linkend="gui_Label">Label</link>, a  <link linkend="gui_Table">Table</link> column, or in a  <link linkend="gui_TextField">TextField</link>, where  <code>editable = false</code>.</para>
    </warning><para>datasources also track changes in entities contained therein and can send modified instances back to <structname>Middleware</structname> for storing in a database.</para><para>The basic sources of interfaces are described below.</para><figure>
      <title>Data source interfaces</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="img/Datasources.png"/>
        </imageobject>
      </mediaobject>
    </figure><itemizedlist>
      <listitem>
        <para><code>Datasource</code> is a simple data source designed to work with one entity instance. The instance is set by the <code>setItem()</code> method and is accessed via <code>getItem()</code>. </para>
        <para><code>DatasourceImpl</code> class is the standard implementation of such source, which is used, for instance, as a main data source on entity <link linkend="screen_edit">edit screens</link>.</para>
      </listitem>
      <listitem>
        <para><code>CollectionDatasource</code> is a data source designed to work with a collection of entity instances. The collection is loaded with the invocation of the <code>refresh()</code> method, instance keys are accessible through the <code>getItemIds()</code> method. The <code>setItem()</code> method sets the “current” instance of the collection and <code>getItem()</code> returns it, i.e., for example, the one that corresponds to the currently selected table row.</para>
        <para>The way to load collections is determined by implementation. The most typical one is loading from Middleware via <link linkend="dataManager">DataManager</link>; in this case, <code>setQuery()</code>, <code>setQueryFilter()</code> are used to form a JPQL query.</para>
        <para><code>CollectionDatasourceImpl</code> class is the standard implementation of such sources, which is used on screens with entity lists.</para>
        <itemizedlist>
          <listitem>
            <para><code>GroupDatasource</code> is a subtype of <code>CollectionDatasource</code>, designed to work with the <link linkend="gui_GroupTable">GroupTable</link> component.</para>
            <para>Standard implementation is the <code>GroupDatasourceImpl</code> class.</para>
          </listitem>
          <listitem>
            <para><code>HierarchicalDatasource</code> is a subtype of <code>CollectionDatasource</code>, designed to work with the <link linkend="gui_Tree">Tree</link> and <link linkend="gui_TreeTable">TreeTable</link> components.</para>
            <para>Standard implementation is the <code>HierarchicalDatasourceImpl</code> class.</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><code>NestedDatasource</code> is a data source designed to work with instances that are loaded in an attribute of another entity. In this case, a source that contains a parent entity is accessible via <code>getMaster()</code>, and <link linkend="metaProperty">meta property</link> that corresponds to the parent attribute containing instances of this source is accessible via <code>getProperty()</code>.</para>
        <para>For example an entity instance <code>Order</code> which contains a reference to the <code>Customer</code> instance is set in the <code>dsOrder</code> source. Then, to link the <code>Customer</code> instance with visual components, it is enough to create <code>NestedDatasource</code> with <code>dsOrder as parent</code> and meta property to point to the <code>Order.customer</code> attribute.</para>
        <itemizedlist>
          <listitem>
            <para><code>PropertyDatasource</code> is a subtype of <code>NestedDatasource</code>, designed to work with one instance or collection of related entities that are not embedded.</para>
            <para>Standard implementations: for working with one instance – <code>PropertyDatasourceImpl</code>, with a collection – <code>CollectionPropertyDatasourceImpl</code>, <code>GroupPropertyDatasourceImpl</code>, <code>HierarchicalPropertyDatasourceImpl</code>. The latter also implement the <code>CollectionDatasource</code> interface, however some of its irrelevant methods associated with loading like <code>setQuery()</code> throw <code>UnsupportedOperationException</code>.</para>
          </listitem>
          <listitem>
            <para><code>EmbeddedDatasource</code> is a subtype of <code>NestedDatasource</code>, which contains an instance of an embedded entity.</para>
            <para>Standard implementation is the <code>EmbeddedDatasourceImpl class</code>.</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><code>RuntimePropsDatasource</code> is a specific source, designed to work with <link linkend="runtime_properties">dynamic attributes</link> of entities.</para>
      </listitem>
    </itemizedlist><para>Typically, datasources are declared in the <code>dsContext</code> section of a <link linkend="screen_xml">screen descriptor</link>.</para><section>
      <title>Creating Datasources</title>
      <para>Data source objects can be created both declaratively, using an XML screen descriptor, and programmatically in a controller. Typically, standard implementation of sources is used, however, you can create your own class that is inherited from a standard one, if necessary.</para>
      <section>
        <title>Declarative Creation</title>
        <para>Typically, datasources are declared in the <code>dsContext</code> element of a screen descriptor. Depending on the relative position of declaration elements, sources of two varieties are created:<itemizedlist>
            <listitem>
              <para>if an element is located directly in <code>dsContext</code>, a normal <code>Datasource</code> or <code>CollectionDatasource</code>, which contains an independently loaded entity or collection, is created;</para>
            </listitem>
            <listitem>
              <para>if an element is located inside an element of another source, <code>NestedDatasource</code> is created and the external source becomes its parent.</para>
            </listitem>
          </itemizedlist></para>
        <para>Below is an example of declaring a data source:<programlisting language="xml">&lt;dsContext&gt;
  &lt;datasource id=&quot;carDs&quot; class=&quot;com.haulmont.sample.entity.Car&quot; view=&quot;carEdit&quot;&gt;
      &lt;collectionDatasource id=&quot;allocationsDs&quot; property=&quot;driverAllocations&quot;/&gt;
      &lt;collectionDatasource id=&quot;repairsDs&quot; property=&quot;repairs&quot;/&gt;
  &lt;/datasource&gt;

  &lt;collectionDatasource id=&quot;colorsDs&quot; class=&quot;com.haulmont.sample.entity.Color&quot; view=&quot;_local&quot;&gt;
      &lt;query&gt;
          select c from sample$Color c order by c.name
      &lt;/query&gt;
  &lt;/collectionDatasource&gt;
&lt;/dsContext&gt;</programlisting></para>
        <para>In the example above, <code>carDs</code> contains one entity instance, <code>Car</code>, and nested <code>allocationsDs</code> and <code>repairsDs</code> contain collections of related entities from the <code>Car.driverAllocations</code> and <code>Car.repairs</code> attributes, respectively. The <code>Car</code> instance together with related entities is set into the data source from the outside. If this screen is an <link linkend="screen_edit">edit screen</link>, it happens automatically when opening the screen. The <code>colorsDs</code> data source contains a collection of instances of the <code>Color</code> entity, which is loaded by the source itself using the specified JPQL <link linkend="datasource_query">query</link> with the _local <link linkend="views">view</link>.</para>
        <para>Below is the XML scheme. </para>
        <para><sgmltag>dsContext</sgmltag> – root element.</para>
        <para><code>dsContext</code> elements:<itemizedlist>
            <listitem>
              <para><code>datasource</code> – defines a data source that contains a single entity instance.</para>
              <para>Attributes:<itemizedlist>
                  <listitem>
                    <para><code>id</code> – source identifier, must be unique for this <code>DsContext</code>.</para>
                  </listitem>
                  <listitem>
                    <para><code>class</code> – Java class of an entity that will be contained in this source.</para>
                  </listitem>
                  <listitem>
                    <para><code>view</code> – name of entity <link linkend="views">view</link>. If the source itself loads instances, then this view will be used during loading. Otherwise, this view makes signals to external mechanisms on how to load an entity for this source.</para>
                  </listitem>
                  <listitem>
                    <para><code>allowCommit</code> – if set to <code>false</code>, the <code>isModified()</code> method of this source always returns <code>false</code> and the <code>commit()</code> method does nothing. Thus, changes in entities that are contained in the source are ignored. By default, it is set to <code>true</code>, i.e., changes are traced and can be saved.</para>
                  </listitem>
                  <listitem>
                    <para><code>datasourceClass</code> is a custom class of data source implementation, if necessary.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para><code>collectionDatasource</code> – defines a data source that contains a collection of instances.</para>
              <para><code>collectionDatasource</code> attributes:<itemizedlist>
                  <listitem>
                    <para><code>refreshMode</code> – a source update mode, default is <code>ALWAYS</code>. In the <code>NEVER</code> mode, when <code>refresh()</code> method is invoked, the source does not load data and only changes its state to <code>Datasource.State.VALID</code>, notifies listeners and sorts available instances. The <code>NEVER</code> mode is useful if you need to programmatically fill <code>CollectionDatasource</code> with preloaded or created entities. For example:<programlisting language="java">@Override
public void init(Map&lt;String, Object&gt; params) {
  Set&lt;Customer&gt; entities = (Set&lt;Customer&gt;) params.get(&quot;customers&quot;);
  for (Customer entity : entities) {
      customersDs.includeItem(entity);
  }
  customersDs.refresh();
}</programlisting></para>
                  </listitem>
                  <listitem>
                    <para><code>softDeletion</code> – the false value disables the <link linkend="soft_deletion">soft deletion</link> mode when loading entities, i.e., deleted instances will also be loaded. Default value is <code>true</code>.</para>
                  </listitem>
                </itemizedlist></para>
              <para><code>collectionDatasource</code> elements:<itemizedlist>
                  <listitem>
                    <para><code>query</code> – query to load entities</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para><code>groupDatasource</code> – completely similar to <code>collectionDatasource</code>, but creates data source implementation that is suitable to use in conjunction with the <link linkend="gui_GroupTable">GroupTable</link> component.</para>
            </listitem>
            <listitem>
              <para><code>hierarchicalDatasource</code> – similar to <code>collectionDatasource</code>, and creates data source implementation that is suitable to use in conjunction with the <link linkend="gui_Tree">Tree</link> and <link linkend="gui_TreeTable">TreeTable</link> components.</para>
              <para><code>hierarchyProperty</code> is a specific attribute. It specifies an attribute name, upon which a hierarchy is built.</para>
            </listitem>
          </itemizedlist></para>
        <para>A source implementation class is selected implicitly based on the name of the XML element and, as mentioned above, the mutual arrangement of elements. However, if you need to apply a custom data source, you can explicitly specify its class in the <code>datasourceClass</code> attribute.</para>
      </section>
      <section>
        <title>Programmatic Creation</title>
        <para>If you need to create a data source in the Java code, it is recommended to use a special class, <code>DsBuilder</code>.</para>
        <para>The <code>DsBuilder</code> instance is parameterized by an invocation chain of its methods in the fluent interface style. If the <code>master</code> and <code>property</code> parameters are set, then <code>NestedDatasource</code> will be created, otherwise – <code>Datasource</code> or <code>CollectionDatasource</code>.</para>
        <para>Example:<programlisting language="java">CollectionDatasource ds = new DsBuilder(getDsContext())
      .setJavaClass(Order.class)
      .setViewName(View.LOCAL)
      .setId(&quot;ordersDs&quot;)
      .buildCollectionDatasource();</programlisting></para>
      </section>
      <section>
        <title>Proper Implementation Classes</title>
        <para>Typically, custom implementation of a data source is required to change the loading process of a collection of entities. When creating a class of this source it should be inherited from <code>CollectionDatasourceImpl</code>, or from <code>GroupDatasourceImpl</code>, or <code>HierarchicalDatasourceImpl</code>, and the <code>loadData()</code> method should be overridden.</para>
        <para>Example:<programlisting language="java">public class MyDatasource extends CollectionDatasourceImpl&lt;SomeEntity, UUID&gt; {

  private SomeService someService = AppBeans.get(SomeService.NAME);

  @Override
  protected void loadData(Map&lt;String, Object&gt; params) {
      detachListener(data.values());
      data.clear();

      for (SomeEntity entity : someService.getEntities()) {
          data.put(entity.getId(), entity);
          attachListener(entity);
      }
  }
}</programlisting></para>
        <para>In the example above, <code>data</code> is a base class field that stores a collection of loaded instances. The base class methods, <code>detachListener()</code> and <code>attachListener()</code>, control the assignment of a listener to loaded entities. The listener notifies the data source on changes in instance fields.</para>
        <para>To create a custom data source declaratively, a class in the <code>datasourceClass</code> attribute of an XML element should be specified. In case of programmatic creation via <code>DsBuilder</code>, a source class is specified by invoking <code>setDsClass()</code>.</para>
      </section>
    </section><section id="datasource_query">
      <title>CollectionDatasourceImpl Queries</title>
      <para>The <code>CollectionDatasourceImpl</code> class and its inheritors, <code>GroupDatasourceImpl</code>, <code>HierarchicalDatasourceImpl</code> are standard implementation of datasources that work with collections of independent entity instances. These sources load data via <code>DataManager</code> by sending a JPQL query to <structname>Middleware</structname>. The format of these queries is described below.</para>
      <section>
        <title>Returned values</title>
        <para>A query should return entities of the type which is specified at the moment of creating a data source. In case of declarative creation, the entity type is specified in the <sgmltag>class</sgmltag> attribute of an XML element, if <code>DsBuilder</code> is used – in the <code>setJavaClass()</code> or <code>setMetaClass()</code> method.</para>
        <para>Furthermore, the object type in the <code>from</code> query statement should match the source type. This is necessary for automatic query transformations if security limitations, etc. are applied.</para>
        <para>For example, a query of the data source of the <code>Customer</code> type may look as follows:<programlisting>select c from sales$Customer c</programlisting></para>
        <para>Below are examples of invalid queries for a source of the <code>Customer</code> type:<programlisting>select c.id, c.name from sales$Customer c /* invalid – returns single fields, not the whole Customer object */

select o.customer from sales$Order o /* invalid – the &apos;from&apos; type (Order) is different from the resulting type  (Customer) */</programlisting></para>
      </section>
      <section>
        <title>Query Parameters</title>
        <para>A JPQL query in a data source may contain parameters of several types. A parameter type is determined by a prefix of a parameter name. A prefix is a part of the name before the $ character. The interpretation of the name after $ is described below.</para>
        <itemizedlist>
          <listitem>
            <para>The <code>ds</code> prefix</para>
            <para>The parameter value is data from another data source that is registered in the same <code>DsContext</code>. For example:<programlisting language="xml">&lt;collectionDatasource id=&quot;customersDs&quot; class=&quot;com.sample.sales.entity.Customer&quot; view=&quot;_local&quot;&gt;
  &lt;query&gt;
      select c from sales$Customer c
  &lt;/query&gt;
&lt;/collectionDatasource&gt;

&lt;collectionDatasource id=&quot;ordersDs&quot; class=&quot;com.sample.sales.entity.Order&quot; view=&quot;_local&quot;&gt;
  &lt;query&gt;
      select o from sales$Order o where o.customer.id = :ds$customersDs
  &lt;/query&gt;
&lt;/collectionDatasource&gt;</programlisting></para>
            <para>In the example above, a query parameter of the <code>ordersDs</code> data source will be a current entity instance located in the <code>customersDs</code> data source.</para>
            <para>If parameters with the <code>ds</code> prefix are used, dependencies between datasources are created automatically. They lead to updating the source if its parameter are changed. In the example above, if the selected Customer is changed, the list of its Orders is changed automatically. </para>
            <para>Please note that in the example of the parameterized query, the left part of the comparison operator is the value of the <code>o.customer.id</code> identifier, and the right part – the <code>Customer</code> instance that is contained in the <code>customersDs</code> source. This comparison is valid since when running a query at <structname>Middleware</structname>, the implementation of the <link linkend="query">Query</link> interface, by assigning values to query parameters, automatically adds entity ID instead of a passed entity instance.</para>
            <para>A path through the entity graph to an attribute (from which the value should be used) can be specified in the parameter name after the prefix and name of a source, for example: <programlisting language="xml">&lt;query&gt;
  select o from sales$Order o where o.customer.id = :ds$customersDs.id
&lt;/query&gt;</programlisting></para>
            <para>or<programlisting language="xml">&lt;query&gt;
  select o from sales$Order o where o.tagName = :ds$customersDs.group.tagName
&lt;/query&gt;</programlisting></para>
          </listitem>
          <listitem>
            <para>The <code>custom</code> prefix. </para>
            <para>A parameter value will be taken from the <code>Map&lt;String, Object&gt;</code> object that is passed into the <code>refresh()</code> method of a data source. For example:<programlisting language="xml">&lt;collectionDatasource id=&quot;ordersDs&quot; class=&quot;com.sample.sales.entity.Order&quot; view=&quot;_local&quot;&gt;
  &lt;query&gt;
      select o from sales$Order o where o.number = :custom$number
  &lt;/query&gt;
&lt;/collectionDatasource&gt;</programlisting><programlisting language="java">Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();
params.put(&quot;number&quot;, &quot;1&quot;);
ordersDs.refresh(params);</programlisting></para>
            <para>Bringing an instance to its identifier, if necessary, is performed similarly to parameters with the <code>ds</code> prefix. The path through the entity graph in the parameter name is not supported in this case.</para>
          </listitem>
          <listitem>
            <para>The <code>param</code> prefix.</para>
            <para>A parameter value is taken from the <code>Map&lt;String, Object&gt;</code> object that is passed into the <code>init()</code> method of a <link linkend="screen_controller">controller</link>. </para>
            <para>Bringing an instance to its identifier, if necessary, is performed similarly to parameters with the <code>ds</code> prefix. The path through the entity graph in the parameter name is supported in this case. </para>
          </listitem>
          <listitem>
            <para>The <code>component</code> prefix.</para>
            <para>A parameter value will be a current value of a visual component, which path is specified in the parameter name. For example:<programlisting language="xml">&lt;query&gt;
  select o from sales$Order o where o.number = :component$filter.orderNumberField
&lt;/query&gt;</programlisting></para>
            <para>The path to a component should include all nested <link linkend="frame">frames</link>.</para>
            <para>Bringing an instance to its identifier, if necessary, is similar to <code>ds</code> parameters. The path through the entity graph in the parameter name is supported as the continuation of the path to a component in this case. </para>
          </listitem>
          <listitem>
            <para>The <code>session</code> prefix. </para>
            <para>A parameter value will be a value of the <link linkend="userSession">user session</link> attribute specified in the parameter name.</para>
            <para>The value is extracted by the <code>UserSession.getAttribute()</code> method, so predefined names of session attributes are also supported. <itemizedlist>
                <listitem>
                  <para><code>userId</code> – ID of the currently registered or substituted user;</para>
                </listitem>
                <listitem>
                  <para><code>userLogin</code> – login of the currently registered or substituted user in lowercase.</para>
                </listitem>
              </itemizedlist></para>
            <para>Example:<programlisting language="xml">&lt;query&gt;
  select o from sales$Order o where o.createdBy = :session$userLogin
&lt;/query&gt;</programlisting></para>
            <para>Bringing an instance to its identifier, if necessary, is similar to <code>ds</code> parameters. In this case, the path through the entity graph in the parameter name is not supported.</para>
          </listitem>
          <warning>
            <para>If the value is not found by the rules given by the prefix for this parameter, the parameter value is set to <code>null</code>. For example, if the query has a parameter <code>param$some_name</code>, and the parameter map does not have the  <code>some_name</code> key, then  <code>param$some_name</code> is set to  <code>null</code>.</para>
          </warning>
        </itemizedlist>
      </section>
      <section>
        <title>Query Filter</title>
        <para>A data source query can be modified during the work of the application, depending on conditions entered by the user. This allows to efficiently filter data at the level of selection from DB.</para>
        <para>The easiest way to provide such ability is to connect a special visual component, <link linkend="gui_Filter">Filter</link>, to a data source.</para>
        <para>If by any reason the use of a universal filter is unwanted, a special XML markup can be embedded into a query text. This will allow to create a resulting query based on values entered by the user into any visual components of the screen.</para>
        <para>In this filter the following elements can be used:<itemizedlist>
            <listitem>
              <para><code>filter</code> – a root element of the filter. It can directly contain only one condition.<itemizedlist>
                  <listitem>
                    <para><sgmltag>and</sgmltag>, <sgmltag>or</sgmltag> – logical conditions, may contain any number of other conditions and statements. </para>
                  </listitem>
                  <listitem>
                    <para><sgmltag>c</sgmltag> – JPQL statement, which is added into the <code>where</code> section. It contains only the text and an optional <sgmltag>join</sgmltag> attribute, which value will be added into a corresponding place of the query. </para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </itemizedlist></para>
        <para>Conditions and statements are added into the resulting query only if parameters inside contain values, i.e., they are not <code>null</code>.</para>
        <para>Example:<programlisting language="xml">&lt;query&gt;
  select distinct d from app$GeneralDoc d
  &lt;filter&gt;
      &lt;or&gt;
          &lt;and&gt;
              &lt;c join=&quot;, app$DocRole dr&quot;&gt;dr.doc.id = d.id and d.processState = :custom$state&lt;/c&gt;
              &lt;c&gt;d.barCode like :component$barCodeFilterField&lt;/c&gt;
          &lt;/and&gt;
          &lt;c join=&quot;, app$DocRole dr&quot;&gt;dr.doc.id = d.id and dr.user.id = :custom$initiator&lt;/c&gt;
      &lt;/or&gt;
  &lt;/filter&gt;
&lt;/query&gt;</programlisting></para>
        <para>In this case, if <code>state</code> and <code>initiator</code> parameters are passed into the <code>refresh()</code> method of a data source, and a visual component, <code>barCodeFilterField</code>, has some value specified, then the resulting query will be as follows:<programlisting>select distinct d from app$GeneralDoc d, app$DocRole dr
where
(
  (dr.doc.id = d.id and d.processState = :custom$state)
  and
  (d.barCode like :component$barCodeFilterField)
)
or
(dr.doc.id = d.id and dr.user.id = :custom$initiator)</programlisting></para>
        <para>If, for example, the <code>barCodeFilterField</code> component is empty and only one parameter, initiator, was passed into the <code>refresh()</code> method, the query will be as follows:<programlisting>select distinct d from app$GeneralDoc d, app$DocRole dr
where
(dr.doc.id = d.id and dr.user.id = :custom$initiator)</programlisting></para>
      </section>
      <section id="datasource_query_case_insensitive">
        <title>Case-Insensitive Search for a Substring</title>
        <para>It is possible to use a special feature of JPQL queries execution in datasources, described for the <link linkend="query">Query</link> interface of the <structname>Middleware</structname> level: for easy creation of case-insensitive search condition of any substring, <code>(?i)</code> prefix can be used. However, due to the fact that the query value is usually passed implicitly, the following differences take place:<itemizedlist>
            <listitem>
              <para>The <code>(?i)</code> prefix should be specified before a parameter name and not inside the value.</para>
            </listitem>
            <listitem>
              <para>The parameter value will be automatically converted to lowercase.</para>
            </listitem>
            <listitem>
              <para>If the parameter value does not have <code>%</code> characters, they will be added to the beginning and the end.</para>
            </listitem>
          </itemizedlist></para>
        <para>Below is an example of how to process the following query:<programlisting>select c from sales$Customer c where c.name like :(?i)component$customerNameField</programlisting></para>
        <para>In this case, the parameter value taken from the <code>customerNameField</code> component will be converted to lowercase and will be framed with <code>%</code> characters, and then an SQL query with a <code>lower(C.NAME) like ?</code> condition will be executed in the database.</para>
        <para>Please note that with this search, an index created in the DB by the <code>NAME</code> field, will not be used. </para>
      </section>
    </section><section id="datasource_listeners">
      <title>Data Source Listeners</title>
      <para>With <link linkend="datasources">datasource listeners</link> it&apos;s possible to receive notifications about changes in data source states and entity instances located inside them.</para>
      <para>To register listeners, the <code>Datasource.addListener()</code>, <code>Datasource.removeListener()</code> methods are used. Below is an example of registering a listener in a <link linkend="screen_controller">screen controller</link>:<programlisting language="java">@Inject
private Datasource&lt;Customer&gt; customerDs;
...
public void init(Map&lt;String, Object&gt; params) {
  ...
  customerDs.addListener(new DatasourceListener&lt;Customer&gt;() {
      // listener methods implementation
  });
}</programlisting></para>
      <para>There are two listener interfaces of datasources: <code>DatasourceListener</code> and <code>CollectionDatasourceListener</code>. The first can be used for registration in any of datasources, the second – only in those implementing <code>CollectionDatasource</code>. Typically, in practice, it&apos;s not necessary to receive all notifications from a listener. That&apos;s why it is convenient to use class-adapters, <code>DsListenerAdapter</code> and <code>CollectionDsListenerAdapter</code>, instead of implementation of listener interfaces, which contain empty implementations of all methods of corresponding interfaces.</para>
      <para><code>DatasourceListener</code> methods are provided below:<itemizedlist>
          <listitem>
            <para><code>valueChanged()</code> – declaration of this method is inherited from the base interface, <code>ValueListener</code>. This listener method is invoked if an attribute value of some entity that is currently located in the source has changed. The modified instance itself, the name of changed attribute, old and new values are passed into the method.</para>
            <para><code>valueChanged()</code> notification can be used to respond to user changes in an entity from the UI, i.e., editing input fields. In the example below, a hypothetical method, <code>updateSettings()</code>, will be invoked when the value of the <code>active</code> attribute is changed, and a new attribute value will be passed into this method: <programlisting language="java">@Inject
private Datasource&lt;Customer&gt; customerDs;

public void init(Map&lt;String, Object&gt; params) {
  ...
  customerDs.addListener(new DsListenerAdapter&lt;Customer&gt;() {
      @Override
      public void valueChanged(Customer source, String property, Object prevValue, Object value) {
          if (&quot;active&quot;.equals(property)) {
              boolean active = BooleanUtils.isTrue((Boolean) value); // converting null to false
              updateSettings(active);
          }
      }
  });
}</programlisting></para>
          </listitem>
          <listitem><para><code>itemChanged()</code> – is invoked when a selected instance returned by the <code>getItem()</code> method is changed.</para><para>For <code>Datasource</code>, it happens when another instance (or <code>null</code>) is set with <code>setItem()</code> method.</para><para>For <code>CollectionDatasource</code>, this notification is invoked when a selected element is changed in a linked visual component. For example, it may be a selected table row, tree element or item in a drop-down list.</para>Below is an example of the <code>itemChanged()</code>notification to control the state of an action of the table:<programlisting language="java">@Inject
protected CollectionDatasource&lt;Customer, UUID&gt; customersDs;

@Named(&quot;customersTable.remove&quot;)
protected RemoveAction removeAction;

public void init(Map&lt;String, Object&gt; params) {
  ...
  customersDs.addListener(new DsListenerAdapter&lt;Customer&gt;() {
      @Override
      public void itemChanged(Datasource&lt;Customer&gt; ds, Customer prevItem, Customer item) {
          removeAction.setEnabled(canCustomerBeDeleted(item));
      }
  });
}</programlisting></listitem>
          <listitem>
            <para><code>stateChanged()</code> – is invoked when a state of the data source is changed. The data source can be in one of three states corresponding to the <code>Datasource.State</code> enumeration:<itemizedlist>
                <listitem>
                  <para><code>NOT_INITIALIZED</code> – source has just been created.</para>
                </listitem>
                <listitem>
                  <para><code>INVALID</code> – the whole <link linkend="dsContext">DsContext</link>, which this source is related to, is created.</para>
                </listitem>
                <listitem>
                  <para><code>VALID</code> – data source is in working state: <code>Datasource</code> contains an entity instance or null, <code>CollectionDatasource</code> – collection of instances or an empty collection.</para>
                </listitem>
              </itemizedlist></para>
            <para>Receiving a notification about changes in source state may be important for complex <link linkend="screen_edit">editors</link>, which consist of several <link linkend="frame">frames</link> where it is difficult to trace the moment of putting an edited entity into the source. In this case, <code>stateChanged()</code> notification for the delayed initialization of certain screen elements can be used:<programlisting language="java">@Inject
protected CollectionPropertyDatasourceImpl&lt;CategoryAttribute, UUID&gt; categoryAttrsDs;

categoryAttrsDs.addListener(new DsListenerAdapter&lt;CategoryAttribute&gt;() {
  @Override
  public void stateChanged(Datasource ds, Datasource.State prevState, Datasource.State state) {
      if (state != Datasource.State.VALID) return;
      initDataTypeColumn();
      initDefaultValueColumn();
  }
});</programlisting></para>
          </listitem>
        </itemizedlist></para>
      <para>The <code>CollectionDatasourceListener</code> interface adds one more method: <itemizedlist>
          <listitem>
            <para><code>collectionChanged()</code> – is invoked when a entity collection, which is stored in the data source, is changed. One of the following type of changes is passed into the method: <code>REFRESH</code>, <code>CLEAR</code>, <code>ADD</code>, <code>REMOVE</code>, <code>UPDATE</code>.</para>
            <para>Below is an example of a listener that invokes the recalculation of a journey cost in case of the address of a stop (the <code>Stop</code> entity) or the number of stops is changed:<programlisting language="java">protected class StopDsListener extends CollectionDsListenerAdapter&lt;Stop&gt; {
  @Override
  public void valueChanged(Stop source, String property, Object prevValue, Object value) {
      // existing stop address changed
      if (&quot;address&quot;.equals(property)) {
          fireRouteChanged();
      }
  }

  @Override
  public void collectionChanged(CollectionDatasource ds, Operation operation) {
      // stop was added or removed
      fireRouteChanged();
  }

  private void fireRouteChanged() {
      // journey route has changed, need to recalculate price, journey time, pickup time delay etc.
  }
}</programlisting></para>
          </listitem>
        </itemizedlist></para>
    </section><section id="dsContext">
      <title>DsContext</title>
      <para>All datasources that are created declaratively are registered in the <code>DsContext</code> object of a screen. A reference to <code>DsContext</code> can be obtained using the <code>getDsContext()</code> method of a screen controller or with an injection into a class field.</para>
      <para><code>DsContext</code> solves the following tasks:<orderedlist>
          <listitem>
            <para>Allows to organize dependencies between datasources when with a navigation to one source (i.e. when changing a &quot;current&quot; instance with the <code>setItem()</code> method) a related source is updated. Using these dependencies it&apos;s quite easy to organize master-detail connections among visual components on screens.</para>
            <para>Dependencies between sources are organized using <link linkend="datasource_query">query parameters</link> with the <code>ds$</code> prefix.</para>
          </listitem>
          <listitem>
            <para>Allows to collect all changed entity instances and send them to <structname>Middleware</structname> in a single invocation of <code>DataManager.commit()</code>, i.e. to save them into a data base using a single transaction. </para>
            <para>As an example, let&apos;s assume that some screen allows to edit an instance of the <code>Order</code>
                entity and a collection of <code>OrderLine</code> instances belonging to it. The <code>Order</code>
                instance is located in <code>Datasource</code>; the <code>OrderLine</code> collection – in nested
                <code>CollectionDatasource</code>, which is created using the <code>Order.lines</code> attribute. If
                user changes some attribute of <code>Order</code> and creates a new instance, <code>OrderLine</code>.
                Then, when a screen is committed to <link linkend="dataManager">DataManager</link>, two instances –
                changed <code>Order</code> and new <code>OrderLine</code> – will be sent simultaneously. After that,
                they will together get into one <link linkend="entityManager">persistent context</link> and will be
                saved into the DB with transaction commit. The <code>OrderLine</code> instance is also contained in
                the <code>Order.lines</code> collection, but if it&apos;s not passed into persistent context
                independently, the cascade saving between <code>Order</code> and <code>OrderLines</code> at the ORM
                level should be set. Tight cascade relations at the ORM level sometimes cause unwanted consequences in
                unexpected places, so it will be better to avoid them, as described in the <code>DsContext</code>
                mechanism.</para>
            <para>As a result of committing transaction, <code>DsContext</code> receives a set of saved instances from <structname>Middleware</structname> (in case of optimistic blocking they at least have an increased value of the <code>version</code> attribute), and sets these instances in datasources instead of outdated ones. This allows to work with latest instances immediately after committing without an extra data source refresh that is related to queries to <structname>Middleware</structname> and the database.</para>
          </listitem>
          <listitem>
            <para>Declares a listener, <code>DsContext.CommitListener</code>, which allows to receive notifications before and after committing modified instances. Before the commit it&apos;s possible to supplement a collection of instances sent to <link linkend="dataManager">DataManager</link> at <structname>Middleware</structname> which will lead to saving arbitrary entities in the same transaction. A collection of saved instances that are returned from <code>DataManager</code> can be obtained after commit.</para>
            <para>This mechanism is required if some entities, with which a screen works, are not under control of datasources, but are created and changed directly in the controller code. For example, a visual component, <link linkend="gui_FileUploadField">
                <code>FileUploadField</code>
              </link>, after uploading a file, creates a new entity instance, <code>FileDescriptor</code>, which can be saved together with other screen entities by adding to <code>CommitContext</code> in the <code>DsContext.CommitListener.beforeCommit()</code> method..</para>
            <para><code>DsContext.CommitListener</code> has the <code>DsContext.CommitListenerAdapter</code> adapter, which is useful when it&apos;s needed to define only one method.</para>
            <para>In the following example, a new instance, <code>Customer</code> will be sent to <structname>Middleware</structname> and saved to the DB together with other modified screen entities when it is committed:<programlisting language="java">protected Customer customer;

protected void createNewCustomer() {
  customer = new Customer();
  customer.setName(&quot;John Doe&quot;);
}

public void init(Map&lt;String, Object&gt; params) {
  getDsContext().addListener(new DsContext.CommitListenerAdapter() {
      @Override
      public void beforeCommit(CommitContext context) {
          if (customer != null)
              context.getCommitInstances().add(customer);
      }
  });
}</programlisting></para>
          </listitem>
        </orderedlist></para>
    </section><section id="dataSupplier">
      <title>DataSupplier</title>
      <para><code>DataSupplier</code> – interface, through which the datasources refer to Middleware for loading and
          saving entities. The standard implementation simply delegates to <link linkend="dataManager">DataManager</link>.
          A screen can define its implementation of the <code>DataSupplier</code> in <code>dataSupplier</code> attribute
          of the <code>window</code> element. Such own implementation may, for example, call an additional middleware
          block for loading data for the screen from different database.</para>
      <para>A reference to <code>DataSupplier</code> can be obtained either by injection into a screen controller or
          through the <code>DsContext</code> or <code>Datasource</code> instances. In both cases, an own implementation
          is returned if defined for the screen.</para>
    </section></section>
  <section id="gui_Action">
    <title>Actions. The Action Interface</title>
      <para>
          <code>Action</code> is an interface that abstracts an action (in other words, some function) from a visual
          component. It is particularly useful when the same action can be invoked from different visual components ((for example, from
          button and table context menu). In addition, this interface allows you to provide the action with additional
          properties, such as name, flags of accessibility and visibility, etc.
      </para>
    <para>Below are the   <code>Action</code> interface methods:<itemizedlist>
        <listitem>
          <para><code>actionPerform()</code> is invoked by a visual component associated with this action. An instance of the caller is passed to the method.</para>
        </listitem>
        <listitem>
          <para><code>getId()</code> returns an identifier of the action. The identifier is usually set by a constructor of a class that implements  <code>Action</code> and does not change throughout the lifecycle of the created action object.</para>
        </listitem>
        <listitem>
          <para>Methods for getting and setting  <code>caption</code>, <code>description</code>, <code>shortcut</code>, <code>icon</code>, <code>enabled</code>, <code>visible</code> properties. Typically, all these properties are used by related visual components to set their own corresponding properties.</para>
        </listitem>
        <listitem>
          <para><code>addPropertyChangeListener()</code>, <code>removePropertyChangeListener()</code> methods used to add and remove listeners which handle changes to the abovementioned properties. A listener receives notification of <code>java.beans.PropertyChangeEvent</code> type, which contains the name of the changed property, its old and new values.</para>
        </listitem>
        <listitem>
          <para><code>refreshState()</code> - a method that can be implemented in a particular action class to initialize the abovementioned properties in accordance to some external factors, such as user rights. It is usually invoked in constructors of implementing classes or from related visual components.</para>
        </listitem>
        <listitem>
          <para><code>addOwner()</code>, <code>removeOwner()</code>, <code>getOwner()</code>, <code>getOwners()</code> – methods used to control relation between the action and visual components.</para>
        </listitem>
      </itemizedlist></para>
    <para>It is recommended to implement actions using the  <link linkend="declarative_actions">declarative creation</link>
        or by inheriting from the  <link linkend="baseAction">BaseAction</link> class. Furthermore, there is a set of
        <link linkend="standard_actions">standard actions</link> applicable for tables and picker components. You can
        also derive action classes from standard actions to modify their behavior or to intercept events.</para>
    <para>Visual components associated with an action  can be of two types:<itemizedlist>
        <listitem>
          <para>Visual component with a single action implements the   <code>Component.ActionOwner</code> interface. These are  <link linkend="gui_Button">Button</link> and <link linkend="gui_LinkButton">LinkButton</link>.</para>
          <para>Action is linked to the component by the invocation of the <code>ActionOwner.setAction()</code> component method. At this point, the component replaces its properties with corresponding properties of the action (see components overview for details).</para>
        </listitem>
        <listitem>
          <para>Visual component containing several actions implements the <code>Component.ActionsHolder</code> interface. These are  <code>Window</code>, <code>IFrame</code>, <link linkend="gui_Table">Table</link> and its inheritors,  <link linkend="gui_Tree">Tree</link>, <link linkend="gui_PopupButton">PopupButton</link>, <link linkend="gui_PickerField">PickerField</link>, <link linkend="gui_LookupPickerField">LookupPickerField</link>.</para>
          <para>The <code>ActionsHolder.addAction()</code> method is used to add actions to the component. Implementation of this method in the component checks whether it already contains an action with the same identifier. If yes, then the existing action will be replaced with the new one. Therefore, it is possible, for example, to declare a standard action in a screen descriptor and then create a new one in the controller with overridden methods and add it to the component.</para>
        </listitem>
      </itemizedlist></para>
    <section id="declarative_actions">
      <title>Declarative Creation of Actions</title>
      <para>You can specify a set of <link linkend="gui_Action">actions</link> in an XML screen descriptor for any component that implements the  <code>Component.ActionsHolder</code> interface, including the entire screen or frame. This is done in the   <code>actions</code> element, which contains nested  <code>action</code> elements.</para>
      <para>The  <code>action</code> element can have the following attributes:<itemizedlist>
          <listitem>
            <para><code>id</code> − identifier, which should be unique within the <code>ActionsHolder</code> component.</para>
          </listitem>
          <listitem>
            <para><code>caption</code> – action name.</para>
          </listitem>
          <listitem>
            <para><code>description</code> – action description.</para>
          </listitem>
          <listitem>
            <para><code>enable</code> – accessibility flag  (<code>true</code> / <code>false</code>).</para>
          </listitem>
          <listitem>
            <para><code>icon</code> – action icon.</para>
          </listitem>
          <listitem>
            <para><code>invoke</code> - name of the controller method to be invoked. The method should be   <code>public</code> <code>void</code>, and either not have arguments or have one argument of the <code>Component</code> type. If the method has a  <code>Component</code> argument, then an instance of the visual component that launches this action will be passed to it when invoked.</para>
          </listitem>
          <listitem>
            <para><code>shortcut</code> - keyboard shortcut for invocation. Possible modifiers,  <code>ALT</code>, <code>CTRL</code>, <code>SHIFT</code>, are separated by the  &quot;-&quot; character. For example:
<keycap>ALT-CTRL-C</keycap>.</para>
          </listitem>
          <listitem>
            <para><code>visible</code> – visibility flag   (<code>true</code> / <code>false</code>).</para>
          </listitem>
        </itemizedlist></para>
      <para>The examples of declaration are provided below.<itemizedlist>
          <listitem>
            <para>Declaring actions at the screen level:<programlisting language="xml">&lt;window ...&gt;
  &lt;dsContext/&gt;

  &lt;actions&gt;
      &lt;action id=&quot;sayHelloAction&quot; caption=&quot;msg://sayHello&quot; shortcut=&quot;ALT-T&quot; invoke=&quot;sayHello&quot;/&gt;
  &lt;/actions&gt;

  &lt;layout&gt;
      &lt;button action=&quot;sayHelloAction&quot;/&gt;
  &lt;/layout&gt;
&lt;/window&gt;</programlisting><programlisting language="java">// controller

public void sayHello(Component component) {
  showNotification(&quot;Hello!&quot;, NotificationType.TRAY);
}</programlisting>In the example above, an action with  <code>sayHelloAction</code> identifier and a name from  <link linkend="message_packs">message pack</link> is declared. This action is bound with a button, which caption will be set to the action name. The action will invoke the <code>sayHello()</code> controller method when clicking on the button, or when pressing the   <keycap>ALT-T</keycap> shortcut if at that moment the screen has input focus.</para>
          </listitem>
          <listitem>
            <para>Declaring actions for  <link linkend="gui_PopupButton">PopupButton</link>:<programlisting language="xml">&lt;popupButton caption=&quot;Say something&quot;&gt;
 &lt;actions&gt;
    &lt;action id=&quot;helloAction&quot; caption=&quot;Say hello&quot; invoke=&quot;sayHello&quot;/&gt;
    &lt;action id=&quot;goodbyeAction&quot; caption=&quot;Say goodbye&quot; invoke=&quot;sayGoodbye&quot;/&gt;
 &lt;/actions&gt;
&lt;/popupButton&gt;</programlisting></para>
          </listitem>
          <listitem>
            <para>Declaring actions for  <link linkend="gui_Table">Table</link>:<programlisting language="xml">&lt;table id=&quot;usersTable&quot; width=&quot;100%&quot;&gt;
  &lt;actions&gt;
      &lt;action id=&quot;create&quot;/&gt;
      &lt;action id=&quot;edit&quot;/&gt;
      &lt;action id=&quot;copy&quot; caption=&quot;msg://copy&quot; icon=&quot;icons/copy.png&quot;
              invoke=&quot;copy&quot; trackSelection=&quot;true&quot;/&gt;
      &lt;action id=&quot;changePassw&quot; caption=&quot;msg://changePassw&quot; icon=&quot;icons/change-pass.png&quot;
              invoke=&quot;changePassword&quot; trackSelection=&quot;true&quot;/&gt;
  &lt;/actions&gt;
  &lt;buttonsPanel&gt;
      &lt;button action=&quot;usersTable.create&quot;/&gt;
      &lt;button action=&quot;usersTable.edit&quot;/&gt;
      &lt;button action=&quot;usersTable.copy&quot;/&gt;
      &lt;button action=&quot;usersTable.changePassw&quot;/&gt;
  &lt;/buttonsPanel&gt;
  &lt;rowsCount/&gt;
  &lt;columns&gt;
      &lt;column id=&quot;login&quot;/&gt;
      ...
  &lt;/columns&gt;
  &lt;rows datasource=&quot;usersDs&quot;/&gt;
&lt;/table&gt;</programlisting>In this example <code>copy</code> and <code>changePassw</code> actions are declared in addition to <code>create</code> and <code>edit</code> standard actions of the table. These actions invoke corresponding methods of the controller. In addition, the  <code>trackSelection=&quot;true&quot;</code> attribute is specified for them, which means that the action and corresponding button become disabled if no row is selected in the table. It is useful if the action is intended to be executed over a currently selected table row.</para>
            <para>An optional <code>openType</code> attribute can be specified  for create and edit actions to define edit screen opening mode, as described for the <code>setOpenType()</code> method of the  <link linkend="createAction">CreateAction</link> class.</para>
          </listitem>
          <listitem>
            <para>Declaring  <link linkend="gui_PickerField">PickerField</link> actions:<programlisting language="xml">&lt;pickerField id=&quot;colourField&quot; datasource=&quot;carDs&quot; property=&quot;colour&quot;/&gt;
  &lt;actions&gt;
      &lt;action id=&quot;lookup&quot;/&gt;
      &lt;action id=&quot;show&quot; icon=&quot;icons/show.png&quot;
              invoke=&quot;showColour&quot; caption=&quot;&quot; description=&quot;Show colour&quot;/&gt;
  &lt;/actions&gt;
&lt;/pickerField&gt;</programlisting>In the example above, the standard <code>lookup</code>  action and an additional <code>show</code> action invoking the <code>showColour()</code> method of the controller, are declared for the <code>PickerField</code> component. Since <code>PickerField</code> buttons that display actions use icons instead of captions, the caption attribute is explicitly set to an empty string, otherwise action name and button caption would be set to the action identifier. The <code>description</code> attribute allows to display a tooltip when hovering over the action button.</para>
          </listitem>
        </itemizedlist></para>
      <para>You can obtain references to any declared actions in the screen controller either directly by   <link linkend="screen_controller_injection">injection</link>, or from components that implement the <code>Component.ActionsHolder</code> interface. This can be useful to set action properties programmatically. For example:<programlisting language="java">@Named(&quot;carsTable.create&quot;)
private CreateAction createAction;

@Named(&quot;carsTable.copy&quot;)
private Action copyAction;

@Inject
private PickerField colourField;

@Override
public void init(Map&lt;String, Object&gt; params) {
  Map&lt;String, Object&gt; values = new HashMap&lt;&gt;();
  values.put(&quot;type&quot;, CarType.PASSENGER);
  createAction.setInitialValues(values);

  copyAction.setEnabled(false);

  Action showAction = colourField.getAction(&quot;show&quot;);
  showAction.setEnabled(false);
}</programlisting></para>
    </section>
    <section id="standard_actions">
      <title>Standard Actions</title>
      <para>Standard   <link linkend="gui_Action">actions</link> are classes that implement the <code>Action</code> interface and are intended to solve common tasks, such as invocation of an edit screen for an entity selected in a table. Standard actions have strictly defined identifiers; therefore, for the declaration of a standard action in XML, it is enough to specify its identifier.</para>
      <para>There are two types of standard actions:<itemizedlist>
          <listitem>
            <para><link linkend="list_actions">Actions over collections</link> of entities that are displayed in tables or trees.</para>
          </listitem>
          <listitem>
            <para><link linkend="picker_actions">Picker field actions</link>.</para>
          </listitem>
        </itemizedlist></para>
      <section id="list_actions">
        <title>Standard Actions over Collection</title>
        <para>For inheritors of  <code>ListComponent</code> (<link linkend="gui_Table">Table</link>, <link linkend="gui_GroupTable">GroupTable</link>, <link linkend="gui_TreeTable">TreeTable</link> and <link linkend="gui_Tree">Tree</link>) the set of standard actions is defined in   <code>ListActionType</code> enumeration; their implementation classes are located in <code>com.haulmont.cuba.gui.components.actions</code> package. </para>
        <para>These actions are described in details below.<itemizedlist>
            <listitem id="createAction">
              <para role=""><emphasis role="bold">CreateAction</emphasis> – action with   <emphasis role="bold">create</emphasis> identifier. It is intended to create new entity instance and open its edit screen. If the edit screen successfully commits a new instance to the database, <code>CreateAction</code> adds this new instance to the table data source and makes it selected.</para>
              <para>The following specific methods are defined in the <code>CreateAction</code> class:<itemizedlist>
                  <listitem>
                    <para><code>setOpenType()</code> allows to specify new entity edit screen open mode.  <code>THIS_TAB</code> by default. </para>
                    <para>Since it is quite often required to open edit screens in another mode (typically, <code>DIALOG</code>), you can specify an <code>openType</code> attribute with desired value in the    <code>action</code> element when using declarative creation of the    <code>create</code> action. This eliminates the need to obtain action reference in the controller and set this property programmatically. For example:<programlisting language="xml">&lt;table id=&quot;usersTable&quot;&gt;
  &lt;actions&gt;
      &lt;action id=&quot;create&quot; openType=&quot;DIALOG&quot;/&gt;</programlisting></para>
                  </listitem>
                  <listitem>
                    <para><code>setWindowId()</code> allows to specify the identifier of the entity edit screen. By default,   <code>{entity_name}.edit</code> is used, for example <code>sales$Customer.edit</code>.</para>
                  </listitem>
                  <listitem>
                    <para><code>setWindowParams()</code> allows to set edit screen parameters passed into its  <code>init()</code> method.</para>
                  </listitem>
                  <listitem>
                    <para><code>setInitialValues()</code> allows to set initial values of attributes of the entity being created. It takes a <code>Map</code> object, where keys are attribute names, and values are attribute values. For example:<programlisting language="java">Map&lt;String, Object&gt; values = new HashMap&lt;&gt;();
values.put(&quot;type&quot;, CarType.PASSENGER);
carCreateAction.setInitialValues(values);</programlisting></para>
                    <para>An example of  <code>setInitialValues()</code> usage is also provided in the section of    <link linkend="init_values_in_CreateAction">development recipes</link>.</para>
                  </listitem>
                  <listitem>
                    <para><code>afterCommit()</code> is invoked by the action after the new entity has been successfully committed and the edit screen has been closed. This method does not have implementation and can be overridden in inheritors to handle this event.</para>
                  </listitem>
                  <listitem>
                    <para><code>afterWindowClosed()</code> is the last method invoked by the action after closing the edit screen regardless of whether the new entity has been committed or not. This method does not have implementation and can be overridden in inheritors to handle this event.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem id="editAction">
              <para><emphasis role="bold">EditAction</emphasis> is an action with <emphasis role="bold">edit</emphasis> identifier, intended to open an edit screen for a selected entity instance. If the edit screen successfully commits the instance to the database, then <code>EditAction</code> updates this instance in the table data source.</para>
              <para>The following specific methods are defined in the  <code>EditAction</code> class:<itemizedlist>
                  <listitem>
                    <para><code>setOpenType()</code> allows to specify entity edit screen open mode.  <code>THIS_TAB</code> by default. </para>
                    <para>Since it is quite often required to open edit screens in another mode (typically   <code>DIALOG</code>), you can specify  <code>openType</code> attribute with desired value in the   <code>action</code> element when creating the action declaratively. This eliminates the need to obtain action reference in the controller and set this property programmatically. For example:<programlisting language="xml">&lt;table id=&quot;usersTable&quot;&gt;
  &lt;actions&gt;
      &lt;action id=&quot;edit&quot; openType=&quot;DIALOG&quot;/&gt;</programlisting></para>
                  </listitem>
                  <listitem>
                    <para><code>setWindowId()</code> allows to specify entity edit screen identifier.  <code>{entity_name}.edit</code> is used by default, for example,  <code>sales$Customer.edit</code>.</para>
                  </listitem>
                  <listitem>
                    <para><code>setWindowParams()</code> allows to set edit screen parameters, passed to its   <code>init()</code> method.</para>
                  </listitem>
                  <listitem>
                    <para><code>afterCommit()</code> is invoked by the action after the entity has been successfully committed and the edit screen has been closed. This method does not have implementation and can be overridden in inheritors to handle this event.</para>
                  </listitem>
                  <listitem>
                    <para><code>afterWindowClosed()</code> is the last method invoked by the action after closing the edit screen regardless of whether the edited entity has been committed or not. This method does not have implementation and can be overridden in inheritors to handle this event.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem id="removeAction">
              <para><emphasis role="bold">RemoveAction</emphasis> - action with <emphasis role="bold">remove</emphasis> identifier, intended to remove a selected entity instance.</para>
              <para>The following specific methods are defined in the  <code>RemoveAction</code> class:<itemizedlist>
                  <listitem>
                    <para><code>setAutocommit()</code> allows to control the moment of entity removal from the database. By default <code>commit()</code> method is invoked after triggering the action and removing the entity from the data source. As result, the entity is removed from the database. You can set <code>autocommit</code> property into false using <code>setAutocommit()</code> method or corresponding parameter of the constructor. In this case you will need to explicitly invoke the data source <code>commit()</code> method to confirm the removal after removing the entity from the data source.</para>
                    <para>The value of <code>autocommit</code> does not affect datasources in the   <code>Datasource.CommitMode.PARENT</code> mode, i.e. the datasources that provide <link linkend="composition_annotation">composite</link> entities editing.</para>
                  </listitem>
                  <listitem>
                    <para><code>setConfirmationMessage()</code> allows to set message text for the removal confirmation dialog.</para>
                  </listitem>
                  <listitem>
                    <para><code>setConfirmationTitle()</code> allows to set removal confirmation dialog title.</para>
                  </listitem>
                  <listitem>
                    <para><code>afterRemove()</code> is invoked by the action after the entity has been successfully removed. This method does not have implementation and can be overridden.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem id="refreshAction">
              <para><emphasis role="bold">RefreshAction</emphasis> - an action with <emphasis role="bold">refresh</emphasis> identifier. It is intended to update (reload) entities collection. When triggered, it invokes   <code>refresh()</code> method of a <link linkend="datasources">data source</link> associated with the corresponding component. </para>
              <para>The following specific methods are defined in the  <code>RefreshAction</code> class:<itemizedlist>
                  <listitem>
                    <para><code>setRefreshParams()</code> allows to set parameters passed into the <code>CollectionDatasource.refresh()</code> method to be used in the   <link linkend="datasource_query">query</link>. By default, no parameters are passed.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem id="addAction">
              <para><emphasis role="bold">AddAction</emphasis> – action with  <emphasis role="bold">add</emphasis> identifier, intended for selecting an existing entity instance and adding it to the collection. When triggered, opens entities  <link linkend="screen_lookup">lookup screen</link>.</para>
              <para>The following specific methods are defined in the  <code>AddAction</code> class:<itemizedlist>
                  <listitem>
                    <para><code>setOpenType()</code> allows to specify entity selection screen open mode.   <code>THIS_TAB</code> by default.</para>
                    <para>Since it is often required to open the lookup screens in a different mode (usually <code>DIALOG</code>), the <code>openType</code> attribute can be specified in the action element, when creating the <code>add</code> action declaratively. This eliminates the need to get a reference to the action in the controller and set this property programmatically. For example:</para>
                    <programlisting language="xml">&lt;table id=&quot;usersTable&quot;&gt;
  &lt;actions&gt;
      &lt;action id=&quot;add&quot; openType=&quot;DIALOG&quot;/&gt;</programlisting>
                  </listitem>
                  <listitem>
                    <para><code>setWindowId()</code> allows to specify entity selection screen identifier.  <code>{entity_name}.lookup</code> by default, for example,  <code>sales$Customer.lookup</code>.  If such screen does not exist, attempts to open <code>{entity_name}.browse</code> screen, for example, <code>sales$Customer.browse</code>.</para>
                  </listitem>
                  <listitem>
                    <para><code>setWindowParams()</code> allows to set selection screen parameters, passed into its  <code>init()</code> method.</para>
                  </listitem>
                  <listitem>
                    <para><code>setHandler()</code> allows to set an object implementing   <code>Window.Lookup.Handler</code> interface which will be passed to the selection screen. By default, <code>AddAction.DefaultHandler</code> object is used.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem id="excludeAction">
              <para><emphasis role="bold">ExcludeAction</emphasis> - an action with <emphasis role="bold">exclude</emphasis> identifier. It allows to exclude entity instances from a collection without removing them from the database. The class of this action is an inheritor of    <code>RemoveAction</code>, however, when triggered it invokes <code>excludeItem()</code> of <code>CollectionDatasource</code> instead of <code>removeItem()</code>. In addition, for an entity in a nested datasource, the <code>ExcludeAction</code> disconnects the link with the parent entity. Therefore this action can be used for editing one-to-many associations.</para>
              <para>The following specific methods are defined in the  <code>ExcludeAction</code> class in addition to <code>RemoveAction</code>:<itemizedlist>
                  <listitem>
                    <para><code>setConfirm()</code> – flag to show the removal confirmation dialog. You can also set this property via the action constructor. By default it is set to   <code>false</code>.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem id="excelAction">
              <para><emphasis role="bold">ExcelAction</emphasis> - an action with <emphasis role="bold">excel</emphasis> identifier, intended to export table data into XLS and download the resulting file. You can add this action only to   <link linkend="gui_Table">Table</link>, <link linkend="gui_GroupTable">GroupTable</link> and <link linkend="gui_TreeTable">TreeTable</link> components.</para>
              <para>When creating the action programmatically, you can set the following constructor parameters:<itemizedlist>
                  <listitem>
                    <para><code>display</code> – <code>ExportDisplay</code> interface implementation for file download. Standard implementation is used by default..</para>
                  </listitem>
                  <listitem>
                    <para><code>parameterized</code> - if set to true, the action shows a special window with <code>excelExport</code> identifier, which allows user to choose table columns for export.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </itemizedlist></para>
        <para>Below is an example of using standard actions in a table:<programlisting language="xml">&lt;table id=&quot;usersTable&quot; width=&quot;100%&quot;&gt;
  &lt;actions&gt;
      &lt;action id=&quot;create&quot;/&gt;
      &lt;action id=&quot;edit&quot;/&gt;
      &lt;action id=&quot;remove&quot;/&gt;
      &lt;action id=&quot;refresh&quot;/&gt;
  &lt;/actions&gt;
  &lt;buttonsPanel&gt;
      &lt;button action=&quot;usersTable.create&quot;/&gt;
      &lt;button action=&quot;usersTable.edit&quot;/&gt;
      &lt;button action=&quot;usersTable.remove&quot;/&gt;
      &lt;button action=&quot;usersTable.refresh&quot;/&gt;
  &lt;/buttonsPanel&gt;
  &lt;rowsCount/&gt;
  &lt;columns&gt;
      &lt;column id=&quot;login&quot;/&gt;
      ...
  &lt;/columns&gt;
  &lt;rows datasource=&quot;usersDs&quot;/&gt;
&lt;/table&gt;</programlisting></para>
      </section>
      <section id="picker_actions">
        <title>Standard Actions of the Picker Field</title>
        <para>For  <link linkend="gui_PickerField">PickerField</link>, <link linkend="gui_LookupPickerField">LookupPickerField</link> and  <link linkend="gui_SearchPickerField">SearchPickerField</link> components, a set of standard actions is defined in the  <code>PickerField.ActionType</code> enumeration. Implementations are inner classes of the <code>PickerField</code> interface, which are described in details below.</para>
        <para><itemizedlist>
            <listitem id="lookupAction">
              <para><emphasis role="bold">LookupAction</emphasis> – action with <emphasis role="bold">lookup</emphasis> identifier, intended for selecting an entity instance and setting it as the component&apos;s value. When triggered, it opens an entities  <link linkend="screen_lookup">lookup screen</link>.</para>
              <para>The following specific methods are defined in the  <code>LookupAction</code> class:<itemizedlist>
                  <listitem>
                    <para><code>setLookupScreenOpenType()</code> allows to specify entity selection screen open mode.   <code>THIS_TAB</code> by default.</para>
                  </listitem>
                  <listitem>
                    <para><code>setLookupScreenDialogParams()</code> allows to set the window properties for a lookup screen that is opened in the <code>DIALOG</code> mode (see previous method). Other modes are not affected. </para>
                  </listitem>
                  <listitem>
                    <para><code>setLookupScreen()</code> allows to specify entity selection screen identifier.  <code>{entity_name}.lookup</code> by default, for example,  <code>sales$Customer.lookup</code>. If such screen does not exist, attempts to open <code>{entity_name}.browse</code> screen, for example, <code>sales$Customer.browse</code>.</para>
                  </listitem>
                  <listitem>
                    <para><code>setLookupScreenParams()</code> allows to set selection screen parameters, passed into its  <code>init()</code> method.</para>
                  </listitem>
                  <listitem>
                    <para><code>afterSelect()</code>  is invoked by the action after the selected instance is set as the component&apos;s value. This method does not have implementation and can be overridden.</para>
                  </listitem>
                  <listitem>
                    <para><code>afterCloseLookup()</code> is the last method invoked by the action after closing the lookup screen regardless of whether an instance has been selected or not. This method does not have implementation and can be overridden.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem id="clearAction">
              <para><emphasis role="bold">ClearAction</emphasis> - an action with <emphasis role="bold">clear</emphasis> identifier, intended for clearing (i.e. for setting to <code>null</code>) the value of the component.</para>
            </listitem>
            <listitem id="openAction">
              <para><emphasis role="bold">OpenAction</emphasis> - action with <emphasis role="bold">open</emphasis> identifier, intended for opening an edit screen for the entity instance which is the current value of the component.</para>
              <para>The following specific methods are defined in the  <code>OpenAction</code> class:<itemizedlist>
                  <listitem>
                    <para><code>setEditScreenOpenType()</code> allows to specify entity selection screen open mode.   <code>THIS_TAB</code> by default.</para>
                  </listitem>
                  <listitem>
                    <para><code>setEditScreenDialogParams()</code> allows to set the window properties for an edit screen that is opened in the <code>DIALOG</code> mode (see previous method). Other modes are not affected. </para>
                  </listitem>
                  <listitem>
                    <para><code>setEditScreen()</code> allows to specify entity edit screen identifier.   <code>{entity_name}.edit</code> screen is used by default, for example,  <code>sales$Customer.edit</code>. </para>
                  </listitem>
                  <listitem>
                    <para><code>setEditScreenParams()</code> allows to set edit screen parameters, passed to its  <code>init()</code>method.</para>
                  </listitem>
                  <listitem>
                    <para><code>afterWindowClosed()</code>  is invoked by the action after closing the edit screen. This method does not have implementation and can be overridden in inheritors to handle this event.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </itemizedlist></para>
        <para>Below is an example of standard actions usage in a picker component:<programlisting language="xml">&lt;searchPickerField optionsDatasource=&quot;coloursDs&quot;
                 datasource=&quot;carDs&quot; property=&quot;colour&quot;&gt;
  &lt;actions&gt;
      &lt;action id=&quot;clear&quot;/&gt;
      &lt;action id=&quot;lookup&quot;/&gt;
      &lt;action id=&quot;open&quot;/&gt;
  &lt;/actions&gt;
&lt;/searchPickerField&gt;</programlisting></para>
      </section>
    </section>
    <section id="baseAction">
      <title>BaseAction</title>
      <para><code>BaseAction</code> is a base class for   <link linkend="gui_Action">actions</link> implementation.
          It is recommended to derive custom actions from it when   <link linkend="declarative_actions">declarative
          actions creation</link> functionality is insufficient.</para>
      <para>When creating a custom action class, you should implement <code>actionPerform()</code> method and pass
          action identifier to the <code>BaseAction</code> constructor. You can override any property
          getters: <code>getCaption()</code>, <code>getDescription()</code>, <code>getIcon()</code>,
          <code>getShortcut()</code>, <code>isEnabled()</code>, <code>isVisible()</code>. Standard implementations of
          these methods return values set by setter methods, except the <code>getCaption()</code> method. If the action
          name is not explicitly set by <code>setCaption()</code> method, it retrieves message using action identifier
          as key from the  the <link linkend="message_packs">localized message pack</link> corresponding to the action
          class package. If there is no message with such key, then the key itself, i.e. the action identifier,
          is returned.</para>
      <para><code>BaseAction</code> can change its <code>enabled</code> and <code>visible</code> properties depending on
          the user <link linkend="permissions">permissions</link> and current context.</para>
      <para>The <code>BaseAction</code> is visible if the following conditions are met:
        <itemizedlist>
            <listitem><para><code>setVisible(false)</code> method was not called;</para></listitem>
            <listitem><para>there is no <userinput>hide</userinput> UI permission for this action.</para></listitem>
        </itemizedlist>
      </para>
      <para>The action is enabled if the following conditions are met:
          <itemizedlist>
              <listitem><para><code>setEnabled(false)</code> method was not called;</para></listitem>
              <listitem><para>there are no <userinput>hide</userinput> and <userinput>read-only</userinput> UI permissions
                  for this action;</para></listitem>
              <listitem><para><code>isPermitted()</code> method returns true;</para></listitem>
              <listitem><para><code>isApplicable()</code> method returns true.</para></listitem>
          </itemizedlist>
      </para>
      <para>Usage examples:<itemizedlist>
          <listitem>
            <para><link linkend="gui_Button">Button</link> action:
                <programlisting language="java"><xi:include href="../../source/gui/baseAction_1.java" encoding="UTF-8" parse="text"/></programlisting>
                In this case, the <code>helloBtn</code> button caption will be set to the string located in the message
                pack with <code>hello</code> key.  You can override the <code>getCaption()</code> action method to
                initialize button name in a different way.</para>
          </listitem>
          <listitem>
            <para>Action of a programmatically created   <link linkend="gui_PickerField">PickerField</link>:
                <programlisting language="java"><xi:include href="../../source/gui/baseAction_2.java" encoding="UTF-8" parse="text"/></programlisting>
                In the example an anonymous <code>BaseAction</code> derived class is used to set the action of the
                picker field button. The button caption is not displayed, an icon is used instead with a  description,
                which pops up when hovering mouse cursor.</para>
          </listitem>
          <listitem>
            <para><link linkend="gui_Table">Table</link> action:
                <programlisting language="java"><xi:include href="../../source/gui/baseAction_3.java" encoding="UTF-8" parse="text"/></programlisting>
                In the example, the <code>HelloAction</code> class is declared, and its instance is added to the table's
                actions list. The action is enabled for users that have <userinput>myapp.allow-greeting</userinput>
                and only when exactly one table row is selected. The latter is possible because
                BaseAction's <code>target</code> property is automatically assigned to the action when it is
                added to a <code>ListComponent</code> descendant (<code>Table</code> or <code>Tree</code>).</para>
          </listitem>
          <listitem>
            <para>If you need an action, that gets enabled when one or more table rows are selected, use BaseAction's
                descendant - <code>ItemTrackingAction</code>, which adds default implementation of <code>isApplicable()</code>
                method:
                <programlisting language="java"><xi:include href="../../source/gui/baseAction_4.java" encoding="UTF-8" parse="text"/></programlisting>
                </para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>
  <section id="dialogs_and_notifications">
    <title>Dialogs and Notifications</title>
    <para>Dialogs and notifications can be used to display messages to  users.</para>
    <para>Dialogs have a title with a closing button and are always displayed in the center of the application main window. Notifications can be displayed both in the center and in the corner of the window, and can automatically disappear.</para>
    <section id="dialogs">
      <title>Dialogs</title>
      <para>Dialogs are invoked by    <code>showMessageDialog()</code> and <code>showOptionDialog()</code> methods of the <code>IFrame</code> interface. This interface is implemented by   <link linkend="screen_controller">screen controller</link>,  so these methods can be invoked directly in the controller code. </para>
      <itemizedlist>
        <listitem>
          <para><code>showMessageDialog()</code> is intended to display a message. The method has the following parameters:<itemizedlist>
              <listitem>
                <para><code>title</code> – dialog title.</para>
              </listitem>
              <listitem>
                <para><code>message</code> - message. For HTML type (see below), you can use HTML tags for formatting the
                    message. When using HTML, make sure you escape data loaded from the database to avoid code injection
                    in web client. You can use <code>\n</code> characters for line breaks in non-HTML messages.</para>
              </listitem>
              <listitem><para><code>messageType</code> – message type. Possible types:<itemizedlist>
                    <listitem>
                      <para><code>CONFIRMATION</code>, <code>CONFIRMATION_HTML</code> – confirmation dialog. </para>
                    </listitem>
                    <listitem>
                      <para><code>WARNING</code>, <code>WARNING_HTML</code> – warning dialog.</para>
                    </listitem>
                  </itemizedlist></para>The difference in message types is reflected in desktop user interface only.</listitem>
            </itemizedlist>An example of showing a dialog:<programlisting language="java">showMessageDialog(&quot;Warning&quot;, &quot;Something is wrong&quot;, MessageType.WARNING);</programlisting></para>
        </listitem>
        <listitem>
          <para><code>showOptionDialog()</code> is intended to display a message and buttons for user actions. In addition to parameters described for <code>showMessageDialog()</code>, the method takes an array or a list of actions. A button is created for each dialog action. After a button is clicked, the dialog  closes invoking <code>actionPerform()</code> method of the corresponding action.</para>
          <para>It is convenient to use anonymous classes derived from <code>DialogAction</code> for buttons with standard names and icons. Five types of actions defined by the <code>DialogAction.Type</code> enum are supported: <code>OK</code>, <code>CANCEL</code>, <code>YES</code>, <code>NO</code>, <code>CLOSE</code>. Names of corresponding buttons are extracted from the  <link linkend="main_message_pack">mаin message pack</link>.</para>
          <para>Below is an example of a dialog invocation with <code>Yes</code> and <code>No</code> buttons and with a caption and messages taken from the message pack of the current screen:<programlisting language="java">showOptionDialog(
      getMessage(&quot;confirmCopy.title&quot;),
      getMessage(&quot;confirmCopy.msg&quot;),
      MessageType.CONFIRMATION,
      new Action[]{
              new DialogAction(DialogAction.Type.YES) {
                  public void actionPerform(Component component) {
                      copySettings();
                  }
              },
              new DialogAction(DialogAction.Type.NO)
      }
);</programlisting></para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="notifications">
      <title>Notifications</title>
      <para>Notifications can be invoked using  <code>showNotification()</code> method of the  <code>IFrame</code> interface. This interface is implemented by  <link linkend="screen_controller">screen controlller</link>,  so this method can be invoked directly from the controller code.</para>
      <para><code>showNotification()</code> method takes the following parameters:<itemizedlist>
          <listitem>
            <para><code>caption</code> - notification text. In case of HTML-type (see below), you can format message
                text using HTML-tags. When using HTML, don’t forget to escape data to prevent code injection in the
                web-client. You can use <code>\n</code> characters for line breaks in non-HTML messages.</para>
          </listitem>
          <listitem>
            <para><code>description</code> – an optional description displayed under the caption. You can also use
                <code>\n</code> character or HTML-formatting.</para>
          </listitem>
          <listitem>
            <para><code>type</code> – notification type. Possible values:<itemizedlist>
                <listitem>
                  <para><code>TRAY</code>, <code>TRAY_HTML</code> - a notification is displayed in the bottom right corner of the application and disappears automatically.</para>
                </listitem>
                <listitem>
                  <para><code>HUMANIZED</code>, <code>HUMANIZED_HTML</code> – a standard notification displayed in the center of the screen, disappears automatically.</para>
                </listitem>
                <listitem>
                  <para><code>WARNING</code>, <code>WARNING_HTML</code> – a warning. Disappears when clicked.</para>
                </listitem>
                <listitem>
                  <para><code>ERROR</code>, <code>ERROR_HTML</code> – a notification about an error. Disappears when clicked.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist></para>
      <para>Examples of invoking a notification:<programlisting language="java">showNotification(getMessage(&quot;selectBook.text&quot;), NotificationType.HUMANIZED);

showNotification(&quot;Validation error&quot;, &quot;&lt;b&gt;Date&lt;/b&gt; is incorrect&quot;, NotificationType.TRAY_HTML);</programlisting></para>
    </section>
  </section>
  <section id="background_tasks">
    <title>Background Tasks</title>
    <para>Background tasks can be used at the client tier to perform tasks asynchronously without locking the user interface.</para>
    <section><title>Using Background Tasks</title><orderedlist>
        <listitem>
          <para>A task is defined as an inheritor of an abstract class  <code>BackgroundTask</code>. A link to a screen controller which will be associated with the task and the task timeout should be passed to the task constructor.</para>
          <para>Closing the screen will interrupt the tasks associated with it. Additionally, the task will be interrupted automatically after the specified timeout.</para>
          <para>Actual actions performed by the task are implemented in the  <code>run()</code> method.</para>
        </listitem>
        <listitem>
          <para>An object of &quot;<code>BackgroundTaskHandler</code>&quot; class controlling the task is created by passing a task instance to the  <code>handle()</code> method of the  <code>BackgroundWorker</code> bean. A link to a <code>BackgroundWorker</code> can be obtained by an injection in a  <link linkend="screen_controller">screen controller</link>, or a static method of the <code>AppBeans</code> class.</para>
        </listitem>
      </orderedlist>Example:<programlisting language="java">@Inject
protected BackgroundWorker backgroundWorker;

@Override
public void init(Map&lt;String, Object&gt; params) {
  // Create task with 10 sec timeout and this screen as owner
  BackgroundTask&lt;Integer, Void&gt; task = new BackgroundTask&lt;Integer, Void&gt;(10, this) {
      @Override
      public Void run(TaskLifeCycle&lt;Integer&gt; taskLifeCycle) throws Exception {
          // Do something in background thread
          for (int i = 0; i &lt; 5; i++) {
              TimeUnit.SECONDS.sleep(1); // time consuming computations
              taskLifeCycle.publish(i); // publish current progress to show it in progress() method
          }
          return null;
      }

      @Override
      public void canceled() {
          // Do something in UI thread if the task is canceled
      }

      @Override
      public void done(Void result) {
          // Do something in UI thread when the task is done
      }

      @Override
      public void progress(List&lt;Integer&gt; changes) {
          // Show current progress in UI thread
      }
  };
  // Get task handler object and run the task
  BackgroundTaskHandler taskHandler = backgroundWorker.handle(task);
  taskHandler.execute();
}</programlisting><para>Detailed information about methods is provided in JavaDocs for <code>BackgroundTask</code>, <code>TaskLifeCycle</code>, <code>BackgroundTaskHandler</code> classes. </para><para>Please note the following:</para><itemizedlist>
        <listitem>
          <para><code>BackgroundTask&lt;T, V&gt;</code> is a parameterized class:</para>
          <itemizedlist>
            <listitem>
              <para><code>T</code> − the type of objects displaying task progress. Objects of this type are passed to the task&apos;s  <code>progress()</code> method during an invocation of  <code>TaskLifeCycle.publish()</code> in the working thread.</para>
            </listitem>
            <listitem>
              <para><code>V</code> − task result type passed to the <code>done()</code> method. It can also be obtained by invoking   <code>BackgroundTaskHandler.getResult()</code> method, which will wait for a task to complete.</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para><code>canceled()</code> method is invoked only during a controlled cancelation of a task, i.e. when  <code>cancel()</code> is invoked in the  <code>TaskHandler</code>.</para>
        </listitem>
        <listitem>
          <para>If task timeout expires, or a window where it was running closes, the task is stopped without notifications. In the <structname>Web Client</structname> block, timeout-based interruption is performed with a delay specified in the <link linkend="cuba.backgroundWorker.maxClientLatencySeconds">cuba.backgroundWorker.maxClientLatencySeconds</link> application property.</para>
        </listitem>
        <listitem>
          <para><code>run()</code> method of a task should support external interruptions. To ensure this, we recommend checking the <code>TaskLifeCycle.isInterrupted()</code> flag periodically during long processes and stopping execution when needed. Additionally, you should not silently discard <code>InterruptedException</code> (or any other exceptions) - instead you should either exit the method correctly or not handle the exception at all.</para>
        </listitem>
        <listitem>
          <para><code>BackgroundTask</code> objects are stateless. If you did not create fields for temporary data when implementing task class, you can start several parallel processes using a single task instance.</para>
        </listitem>
        <listitem>
          <para><code>BackgroundHandler</code> object (its  <code>execute()</code> method) can only be started once. If you need to restart a task frequently, use  <code>BackgroundTaskWrapper</code> class.</para>
        </listitem>
        <listitem>
          <para>Use  <code>BackgroundWorkWindow</code> or  <code>BackgroundWorkProgressWindow</code> classes with a set of static methods to show a modal window with progress indicator and <guibutton>Cancel</guibutton> button. You can define progress indication type and allow or prohibit cancellation of the background task for the window.</para>
        </listitem>
        <listitem>
          <para>If you need to use certain values of visual components in the task thread, you should implement their acquisition in <code>getParams()</code> method, which runs in the UI thread once, when a task starts. In the   <methodname>run()</methodname> method, these parameters will be accessible via the  <code>getParams()</code> method of the <code>TaskLifeCycle</code> object.</para>
        </listitem>
        <listitem>
          <para>If any exception occurs, the framework invokes  <code>BackgroundTask.handleException()</code> method  in the UI thread, which can be used to display the error.</para>
        </listitem>
      </itemizedlist></section>
    <section>
      <title>Setting Up Environment </title>
      <para>In order for background tasks to work correctly, the following configuration should be performed for the application project:</para>
      <itemizedlist>
        <listitem>
          <para>Timeout-based task interruption is implemented by the  <code>WatchDog</code> bean. To ensure that it is invoked periodically, you should add the following declaration to the <link linkend="spring.xml">spring.xml</link> files of the  <structname>Web Client </structname>and  <structname>Desktop Client</structname> blocks:<programlisting language="xml">&lt;bean id=&quot;backgroundWorkerScheduler&quot; class=&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler&quot;&gt;
  &lt;property name=&quot;daemon&quot; value=&quot;true&quot;/&gt;
  &lt;property name=&quot;poolSize&quot; value=&quot;1&quot;/&gt;
&lt;/bean&gt;

&lt;task:scheduled-tasks scheduler=&quot;backgroundWorkerScheduler&quot;&gt;
  &lt;task:scheduled ref=&quot;cuba_BackgroundWorker_WatchDog&quot; method=&quot;cleanupTasks&quot; fixed-delay=&quot;2000&quot;/&gt;
&lt;/task:scheduled-tasks&gt; </programlisting></para>
        </listitem>
        <listitem>
          <para>In the  <structname>Web Client</structname> block task state polling is initiated by the client code running in web-browser. Polling interval is defined by the  <link linkend="cuba.backgroundWorker.uiCheckInterval">cuba.backgroundWorker.uiCheckInterval</link> application property; the default value is 2 seconds.</para>
          <para>Additionally, background tasks running in the  <structname>Web Client</structname> block are affected by <link linkend="cuba.backgroundWorker.maxActiveTasksCount">cuba.backgroundWorker.maxActiveTasksCount</link> and <link linkend="cuba.backgroundWorker.maxClientLatencySeconds">cuba.backgroundWorker.maxClientLatencySeconds</link> application properties.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section id="gui_themes">
    <title>Creating Application Themes</title>
    <para>Theme is used to manage visual presentation of an application.</para>
    <section id="web_theme">
      <title>Themes in Web Applications</title>
      <para>A theme consists of SCSS files and other resources like images.</para>
      <section id="web_theme_usage">
        <title>Using Existing Themes</title>
        <para>The platform includes two ready to use themes:  Halo and Havana. By default, the application will use the one specified in the <link linkend="cuba.web.theme">cuba.web.theme</link> application property. The user may select the other theme in the standard  <guimenu>Help</guimenu> &gt; <guimenu>Settings</guimenu> screen. If you want to disable the option to select new themes for users, register the  <code>settings</code> screen in the  <link linkend="screens.xml">web-screens.xml</link> file of your project and set the  <code>changeThemeEnabled = false</code> parameter for it:
        <programlisting language="xml">&lt;screen id=&quot;settings&quot; template=&quot;/com/haulmont/cuba/web/app/ui/core/settings/settings-window.xml&quot;&gt;
  &lt;param name=&quot;changeThemeEnabled&quot; value=&quot;false&quot;/&gt;
&lt;/screen&gt;          </programlisting></para>
        <para>Some branding parameters can be configured for default themes, such as icons, login and main application window captions, and the website icon (<filename>favicon.ico</filename>). This can be done in the following way:<orderedlist>
            <listitem>
              <para>Create the following files structure in the   <filename>modules/web</filename> directory of the project:<programlisting>VAADIN/
themes/
  havana/
    branding/
      myapp-login.png
      myapp-menu.png
    favicon.ico</programlisting></para>
              <para>Here, <filename>havana</filename> is the directory of the theme,  <filename>favicon.ico</filename> is the website icon, <filename>myapp-login.png</filename> - login window logo image,  <filename>myapp-menu.png</filename> - main window logo image. </para>
            </listitem>
            <listitem>
              <para>Open <guimenu>Project properties</guimenu> &gt; <guimenu>Edit</guimenu> in <application>CUBA Studio</application> and click <guibutton>Branding</guibutton> at the bottom of the page.  Set the paths to icon files for application and login window using <guibutton>Set application logo image</guibutton> and <guibutton>Set login window logo image</guibutton> links. The path is specified relatively to the theme directory. Other links can be used to set window captions and the login window welcome text.</para>
              <para>These parameters are saved in the  <link linkend="main_message_pack">main message pack</link> of the   <structname>gui</structname> module (i.e the  <filename>modules/gui/&lt;root_package&gt;/gui/messages.properties</filename> file and its variants for different locales). Message packs allow you to use different image files for different user locales. A sample <filename>messages.properties</filename> file:<programlisting>application.caption = MyApp
application.logoImage = branding/myapp-menu.png

loginWindow.caption = MyApp Login
loginWindow.welcomeLabel = Welcome to MyApp!
loginWindow.logoImage = branding/myapp-login.png</programlisting></para>
              <para>You should not specify the path to  <code>favicon.ico</code>, since it must be located in the root directory of the theme.</para>
            </listitem>
          </orderedlist>Image files that will be used in the <link linkend="gui_attr_basic_icon">icon</link> properties for  <link linkend="gui_Action">actions</link> and visual components, e.g.  <link linkend="gui_Button">Button</link>, can be also added to default themes. </para>
        <para>For example, to add an icon to the Havana theme, you just have to add the image file to the  <filename>modules/web/VAADIN/themes/havana</filename> directory described above (it is recommended to create a subfolder): <programlisting>VAADIN/
themes/
  havana/
    images/
      address-book.png</programlisting>After that, you can use the icon in the application by specifying the path relatively to the theme directory in the <code>icon</code> property:<programlisting language="xml">&lt;action id=&quot;adresses&quot;
      icon=&quot;images/address-book.png&quot;/&gt;</programlisting></para>
        <para>Font elements of  <ulink url="http://fortawesome.github.io/Font-Awesome">Font Awesome</ulink> can be used instead of icons. You should just specify the name of the required constant of the  <code>com.vaadin.server.FontAwesome</code> in the <code>icon</code> property with a  <code>font-icon:</code> prefix, for example:<programlisting language="xml">&lt;action id=&quot;adresses&quot;
      icon=&quot;font-icon:BOOK&quot;/&gt;</programlisting></para>
        <para>Images used for standard actions and screens of the platform can be replaced in the project. To replace a Havana theme icon, you should just copy the required image file to the  <filename>modules/web/VAADIN/themes/havana/icons</filename> directory of the project. For example, <filename>create.png</filename> file should be created to replace the icon for the standard   <code>create</code> action (the file name can be easily identified by URL of the corresponding <code>img</code> HTML-element in the running application):<programlisting>VAADIN/
themes/
  havana/
    icons/
      create.png</programlisting></para>
        <para>In Halo theme, Font Awesome icons are used for standard actions and platform screens by default (if <link linkend="cuba.web.useFontIcons">cuba.web.useFontIcons</link> is enabled). In this case, you can replace a standard icon only by creating a custom theme based on Halo (see  <link linkend="web_theme_creation">below</link>) and setting the required correlation between the icon and the font element name in <filename>&lt;your_theme&gt;-theme.properties</filename> file:<programlisting>cuba.web.icons.create.png = PLUS</programlisting></para>
        <para>If  <code>cuba.web.useFontIcons</code> property is disabled, the icons for standard actions and screens are loaded similar to Havana theme - from image files in the  <filename>icons</filename> subfolder. They can be replaced in the manner described for Havana.</para>
        <para>Halo theme supports the  <link linkend="cuba.web.useInverseHeader">cuba.web.useInverseHeader</link> property, which controls the colour of the application header. By deafult, this property is set to <code>true</code>, which sets a dark (inverse) header.You can make a light header without any changes to the theme, simply by setting this property to  <code>false</code>.</para>
      </section>
      <section id="web_theme_extension">
        <title>Extending an Existing Theme</title>
        <para>A platform theme can be modified in the project. Themes are described in <ulink url="http://sass-lang.com">SCSS</ulink> files,  that is why the simplest way to modify the theme is to modify the base SCSS variables that control application background colour, component size, or margins. Changing specific component parameters requires some expertise in CSS.</para>
        <para>To adapt (extend) a theme in the project, you should create a specific file structure in the  <structname>web</structname> module. A convenient way to do this is to use <application>CUBA Studio</application>: open the  <guimenu>Project properties</guimenu> section and click  <guibutton>Create theme extension</guibutton>. Select the theme you want to extend in the popup window. As a result, a directory structure, similar to the one described in the  <link linkend="web_theme_usage">previous</link> section, will be created. Apart from that, the <link linkend="build.gradle">build.gradle</link> script will be complemented with the <code>buildScssThemes</code> task,  which is executed automatically each time the <structname>web</structname> module is built.</para>
        <para>Below is the example of a Halo theme extension, since it is based on <ulink url="https://vaadin.com/valo">Valo</ulink> theme from <application>Vaadin</application>, and provides the widest range of options for customization. </para>
        <para>The  <filename>themes/halo/halo-ext-defaults.scss</filename> file is intended for theme variables. Most of the Halo variables correspond to those described in the  <ulink url="https://vaadin.com/api/valo">Valo documentation</ulink>. Below are the most common variables:<programlisting language="">$v-background-color: #fafafa;        /* component background colour */
$v-app-background-color: #e7ebf2;    /* application background colour */
$v-panel-background-color: #fff;     /* panel background colour */
$v-focus-color: #3b5998;             /* focused element colour */
$v-error-indicator-color: #ed473b;   /* empty required fields colour */

$v-line-height: 1.35;                /* line height */
$v-font-size: 14px;                  /* font size */
$v-font-weight: 400;                 /* font weight */
$v-unit-size: 30px;                  /* base theme size, defines the height for buttons, fields and other elements */

$v-font-size--h1: 24px;              /* h1-style Label size */
$v-font-size--h2: 20px;              /* h2-style Label size */
$v-font-size--h3: 16px;              /* h3-style Label size */

/* margins for containers */
$v-layout-margin-top: 10px;
$v-layout-margin-left: 10px;
$v-layout-margin-right: 10px;
$v-layout-margin-bottom: 10px;

/* spacing between components in a container (if enabled) */
$v-layout-spacing-vertical: 10px;
$v-layout-spacing-horizontal: 10px;

/* basic table dimensions */
$v-table-row-height: 30px;
$v-table-header-font-size: 13px;
$v-table-cell-padding-horizontal: 7px;

/* input field focus style */
$v-focus-style: inset 0px 0px 5px 1px rgba($v-focus-color, 0.5);
/* required fields focus style */
$v-error-focus-style: inset 0px 0px 5px 1px rgba($v-error-indicator-color, 0.5);

/* animation for elements is enabled by default */
$v-animations-enabled: true;
/* popup window animation is disabled by default */
$v-window-animations-enabled: false;

/* inverse header is controlled by cuba.web.useInverseHeader property */
$v-support-inverse-menu: true;</programlisting></para>
        <para>A sample <filename>halo-ext-defaults.scss</filename> for a theme with a dark background and slightly minimized margins is provided below:<programlisting>$v-background-color: #444D50;

$v-font-size--h1: 22px;
$v-font-size--h2: 18px;
$v-font-size--h3: 16px;

$v-layout-margin-top: 8px;
$v-layout-margin-left: 8px;
$v-layout-margin-right: 8px;
$v-layout-margin-bottom: 8px;

$v-layout-spacing-vertical: 8px;
$v-layout-spacing-horizontal: 8px;

$v-table-row-height: 25px;
$v-table-header-font-size: 13px;
$v-table-cell-padding-horizontal: 5px;

$v-support-inverse-menu: false;</programlisting>To modify parameters for specific components, you should add the corresponding CSS code to <code>@mixin halo-ext {...}</code> block of the  <filename>halo-ext.scss</filename> file. For example, to display the application menu items in bold, the contents of the <filename>halo-ext.scss</filename> file should be as follows:<programlisting language="">@import &quot;../halo/halo&quot;;

@mixin halo-ext {
@include halo;

.v-menubar-menuitem-caption {
  font-weight: bold;
}
}</programlisting></para>
      </section>
      <section id="web_theme_creation">
        <title>Creating a Custom Theme</title>
        <para>You can create one or several application themes in the project and give the users an opportunity to select the most appropriate one. Creating new themes also allows you to override the variables in the  <filename>*-theme.properties</filename> files, which set a few server-side parameters: <itemizedlist>
            <listitem>
              <para>Default dialog window size.</para>
            </listitem>
            <listitem>
              <para>Default input field width.</para>
            </listitem>
            <listitem>
              <para>Dimensions of some components (<link linkend="gui_Filter">Filter</link>, <link linkend="gui_FileMultiUploadField">FileMultiUploadField</link>).</para>
            </listitem>
            <listitem>
              <para>Correlation between icon names and constants of the <code>com.vaadin.server.FontAwesome</code> enumeration for using <application>Font Awesome</application> in standard actions and screens of the platform, if   <link linkend="cuba.web.useFontIcons">cuba.web.useFontIcons</link> is enabled.</para>
            </listitem>
          </itemizedlist></para>
        <para>Below is the example of creating a Halo-based Facebook theme, which resembles the interface of a popular social network.<orderedlist>
            <listitem>
              <para>Open <guimenu>Project properties</guimenu> section in <application>CUBA Studio</application> and click <guibutton>Create theme extension</guibutton>. Select  <code>halo</code> and click <guibutton>Create</guibutton>. A Halo theme extension will be created in the project as described in the previous section.</para>
            </listitem>
            <listitem>
              <para>Rename the  <filename>themes/halo</filename> directory in the <structname>web</structname> module to  <filename>themes/facebook</filename>, then rename the  <filename>halo-ext.scss</filename> file inside it to  <filename>facebook.scss</filename>, and  <filename>halo-ext-defaults.scss</filename> to  <filename>facebook-defaults.scss</filename>.</para>
            </listitem>
            <listitem>
              <para>Edit the  <filename>styles.scss</filename> file by changing the  <code>halo-ext</code> imports and the  <code>halo</code> root selector:<programlisting language="">@import &quot;halo-defaults&quot;;
@import &quot;facebook-defaults&quot;;
@import &quot;facebook&quot;;

.facebook {
@include facebook;
}

.v-theme-version {
display: none;
}</programlisting></para>
            </listitem>
            <listitem>
              <para>Edit the   <filename>facebook.scss</filename> file and replace  <code>@mixin halo-ext</code>:<programlisting language="">@import &quot;../halo/halo&quot;;

@mixin facebook {
@include halo;
}</programlisting></para>
            </listitem>
            <listitem>
              <para>Copy the following variables to  <filename>facebook-defaults.scss</filename>:<programlisting>$v-background-color: #fafafa;
$v-app-background-color: #e7ebf2;
$v-panel-background-color: #fff;
$v-focus-color: #3b5998;

$v-border-radius: 0;
$v-textfield-border-radius: 0;

$v-font-family: Helvetica, Arial, &apos;lucida grande&apos;, tahoma, verdana, arial, sans-serif;
$v-font-size: 14px;
$v-font-color: #37404E;
$v-font-weight: 400;

$v-link-text-decoration: none;
$v-shadow: 0 1px 0 (v-shade 0.2);
$v-bevel: inset 0 1px 0 v-tint;
$v-unit-size: 30px;
$v-gradient: v-linear 12%;
$v-overlay-shadow: 0 3px 8px v-shade, 0 0 0 1px (v-shade 0.7);
$v-shadow-opacity: 20%;
$v-selection-overlay-padding-horizontal: 0;
$v-selection-overlay-padding-vertical: 6px;
$v-selection-item-border-radius: 0;

$v-line-height: 1.35;
$v-font-size: 14px;
$v-font-weight: 400;
$v-unit-size: 25px;

$v-font-size--h1: 22px;
$v-font-size--h2: 18px;
$v-font-size--h3: 16px;

$v-layout-margin-top: 8px;
$v-layout-margin-left: 8px;
$v-layout-margin-right: 8px;
$v-layout-margin-bottom: 8px;

$v-layout-spacing-vertical: 8px;
$v-layout-spacing-horizontal: 8px;

$v-table-row-height: 25px;
$v-table-header-font-size: 13px;
$v-table-cell-padding-horizontal: 5px;

$v-focus-style: inset 0px 0px 1px 1px rgba($v-focus-color, 0.5);
$v-error-focus-style: inset 0px 0px 1px 1px rgba($v-error-indicator-color, 0.5);</programlisting></para>
            </listitem>
            <listitem>
              <para>Create a  <filename>facebook-theme.properties</filename> file in the   <filename>src</filename> directory of the <structname>web</structname> module:<programlisting>@include=halo-theme.properties</programlisting></para>
              <para>If necessary, you can use this file to override server-side theme variables from the <filename>halo-theme.properties</filename> file of the platform.</para>
            </listitem>
            <listitem>
              <para>Add the following properties to the  <filename>web-app.properties</filename>  file:<programlisting>cuba.web.theme = facebook
cuba.themeConfig = havana-theme.properties halo-theme.properties facebook-theme.properties</programlisting></para>
            </listitem>
            <listitem>
              <para>Rebuild the application and start the server. Now the user will see the application in Facebook theme on first login, and will be able to choose between Facebook, Halo and Havana in the  <guimenu>Help</guimenu> &gt; <guimenu>Settings</guimenu> menu.</para>
            </listitem>
          </orderedlist></para>
      </section>
    </section>
    <section id="desktop_theme">
      <title>Themes in Desktop Applications</title>
      <para>The base theme for desktop applications is  <code>Nimbus</code>.</para>
      <para>To add any changes to the standard theme, you need to create a   <code>res.nimbus</code> package in the <code>com.sample.sales.desktop</code> package of the  <structname>desktop</structname> module. Theme files will be stored in the  <code>res.nimbus</code> package.</para>
      <figure>
        <title/>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/gui_themes_desktop_structure.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The  <code>icons</code> folder contains icon files, the  <filename>nimbus.xml</filename> file contains the description of the theme style.</para>
      <para>The  <link linkend="app_properties">properties file</link> of a desktop application should have <property>cuba.desktop.resourceLocations</property> property defined (defines a set of folders containing the style files):<programlisting>cuba.desktop.resourceLocations = \
com/haulmont/cuba/desktop/res \
com/sample/sales/desktop/res</programlisting></para>
      <para><emphasis role="bold">Examples</emphasis></para>
      <orderedlist>
        <listitem>
          <para>Adding an icon.</para>
          <para>If you need to add a new icon to a desktop application, for example an icon for a button, you should create a <code>res.nimbus.icons</code> package within the  <code>com.sample.sales.desktop </code>package of the  <structname>desktop</structname> module and put the corresponding icon there.</para>
          <figure>
            <title/>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_themes_example4.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Description of a  <link linkend="gui_Button">button</link> in the  <link linkend="screen_xml_glossentry">descriptor</link> with a path to an icon set in the  <link linkend="gui_attr_basic_icon">icon</link> attribute:</para>
          <programlisting language="xml">&lt;button id=&quot;button1&quot; caption=&quot;Attention&quot;  icon=&quot;icons/attention.png&quot;/&gt;</programlisting>
          <para>Below you can see a button with the  <filename>attention.png</filename> icon.</para>
          <figure>
            <title/>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_themes_example5.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
        <listitem>
          <para>Redefining default values of theme properties. </para>
          <para>For example, let us change text field background color for mandatory fields.</para>
          <para>The  <filename>nimbus.xml</filename> file with the following content should be created in the  <code>res.nimbus</code> package:<programlisting language="xml">&lt;theme xmlns=&quot;http://schemas.haulmont.com/cuba/5.4/desktop-theme.xsd&quot;&gt;
  &lt;ui-defaults&gt;
      &lt;color property=&quot;cubaRequiredBackground&quot; value=&quot;#f78260&quot;/&gt;
  &lt;/ui-defaults&gt;
&lt;/theme&gt;</programlisting></para>
          <para>The  <sgmltag>ui-defaults</sgmltag> element redefines the values of platform theme properties set by default.</para>
          <para>The  <sgmltag>ui-defaults</sgmltag> element includes both the properties contained in a standard <code>Nimbus</code> (<ulink url="http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/_nimbusDefaults.html">http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/_nimbusDefaults.html</ulink>) theme and the properties created in the CUBA platform.</para>
          <para>In this example, we redefined the value of the CUBA property –   <sgmltag>cubaRequiredBackground</sgmltag>, which stores the background color for required fields. This change will affect all required input fields.</para>
        </listitem>
        <listitem>
          <para>Creating a style for an element using standard tools.</para>
          <para>Let’s consider an example of highlighting a text in bold.</para>
          <para>To create a style like that you need to define <sgmltag>style</sgmltag> element in the theme file  <filename>nimbus.xml</filename> in the following way:<programlisting language="xml">&lt;theme xmlns=&quot;http://schemas.haulmont.com/cuba/5.4/desktop-theme.xsd&quot;&gt;
  &lt;style name=&quot;boldlabel&quot;&gt;
      &lt;font style=&quot;bold&quot;/&gt;
  &lt;/style&gt;
&lt;/theme&gt;</programlisting></para>
          <para><sgmltag>style</sgmltag> element can also contain other elements which can define different properties: <sgmltag>background</sgmltag>, <sgmltag>foreground</sgmltag>, <sgmltag>icon</sgmltag>.</para>
          <para>You should add <link linkend="gui_attr_basic_stylename">stylename</link> attribute   with the name of the created style into the description of the corresponding label in an <link linkend="screen_xml_glossentry">xml-descriptor</link>.<programlisting language="xml">&lt;label id=&quot;label1&quot; value=&quot;msg://labelVal&quot; stylename=&quot;boldlabel&quot;/&gt;</programlisting></para>
          <para>In such way the style will be applied only to the labels that have  <link linkend="gui_attr_basic_stylename">stylename</link> attribute with the value of  <literal>boldlabel</literal>.</para>
        </listitem>
        <listitem><para>Creating a custom style.</para>If standard style adjustment capabilities are insufficient, you can create a custom style.<para>Let us create a custom style that will be applied to the  <link linkend="gui_Label">Label</link> component. With this style, the content of the   <link linkend="gui_Label">Label</link> will be displayed as underlined..</para><para>First, let us create a decorator class  <code>UnderlinedLabelDecorator</code>:<programlisting language="java">public class UnderlinedLabelDecorator implements ComponentDecorator {

  @Override
  @SuppressWarnings(&quot;unchecked&quot;)
  public void decorate(Object component, Set&lt;String&gt; state) {
      DesktopLabel item = (DesktopLabel) component;
      JLabel jlabel = item.getComponent();

      Font originalFont = jlabel.getFont();
      Map attributes = originalFont.getAttributes();
      attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
      jlabel.setFont(originalFont.deriveFont(attributes));
  }
}</programlisting></para><para>Let us define a custom style in <filename>nimbus.xml</filename>:<programlisting language="xml">&lt;theme xmlns=&quot;http://schemas.haulmont.com/cuba/5.4/desktop-theme.xsd&quot;&gt;
  &lt;style name=&quot;label-underlined&quot; component=&quot;com.haulmont.cuba.desktop.gui.components.DesktopLabel&quot;&gt;
      &lt;custom class=&quot;com.sample.sales.desktop.gui.decorators.UnderlinedLabelDecorator&quot;/&gt;
  &lt;/style&gt;
&lt;/theme&gt;</programlisting></para><para>The  <sgmltag>component</sgmltag> attribute of the   <sgmltag>style</sgmltag> element contains the name of the component that the style with the name <literal>label-underlined</literal> can be applied to.</para><para>The  <sgmltag>custom</sgmltag> element should contain path to the decorator class defined above.</para><para>When describing a label element that should be affected by the custom style, you should specify the style name in the <sgmltag>stylename</sgmltag> attribute:<programlisting language="xml">&lt;label id=&quot;label1&quot; stylename=&quot;label-underlined&quot; value=&quot;Label&quot;/&gt;</programlisting></para><figure>
            <title>A label component with a custom style</title>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/gui_themes_example6.png"/>
              </imageobject>
            </mediaobject>
          </figure></listitem>
      </orderedlist>
    </section>
  </section>
  <section id="gui_web">
    <title>Web Client Specifics</title>
    <para>Implementation of the generic user interface of the   <structname>Web Client</structname> <link linkend="app_tiers">block</link> is based on the  <application>Vaadin</application> framework. The main classes available in the web client infrastructure are described below.<figure>
        <title>Classes of the Web Client Infrastructure</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/WebClientInfrastructure.png"/>
          </imageobject>
        </mediaobject>
      </figure></para>
    <itemizedlist>
      <listitem>
        <para><code>App</code> - the central class of the application infrastructure. Contains links to  <code>Connection</code>, <code>AppWindow</code> and other infrastructure objects. Only one instance of  <code>App</code> exists for a given HTTP-session.</para>
        <para>Each application typically has its own <code>App</code> class class inherited from the   <code>DefaultApp</code> and thus from the basic abstract  <code>App</code> class of the platform. It allows to override <code>createAppWindow()</code> and <code>createLoginWindow()</code> methods to create custom implementations of the main window and the login window.</para>
        <para>The  <code>App</code> class of an application should be registered in the  <code>application</code> parameter of the  <code>app_servlet</code> in the  <link linkend="web.xml">web.xml</link> file of the  <structname>web</structname> module.</para>
      </listitem>
      <listitem>
        <para><code>Connection</code> is the interface providing functionality of connecting to middleware and storing <link linkend="userSession">user sessions</link>. <code>DefaultConnection</code> is a standard implementation of this interface.</para>
      </listitem>
      <listitem>
        <para><code>AppUI</code> is a platform class inherited from  <code>com.vaadin.ui.UI</code> class. There is one instance of this class for each open tab of a web browser. Contains a link to the <code>UIView</code> object – either a  <code>LoginWindow</code> or  <code>AppWindow</code>.</para>
        <para><code>AppUI</code> application class should be registered in the <code>UI</code> parameter of the  <code>app_servlet</code> in the <filename>web/WEB-INF/web.xml</filename> file of the  <structname>web</structname> module. In most cases, standard platform class is used.</para>
      </listitem>
      <listitem>
        <para><code>LoginWindow</code> –  the window displayed before a user logs in. In your application you can create an inheritor of  <code>LoginWindow</code> and redefine the  <code>createLoginWindow()</code> method of the  <code>App</code> class to use it.</para>
      </listitem>
      <listitem>
        <para><code>AppWindow</code> – main application window displayed after a user logs in. In your application, you can create an inheritor of  <code>AppWindow</code> and override the  <code>createAppWindow()</code> method of the  <code>App</code> class to use it.</para>
        <para>You can control certain main window parameters without creating  <code>AppWindow</code> inheritor, using the following application properties:<itemizedlist>
            <listitem>
              <para><link linkend="cuba.web.useLightHeader">cuba.web.useLightHeader</link> - switches on compact window header - logo, menu bar, user name and log out button in one line. When switched off, <code>AppWindow.createTitleLayout()</code> method creates additional area at the top.</para>
            </listitem>
            <listitem>
              <para><link linkend="cuba.web.foldersPaneEnabled">cuba.web.foldersPaneEnabled</link> - allows creation of  <link linkend="folders_pane">folders pane</link> by <code>AppWindow.createFoldersPane()</code> method.</para>
            </listitem>
            <listitem>
              <para><link linkend="cuba.web.appWindowMode">cuba.web.appWindowMode</link> – sets default mode for the main window: tabbed or single screen  (<code>TABBED</code> или <code>SINGLE</code>). Users can change the mode later using <guimenu>Help</guimenu> &gt; <guimenu>Settings</guimenu> screen.</para>
            </listitem>
            <listitem>
              <para><link linkend="cuba.web.maxTabCount">cuba.web.maxTabCount</link> – when the main window is in the tabbed mode, this property sets the maximum number of tabs that a user can open. The default value is 7.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
      <listitem>
        <para><code>WindowManager</code> - the central class implementing application screens management logic.  <code>openWindow()</code>, <code>openEditor()</code>, <code>showMessageDialog()</code> and other methods of the  <code>IFrame</code> interface implemented by screen <link linkend="screen_controller">controllers</link> delegate to the window manager.   <code>WindowManager</code> class is located in the platform’s common  <structname>gui</structname> module and is abstract. The  <structname>web</structname> module has a dedicated <code>WebWindowManager</code> class that implements web client specifics.</para>
        <para>Normally, the  <code>WindowManager</code> is not used in the application code directly.</para>
      </listitem>
      <listitem>
        <para><code>ExceptionHandlers</code> - contains a collection of <link linkend="exceptionHandlers">client-level exception handlers</link>.</para>
      </listitem>
    </itemizedlist>
    <section id="webComponentsHelper">
      <title>Working with Vaadin Components </title>
      <para>In order to work directly with Vaadin components implementing interfaces of the <link linkend="gui_vcl">visual components library</link> in the <structname>Web Client</structname>  <link linkend="app_tiers">block</link> you should use the <code>WebComponentsHelper</code> class. It has two static methods to retrieve links to Vaadin components:<itemizedlist>
          <listitem>
            <para><code>unwrap</code> – retrieves a Vaadin component for a given CUBA component.</para>
          </listitem>
          <listitem>
            <para><code>getComposition</code> - retrieves a Vaadin component that is the outmost external container in the implementation of a given CUBA component. For simple components, such as   <link linkend="gui_Button">Button</link> this method returns the same object as <code>unwrap()</code> - <code>com.vaadin.ui.Button</code>. For complex components, such as  <link linkend="gui_Table">Table</link>, <code>unwrap()</code> will return the corresponding object -   <code>com.vaadin.ui.Table</code>, while  <code>getComposition()</code> will return  <code>com.vaadin.ui.VerticalLayout</code>, which contains the table together with <link linkend="gui_ButtonsPanel">ButtonsPanel</link> and  <code>RowsCount</code> defined with it.</para>
          </listitem>
        </itemizedlist></para>
      <para>Please note that if a screen is located in the project’s <structname>gui</structname> module, you can only work with generalized interfaces of CUBA components. In order to use  <code>WebComponentsHelper.unwrap()</code> you should either put the entire screen into the  <structname>web</structname> module, or use the mechanism of <link linkend="companions">controller companions</link>.</para>
    </section>
  </section>
  <section id="gui_desktop">
    <title>Desktop Client Specifics</title>
    <para>Implementation of the generic user interface in the <structname>Desktop Client</structname>  <link linkend="app_tiers">block</link> is based on   <application>Java Swing</application>. The main classes available in the desktop client infrastructure are described below.<figure>
        <title>Classes of the Desktop Client Infrastructure</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="img/DesktopClientInfrastructure.png"/>
          </imageobject>
        </mediaobject>
      </figure></para>
    <itemizedlist>
      <listitem>
        <para><code>App</code> – central class of the desktop application infrastructure. Contains links to   <code>Connection</code> and main <code>TopLevelFrame</code>, as well as methods for initialization and retrieval of application settings. </para>
        <para>In your application, you should create a custom class – inheritor of  <code>App</code> and override the following methods:<itemizedlist>
            <listitem>
              <para><code>getDefaultAppPropertiesConfig()</code> - should return a string where all <link linkend="app_properties_files">application properties files</link> should be listed separated by spaces:<programlisting language="java">@Override
protected String getDefaultAppPropertiesConfig() {
  return &quot;/cuba-desktop-app.properties /desktop-app.properties&quot;;
}</programlisting></para>
            </listitem>
            <listitem>
              <para><code>getDefaultHomeDir()</code> - should return path to the folder, where temporary and work files should be stored. For example:<programlisting language="java">@Override
protected String getDefaultHomeDir() {
  return System.getProperty(&quot;user.home&quot;) + &quot;/.mycompany/sales&quot;;
}</programlisting></para>
            </listitem>
            <listitem>
              <para><code>getDefaultLog4jConfig()</code> -  should return name of the <application>Log4J</application> file, if it is defined for the project. For example<programlisting language="java">@Override
protected String getDefaultLog4jConfig() {
  return &quot;sales-log4j.xml&quot;;
}</programlisting></para>
            </listitem>
          </itemizedlist></para>
        <para>Additionally, for your custom class inheriting from the  <code>App</code> you should define <code>main()</code> method in the following way:<programlisting language="java">public static void main(final String[] args) {
  SwingUtilities.invokeLater(new Runnable() {
      public void run() {
          app = new App();
          app.init(args);
          app.show();
          app.showLoginDialog();
      }
  });
}</programlisting></para>
      </listitem>
      <listitem>
        <para><code>Connection</code> - is a class that provides the functionality of connecting to middleware and storing a <link linkend="userSession">user session</link>. </para>
      </listitem>
      <listitem>
        <para><code>LoginDialog</code> – the dialog to enter credentials. In your application you can create an inheritor of  <code>LoginDialog</code> and redefine the  <code>createLoginDialog()</code> method of the  <code>App</code> class to use it.</para>
      </listitem>
      <listitem>
        <para><code>TopLevelFrame</code> – inheritor of  <code>JFrame</code>, which is the top level window. The application has at least one instance of this class created when application is started and containing the main menu. This instance is returned by the  <code>getMainFrame()</code> method of the  <code>App</code> class.</para>
        <para>When a user detaches tabs from the main window or a  <link linkend="gui_TabSheet">TabSheet</link> (see  <code>detachable</code> attribute), additional instances of  <code>TopLevelFrame</code> that do not contain main menu are created.</para>
      </listitem>
      <listitem>
        <para><code>WindowManager</code> - the central class implementing application screens management logic.  <code>openEditor()</code>, <code>showMessageDialog()</code> and other methods of the  <code>IFrame</code> interface implemented by screen  <link linkend="screen_controller">controllers</link> delegate to the window manager.   <code>WindowManager</code> class is located in the platform’s common  <structname>gui</structname> module and is abstract. The <structname>desktop</structname> desktop module has a dedicated  <code>DesktopWindowManager</code> class that implements desktop client specifics.</para>
        <para>Typically, <code>WindowManager</code> is not used in the application code directly.</para>
      </listitem>
      <listitem>
        <para><code>ExceptionHandlers</code> - contains a collection of  <link linkend="exceptionHandlers">client-level exception handlers</link>.</para>
      </listitem>
    </itemizedlist>
    <section id="desktopComponentsHelper">
      <title>Working with Swing Components </title>
      <para> <code>DesktopComponentsHelper</code> class should be used to work directly with Swing components that implement interfaces of the <link linkend="gui_vcl">visual components library</link> in the <structname>Desktop Client</structname>  <link linkend="app_tiers">block</link>. It has two static methods to retrieve links to Swing components:<itemizedlist>
          <listitem>
            <para><code>unwrap</code> – retrieves a Swing component for a given CUBA component.</para>
          </listitem>
          <listitem>
            <para><code>getComposition</code> - retrieves a Swing component that is the outmost external container in the implementation of a given CUBA component. For simple components, such as   <link linkend="gui_Button">Button</link>,  this method returns the same object as <code>unwrap()</code> - <code>javax.swing.JButton</code>. For complex components, such as  <link linkend="gui_Table">Table</link>, <code>unwrap()</code> will return the corresponding   <code>org.jdesktop.swingx.JXTable</code>  instance, while  <code>getComposition()</code> will return an instance of <code>javax.swing.JPanel</code>, which contains a table together with  <link linkend="gui_ButtonsPanel">ButtonsPanel</link> and <code>RowsCount</code> defined with it.</para>
          </listitem>
        </itemizedlist></para>
      <para>Please note that if a screen is located in the project’s  <structname>gui</structname> module, you can only work with generalized interfaces of CUBA-components. In order to use <code>DesktopComponentsHelper.unwrap()</code> you should either put the entire screen in the <structname>desktop</structname> module, or use the mechanism of  <link linkend="companions">companion controllers</link>.</para>
    </section>
  </section>
  <section id="own_components">
    <title>Creating Custom Components</title>
    <para>This section covers the process of creating and using custom visual components in the application. To begin with, we will take a third  party component available as Vaadin add-on, include it in the project and use it directly in the screen. Then we will perform a tighter integration, by creating a new  <link linkend="gui_framework">GUI</link> interface and an XML loader for the component, which will allow us to use it in the same way as other platform components.  </para>
    <section id="vaadin_addon">
      <title>Using Third-Party Vaadin Components</title>
      <para>You can use third-party Vaadin components, distributed as add-ons, in the Web Client. Currently, the Vaadin library <ulink url="https://vaadin.com/directory">https://vaadin.com/directory</ulink> has over 200 CUBA-compatible visual components. The main requirement for compatibility is  the component’s  support of Vaadin 7+. </para>
      <para>The following should be done to integrate a third-party component into the project:<orderedlist>
          <listitem>
            <para>Add <structname>web-toolkit</structname> module to the project. This module integrates with the client (browser) part of Vaadin components. The easiest way to do this is to run the  <guibutton>Create web toolkit module</guibutton> command on the  <guilabel>Project properties</guilabel> panel of the <link linkend="cubaStudio_install">CUBA Studio</link> navigator.  </para>
          </listitem>
          <listitem>
            <para>Add the add-on dependency to the <structname>web</structname> module in the project’s   <link linkend="build.gradle">build.gradle</link>. For example:<programlisting>configure(webModule) {
  ...
  dependencies {
      ...
      compile(&quot;org.vaadin.addons:some-addon:1.2.3&quot;)
  }</programlisting></para>
          </listitem>
          <listitem>
            <para>Include the add-on widget set to the  <filename>AppWidgetSet.gwt.xml</filename> file, created in Step 1:<programlisting>&lt;module&gt;
  ...
  &lt;inherits name=&quot;org.vaadin.someaddon.widgetset.SomeAddonWidgetset&quot; /&gt;</programlisting></para>
          </listitem>
          <listitem>
            <para>In a  <structname>web</structname> module screen (or in a corresponding  <link linkend="companions">companion</link>), get a link to the Vaadin container using the <link linkend="webComponentsHelper">WebComponentsHelper</link> class, create a new component instance  and add it to the container.
</para>
          </listitem>
          <listitem>
            <para>To change the component’s look, create a  <link linkend="web_theme">theme extension</link> and make the required changes in the <filename>&lt;theme&gt;-ext.scss</filename> file. The easiest way to create a theme file is to run the <guibutton>Create theme extension</guibutton> command on the <guilabel>Project properties</guilabel> panel of the Studio navigator.</para>
          </listitem>
        </orderedlist></para>
      <para><xref linkend="vaadin_addon_sample"/> covers the process of including and using the <application>Stepper</application> add-on, which allows stepping through the values. </para>
    </section>
    <section id="own_gui_component">
      <title>Integration with Generic UI</title>
      <para>Integration of a native component into the generic user interface allows using such component in a large number of screens with little effort,  just like the basic platform components. Full integration requires the following steps:<orderedlist>
          <listitem>
            <para>Create the component interface. Interfaces are usually located in the GUI module, available to both client types – <structname>Web</structname> and <structname>Desktop</structname>. If the component should be implemented for one client type only, it can be placed in the <structname>Web</structname> or <structname>Desktop</structname> module directly. The example below implements the component for <structname>Web Client</structname> only. </para>
            <para>The component interface should be derived from  <code>com.haulmont.cuba.gui.components.Component</code> or any of its inheritors, for example  <code>DatasourceComponent</code> or <code>Field</code>:<programlisting language="java">package com.company.myproject.gui.components;

import com.haulmont.cuba.gui.components.Component;

public interface MyComponent extends Component {

  String NAME = &quot;myComponent&quot;;

  int getSomeParameter();
  void setSomeParameter(int value);
}</programlisting></para>
            <para>It is recommended to define the <code>NAME</code> constant in the interface. The constant should define the name of the component as a string, used for obtaining  the component through the  <code>ComponentsFactory</code>. This is also used as  the name of the component’s XML element in  the XML screen descriptors.</para>
          </listitem>
          <listitem>
            <para>Create the component implementation class in the  <structname>web</structname> module.</para>
            <para>It is recommended to derive the class from <code>com.haulmont.cuba.web.gui.components.WebAbstractComponent</code> or one of its inheritors, for example <code>WebAbstractField</code>. A native component instance should be created in the class constructor, and the GUI interface calls should be delegated to it:<programlisting language="java">package com.company.myproject.web.components;

import com.company.myproject.gui.components.MyComponent;
import com.haulmont.cuba.web.gui.components.WebAbstractComponent;

public class WebMyComponent
      extends WebAbstractComponent&lt;org.vaadin.someaddon.SomeComponent&gt;
      implements MyComponent {

  public WebMyComponent() {
      component = new org.vaadin.someaddon.SomeComponent();
  }

  @Override
  public int getSomeParameter() {
      return component.getSomeParameter();
  }

  @Override
  public void setSomeParameter(boolean value) {
      component.setSomeParameter(value);
  }
}</programlisting></para>
          </listitem>
          <listitem>
            <para>Create a class implementing the  <code>ComponentPalette</code> interface and return a map of custom components and their implementation classes from the  <code>getComponents()</code> method:<programlisting language="java">package com.company.myproject.web;

import com.company.myproject.gui.components.MyComponent;
import com.company.myproject.web.components.WebMyComponent;
import com.haulmont.cuba.gui.ComponentPalette;
import com.haulmont.cuba.gui.components.Component;
import com.haulmont.cuba.gui.xml.layout.ComponentLoader;
import java.util.HashMap;
import java.util.Map;

public class AppComponentPalette implements ComponentPalette {

  @Override
  public Map&lt;String, Class&lt;? extends Component&gt;&gt; getComponents() {
      Map&lt;String, Class&lt;? extends Component&gt;&gt; components = new HashMap&lt;&gt;();
      components.put(MyComponent.NAME, WebMyComponent.class);
      return components;
  }

  @Override
  public Map&lt;String, Class&lt;? extends ComponentLoader&gt;&gt; getLoaders() {
      return Collections.emptyMap();
  }
}</programlisting></para>
            <para>The instance of the component palette must be registered in the application. This can be done in the  <link linkend="gui_web">App</link> class initialization block: <programlisting language="java">package com.company.myproject.web;

import com.haulmont.cuba.web.DefaultApp;
import com.haulmont.cuba.web.gui.WebUIPaletteManager;

public class App extends DefaultApp {

  static {
      WebUIPaletteManager.registerPalettes(new AppComponentPalette());
  }
}</programlisting></para>
          </listitem>
          <listitem>
            <para>At this point, the new GUI component can be retrieved via the <code>ComponentsFactory</code>:<programlisting language="java" lang="">@Inject
private BoxLayout box;
@Inject
private ComponentsFactory componentsFactory;

@Override
public void init(Map&lt;String, Object&gt; params) {
  MyComponent myComponent = componentsFactory.createComponent(MyComponent.NAME);
  box.addComponent(myComponent);
  ...
}</programlisting></para>
          </listitem>
          <listitem>
            <para>In order to support component declaration in screen XML-descriptors, create a component loader class, implementing <code>com.haulmont.cuba.gui.xml.layout.ComponentLoader</code>. It is recommended to derive the loader class from <code>com.haulmont.cuba.gui.xml.layout.loaders.ComponentLoader</code> or any of its inheritors. The loader operates with the component GUI interface only, so it is common for all client types, and can be located in the  <structname>gui</structname> module. The minimal implementation should call the  <code>loadComponent()</code> method, which creates the component instance and sets its common properties, such as ID or size, taken from XML. Any custom component properties can be initialized afterwards:<programlisting language="java">package com.company.myproject.gui.loaders;

import com.company.myproject.gui.components.MyComponent;
import com.haulmont.cuba.gui.components.Component;
import com.haulmont.cuba.gui.xml.layout.*;
import org.dom4j.Element;

public class MyComponentLoader extends ComponentLoader {

  public MyComponentLoader(Context context, LayoutLoaderConfig config, ComponentsFactory factory) {
      super(context, config, factory);
  }

  @Override
  public Component loadComponent(ComponentsFactory factory, Element element, Component parent) {
      MyComponent component = (MyComponent) super.loadComponent(factory, element, parent);

      String someParameter = element.attributeValue(&quot;someParameter&quot;);
      if (someParameter != null) {
          component.setSomeParameter(Integer.valueOf(someParameter));
      }
      return component;
  }
}</programlisting></para>
            <para>The loader must be registered by the  <code>getLoaders()</code> method of the previously created component palette:<programlisting language="java">public class AppComponentPalette implements ComponentPalette {
  ...

  @Override
  public Map&lt;String, Class&lt;? extends ComponentLoader&gt;&gt; getLoaders() {
      Map&lt;String, Class&lt;? extends ComponentLoader&gt;&gt; loaders = new HashMap&lt;&gt;();
      loaders.put(MyComponent.NAME, MyComponentLoader.class);
      return loaders;
  }
}</programlisting></para>
          </listitem>
          <listitem>
            <para>Now the component can be used in XML-descriptors of your project:<programlisting language="xml">&lt;layout&gt;
  &lt;myComponent id=&quot;someId&quot; width=&quot;100%&quot; someParameter=&quot;10&quot;/&gt;
&lt;/layout&gt;</programlisting></para>
            <para>In order to enable autocomplete for component name and attributes in IDE, define your own XSD and include it in the screens:<programlisting language="xml">&lt;window xmlns=&quot;http://schemas.haulmont.com/cuba/5.4/window.xsd&quot;
      xmlns:app=&quot;http://schemas.company.com/app/0.1/app-components.xsd&quot;
      ...&gt;

  &lt;layout&gt;
      &lt;app:myComponent id=&quot;someId&quot; width=&quot;100%&quot; someParameter=&quot;10&quot;/&gt;
  &lt;/layout&gt;</programlisting></para>
          </listitem>
        </orderedlist></para>
      <para><xref linkend="own_gui_component_sample"/> covers the process of integrating the <application>IntStepper</application> component, used for changing integer values incrementally. </para>
    </section>
  </section>
  <section id="shortcuts">
    <title>Keyboard Shortcuts</title>
    <para>This section provides a list of keyboard shortcuts used in the generic user interface of the application. All the  <link linkend="app_properties">application properties</link> listed below belong to the  <code>ClientConfig</code> interface and can be used in Web Client and Desktop Client application blocks. </para>
    <itemizedlist>
      <listitem>
        <para>Main application window.</para>
        <itemizedlist>
          <listitem>
            <para><keycap>CTRL-SHIFT-PAGE_DOWN</keycap> – switch to the next tab. Defined by the  <code>cuba.gui.nextTabShortcut</code> property.</para>
          </listitem>
          <listitem>
            <para><keycap>CTRL-SHIFT-PAGE_UP</keycap> – switch to the previous tab. Defined by the  <code>cuba.gui.previousTabShortcut</code> property.</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Screens.</para>
        <itemizedlist>
          <listitem>
            <para><keycap>ESCAPE</keycap> – close the current  <link linkend="abstractWindow">screen</link>. Defined by the  <code>cuba.gui.closeShortcut</code> property.</para>
          </listitem>
          <listitem>
            <para><keycap>CTRL-ENTER</keycap> – close the current  <link linkend="abstractEditor">editor</link> and save the changes. Defined by the  <code>cuba.gui.commitShortcut</code> property.</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Standard actions for list components (<link linkend="gui_Table">Table</link>, <link linkend="gui_GroupTable">GroupTable</link>, <link linkend="gui_TreeTable">TreeTable</link>, <link linkend="gui_Tree">Tree</link>). In addition to these application properties, a shortcut for a particular action can be set by calling it’s <code>setShortcut()</code> method.</para>
        <itemizedlist>
          <listitem>
            <para><keycap>CTRL-INSERT</keycap> – call the  <link linkend="createAction">CreateAction</link>. Defined by the <code>cuba.gui.tableInsertShortcut</code> property. </para>
          </listitem>
          <listitem>
            <para><keycap>CTRL-ALT-INSERT</keycap> – call the <link linkend="addAction">AddAction</link>. Defined by the  <code>cuba.gui.tableAddShortcut</code> property.</para>
          </listitem>
          <listitem>
            <para><keycap>ENTER</keycap> – call the  <link linkend="editAction">EditAction</link>. Defined by the <code>cuba.gui.tableEditShortcut</code> property.</para>
          </listitem>
          <listitem>
            <para><keycap>CTRL-DELETE</keycap> – call the  <link linkend="removeAction">RemoveAction</link> and  <link linkend="excludeAction">ExcludeAction</link>. Defined by the  <code>cuba.gui.tableRemoveShortcut</code> property.</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Standard actions for lookup fields  (<link linkend="gui_PickerField">PickerField</link>, <link linkend="gui_LookupPickerField">LookupPickerField</link>, <link linkend="gui_SearchPickerField">SearchPickerField</link>). In addition to these application properties, a shortcut for a particular action can be set by calling its  <code>setShortcut()</code> method.</para>
        <itemizedlist>
          <listitem>
            <para><keycap>CTRL-ALT-L</keycap> – call the  <link linkend="lookupAction">LookupAction</link>. Defined by the  <code>cuba.gui.pickerShortcut.lookup</code>.</para>
          </listitem>
          <listitem>
            <para><keycap>CTRL-ALT-O</keycap> – call the  <link linkend="openAction">OpenAction</link>. Defined by the <code>cuba.gui.pickerShortcut.open</code> property.</para>
          </listitem>
          <listitem>
            <para><keycap>CTRL-ALT-C</keycap> – call the <link linkend="clearAction">ClearAction</link>. Defined by the  <code>cuba.gui.pickerShortcut.clear</code> property.</para>
          </listitem>
        </itemizedlist>
        <para>In addition to these shortcuts, lookup fields support action calls with <keycap>CTRL-ALT-1</keycap>, <keycap>CTRL-ALT-2</keycap> and so on, depending on the number of actions. If you click  <keycap>CTRL-ALT-1</keycap> the first action in the list will be called; clicking  <keycap>CTRL-ALT-2</keycap> calls the second action, etc. The  <keycap>CTRL-ALT</keycap> combination can be replaced with any other combination specified in <code>cuba.gui.pickerShortcut.modifiers</code> property.</para>
      </listitem>
      <listitem>
        <para><link linkend="gui_Filter">Filter</link> component.</para>
        <itemizedlist>
          <listitem>
            <para><keycap>SHIFT-ENTER</keycap> – apply the selected filter. Defined by the  <code>cuba.gui.filterApplyShortcut</code> property.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
</section>

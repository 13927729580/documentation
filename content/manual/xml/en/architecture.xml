<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="architecture">
  <title>Architecture</title>
  <para>This section covers the architecture of CUBA applications in different aspects: in regard to tiers, blocks, modules, and to the used basic projects.</para>
  <section id="app_tiers">
    <title>Application Tiers and Blocks</title>
    <para>The platform allows building applications according to the classic three-tier pattern: client tier, middleware tier, database. The <firstterm>tier</firstterm> indicates the degree of “remoteness” from the stored data. </para>
    <para>Further on, mainly middleware and client tiers will be described, therefore the words “all tiers” will refer to these tiers only.</para>
    <para>Each tier allows creating one or more application  <firstterm>blocks</firstterm>. A block is a separate executable program interacting with other blocks in the application. CUBA platform tools enable creation of blocks in the form of web or desktop applications. Block development for mobile platforms currently remains beyond CUBA framework; however, mobile blocks made up using other tools can be integrated with the standard blocks of the application.   </para>
    <figure>
      <title> Application Tiers and Blocks</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="img/AppTiers.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <variablelist>
      <varlistentry>
        <term>Middleware</term>
        <listitem>
          <para>The middle tier contains core business-logic of the application and provides access to the database. It is represented by a separate web application running on  <glossterm linkend="javaee_web_profile">Java EE Web Profile</glossterm> standard container. See <xref linkend="middleware"/>. </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Web Client</term>
        <listitem>
          <para>The main block in the Client tier. It contains the interface designed primarily for internal users. It is represented by a separate web application running on  <application>Java EE Web Profile</application>  standard container. The <link linkend="gui_framework">user interface</link> is implemented on the base of  <application>Vaadin</application> framework. See <xref linkend="gui_framework"/>.  </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Desktop Client</term>
        <listitem>
          <para>The additional block of Client tier. It contains the interface designed primarily for internal users. It is represented by a desktop Java application; the user interface is implemented on the base of  <application>Java Swing</application> framework. See <xref linkend="gui_framework"/>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Web Portal</term>
        <listitem>
          <para>The additional block of Client tier. It contains the interface for external users and integration tools for mobile devices and third-party applications. It is represented by a separate web application running under  <application>Java EE Web Profile</application> standard container. The user interface is implemented on the base of <application>Spring MVC</application> framework. See <xref linkend="portal"/>.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>The mandatory block for any application is the middle tier – <structname>Middleware</structname>. User interface is generally implemented on the basis of one or several blocks, such as  <structname>Web Client</structname> and <structname>Web Portal</structname>. </para>
    <para>The above mentioned blocks are standard, however, in order to separate the functionality in a complex application  one can easily create any number of Client blocks as well as Middleware blocks.  </para>
    <para>All of the Client blocks interact with the middle tier uniformly via  <application>HTTP</application> protocol enabling to place the middle tier arbitrarily, behind firewall as well. It is worth mentioning, that in the simplest case when the middle tier and the web client are deployed on the same server local interaction between them can bypass the network stack in order to reduce overhead.</para>
  </section>
  <section id="app_modules">
    <title>Application Modules </title>
    <para>A module is the smallest structural part of  CUBA application. It is a single module of application project and the corresponding JAR file with executable code.</para>
    <para>Standard modules: <itemizedlist>
        <listitem>
          <para><structname>global</structname> –  includes entity classes, service interfaces, and other classes common for all tiers. It is used in all  <link linkend="app_tiers">application blocks</link>.</para>
        </listitem>
        <listitem>
          <para><structname>core</structname> – implements services and all other components of the middle tier. It is used only in  <structname>Middleware</structname>.</para>
        </listitem>
        <listitem>
          <para><structname>gui</structname> – common components of the  <link linkend="gui_framework">generic user interface</link>. It is used in  <structname>Web Client</structname> and <structname>Desktop Client</structname>.</para>
        </listitem>
        <listitem>
          <para><structname>web</structname> –  the implementation of generic user interface based on  <application>Vaadin</application> and other specific web client classes. It is used in <structname>Web Client</structname> block.</para>
        </listitem>
        <listitem>
          <para><structname>desktop</structname> – an optional module – implementation of generic user interface based on  <application>Java Swing</application>, as well as other specific desktop client classes. It is used in <structname>Desktop Client</structname> block.</para>
        </listitem>
        <listitem>
          <para><structname>portal</structname> – an optional module – implementation of Web portal based on <application>Spring MVC</application>.</para>
        </listitem>
      </itemizedlist>  </para>
    <figure>
      <title>Application Modules</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="img/AppModules.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section id="base_projects">
    <title>Base Projects</title>
    <para>The functionality of the platform is divided into several so-called <firstterm>base projects</firstterm>: <itemizedlist>
        <listitem>
          <para><structname>cuba</structname> – the main base project containing all of the functionality described in this manual</para>
        </listitem>
        <listitem>
          <para><structname>reports</structname> – reports generating subsystem</para>
        </listitem>
        <listitem>
          <para><structname>workflow</structname> – workflow management subsystem with built-in visual designer for business processes </para>
        </listitem>
        <listitem>
          <para><structname>fts</structname> – full-text search subsystem </para>
        </listitem>
        <listitem>
          <para><structname>charts</structname> – subsystem for displaying charts and maps </para>
        </listitem>
        <listitem>
          <para><structname>ccpayments</structname> – subsystem dealing with credit cards </para>
        </listitem>
        <listitem>
          <para><structname>bpmn</structname> – the mechanism of business processes execution according to the standard <application>BPMN 2.0</application></para>
        </listitem>
      </itemizedlist></para>
    <para>The application created on the platform can comprise the functionality of the base projects by declaring dependencies on their  <glossterm linkend="artifact"> artifacts</glossterm>. Dependence on <structname>cuba</structname> artifacts is mandatory. Optional base projects in turn also depend on <structname>cuba</structname>, and  may contain dependencies between them.</para>
    <figure>
      <title>Dependencies between Projects </title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="img/BaseProjects.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Solid lines demonstrate mandatory dependencies, dashed lines mean optional ones. </para>
  </section>
  <section id="app_structure">
    <title>Application Structure </title>
    <para>The above-listed architectural principles are directly reflected in the composition of assembled application. Let us consider the example of a simple application   <application>sales</application>, which has two blocks – <structname>Middleware</structname> and <structname>Web Client</structname>; and includes functionality of the two base projects  <structname>cuba</structname> and <structname>reports</structname>.</para>
    <figure>
      <title>The structure of a simple application </title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="img/SampleAppArtifacts.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The figure demonstrates the contents of several directories on    <application>Tomcat</application> server with a deployed application  <application>sales</application> in it. </para>
    <para>The <structname>Middleware</structname> <link linkend="app_tiers">block</link> is represented by the   <filename>app-core</filename> web application, the  <structname>Web Client</structname> block – by the  <filename>app</filename> web application. The executable code of the web applications can be found in directories  <filename>WEB-INF/lib</filename> in sets of JAR-files. Each JAR  (<glossterm linkend="artifact">artifact</glossterm>) is a result of assembly of one of the application  <link linkend="app_modules">modules</link> or <link linkend="base_projects">base projects</link>.</para>
    <para>For instance, the contents of JAR-files of the web application in middle tier  <filename>app-core</filename> is determined by the facts that  <structname>Middleware</structname> block includes  <structname>global</structname> and <structname>core</structname> modules, and the application uses base projects <structname>cuba</structname> and <structname>reports</structname>. </para>
  </section>
</section>

<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><chapter id="ch1_general_info" lang="en">
  <title>Overview of the Workflow Subsystem</title>
  <para>Workflow represents a series of changes to the state of a certain <firstterm>card</firstterm> entity in accordance with a specified <firstterm>process</firstterm>, which involves both users and automatic operations. A typical example is the process where a certain document is approved by employees in an organization.</para>
  <para>Below is the structure of the Workflow subsystem of the CUBA platform.</para>
  <figure>
    <title>Structure of the Workflow Subsystem</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="img/Workflow.png" align="center"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>The main structural elements are:<itemizedlist>
      <listitem>
        <para><firstterm>Process Design</firstterm> - a process schema, as well as a collection of related scripts, variables, notification and message localization settings. The design defines the process, which is created and updated as a result of design <firstterm>deployment</firstterm> in the application.</para>
      </listitem>
      <listitem>
        <para><firstterm>Process</firstterm> - an executable description of the business process. The execution mechanism is based on the <application>jBPM 4</application> framework, so the main element of the process is the descriptor of the state graph in jPDL. Furthermore, the process includes descriptors of user interface forms, lists of users assigned to execute process roles, localized messages, etc.</para>
      </listitem>
      <listitem>
        <para><firstterm>Card</firstterm> - a data model entity that is directly linked to the process instance. In most cases, the process card is a domain object with a state that may vary in accordance with the process. An example is a document awaiting approval or a ticket in the bug tracking system. If such a domain object does not exist, the card can be an artificial entity that simply reflects the current state of the process instance.</para>
      </listitem>
    </itemizedlist></para>
  <para>In a manner of speaking, the process defines the type of business process, while the card represents a single instance of this business process.</para>
  <para>The process defines a set of  
<firstterm>states</firstterm> (nodes) and transitions between them, as well as the following associated objects:<itemizedlist>
      <listitem>
        <para><firstterm>Activities</firstterm> -
the software code that is executed when transitioning to a particular state.</para>
      </listitem>
      <listitem>
        <para><firstterm>Forms</firstterm> -
interactive screens that allow users to choose transitions.</para>
      </listitem>
      <listitem>
        <para><firstterm>Timers</firstterm>
 -
the software code that is automatically triggered when a certain amount of time has passed after entering a certain state.</para>
      </listitem>
    </itemizedlist></para>
  <para><firstterm>Assignment</firstterm> objects appear in course of process execution. They indicate that the user should take some action concerning the process.</para>
  <para>The Workflow subsystem of the platform has an integrated visual process editor, <firstterm>Visual Designer</firstterm>, which allows designing processes and deploying them at application runtime. The set of possible states, actions, forms, and timers that make up processes is configured in the application at the development stage.</para>
  <section>
    <title>Data Model</title>
    <para>Below is the classes diagram of the main Workflow subsystem elements.</para>
    <figure>
      <title>Chart of Workflow Classes </title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="img/WorkflowEntities.png" align="center"/>
        </imageobject>
      </mediaobject>
    </figure>
    <itemizedlist>
      <listitem>
        <para><code>Design</code> - the object that stores the process design.</para>
      </listitem>
      <listitem>
        <para><code>Proc</code> - the executable process. Process attributes:<itemizedlist>
            <listitem>
              <para><code>design</code> - link to the design that was used to create the process.</para>
            </listitem>
            <listitem>
              <para><code>name</code> - the meaningful process name. The name is specified at the design stage. However, it can be set in the process editor screen as well.</para>
            </listitem>
            <listitem>
              <para><code>jbpmProcessKey</code> - the process key in the jBPM execution engine. It is generated automatically when deploying the process design.</para>
            </listitem>
            <listitem>
              <para><code>code</code> - the process code that can be referenced by software tools. Defaults to <code>jbpmProcessKey</code>, but can be changed in the process editor screen.</para>
            </listitem>
            <listitem>
              <para><code>messagesPack</code> - the name of the messages pack that contains localized names of states and transitions, various descriptions and process messages. This package is generated automatically at the process design deployment stage and is stored along with other process files in the appropriate subdirectory of the application configuration directory.</para>
            </listitem>
            <listitem>
              <para><code>roles</code> - list of <code>ProcRole</code> type objects that define the roles of process participants.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
      <listitem>
        <para><code>ProcRole</code> - a process role. Objects of this type are created automatically when the process design is deployed, if it contains <firstterm>Assignment</firstterm> states, which assign tasks to users and halt the execution of the process until the user takes required actions. Initially, <code>ProcRole</code> objects are not connected to any system users. However, you can assign a default holder for each role in the process editor screen.</para>
      </listitem>
      <listitem>
        <para><code>DefaultProcActor</code> - list of holders of a certain role; this list is defined at the process level.</para>
      </listitem>
      <listitem>
        <para><code>Card</code> - the process card. Generally, a particular domain entity is inherited from the <code>Card</code> class to acquire the ability to move through the process. <code>Card</code> attributes:<itemizedlist>
            <listitem>
              <para><code>description</code> - an optional text description of a given card instance that allows the user to distinguish between cards without loading attributes of a particular type that extends the <code>Card</code>. For example, if the card represents a document, then it may be useful to enter the type, number, and date of this document in the <code>description</code> field.</para>
            </listitem>
            <listitem>
              <para><code>proc</code> - the link to a process.</para>
            </listitem>
            <listitem>
              <para><code>roles</code> - the list of CardRole type objects that define the process role holders for a given card.</para>
            </listitem>
            <listitem>
              <para><code>jbpmProcessId</code> - the identifier of the process instance in the jBPM execution engine.</para>
            </listitem>
            <listitem>
              <para><code>state</code> - the name of the current process state.</para>
            </listitem>
            <listitem>
              <para><code>assignments</code> - the list of <code>Assignment</code> objects created in this process instance.</para>
            </listitem>
            <listitem>
              <para><code>attachments</code> - the list of <code>CardAttachment</code> type objects that enable associating the files downloaded during process execution with the card.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
      <listitem>
        <para><code>CardRole</code> - the entity that defines the process role holders for a given card.
            <code>CardRole</code> attributes:<itemizedlist>
            <listitem>
              <para><code>card</code> - the card, for which the role holder is defined.</para>
            </listitem>
            <listitem>
              <para><code>procRole</code> - the process role.</para>
            </listitem>
            <listitem>
              <para><code>user</code> - the role holder of the <code>User</code> type (a system user).</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
      <listitem>
        <para><code>CardAttachment</code> - an attachment that enables associating downloaded files with the card. Attributes (together with the <code>Attachment</code> superclass):<itemizedlist>
            <listitem>
              <para><code>card</code> - the card.</para>
            </listitem>
            <listitem>
              <para><code>assignment</code> - if the file is uploaded during the assignment stage, this attribute contains a link to the corresponding <code>Assignment</code> object.</para>
            </listitem>
            <listitem>
              <para><code>file</code> - the uploaded file of the <code>FileDescriptor</code> type.</para>
            </listitem>
            <listitem>
              <para><code>name</code> - the attachment name.</para>
            </listitem>
            <listitem>
              <para><code>comment</code> - the comment on the attachment.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
      <listitem>
        <para><code>Assignment</code> - the assignment. Object of this type are created in the system when the process transitions to the <firstterm>Assignment</firstterm> state. In this state, the process pauses and waits for a command from the user or the system. When a finish command is received, the  <code>finished</code>, <code>finishedByUser</code> and  <code>outcome</code> attributes are set for the assignment, and the process transitions to its next state. For one card and user, only one pending assignment can exist. <code>Assignment</code> attributes include:<itemizedlist>
            <listitem>
              <para><code>card</code> - the card.</para>
            </listitem>
            <listitem>
              <para><code>user</code> - the system user the assignment has been issued for.</para>
            </listitem>
            <listitem>
              <para><code>proc</code> - the same process as the one set for the card at the moment of assignment creation.</para>
            </listitem>
            <listitem>
              <para><code>name</code> - the assignment name.</para>
            </listitem>
            <listitem>
              <para><code>description</code> - the assignment description.</para>
            </listitem>
            <listitem>
              <para><code>jbpmProcessId</code> - the identifier of a jBPM process instance corresponding to the card executed at the time of assignment creation.</para>
            </listitem>
            <listitem>
              <para><code>dueDate</code> - the assignment completion deadline.</para>
            </listitem>
            <listitem>
              <para><code>finished</code> - the actual time when the assignment has been completed. Is <code>null</code> until the assignment is completed.</para>
            </listitem>
            <listitem>
              <para><code>finishedByUser</code> - the user who has actually completed the assignment. Is <code>null</code> until the assignment is completed.</para>
            </listitem>
            <listitem>
              <para><code>outcome</code> - the name of the assignment state outcome that the user has selected. For example, the business process schema may contain an assignment node that asks the user to check whether a particular bug has been addressed, and to select one of the two options to continue the process: &quot;OK&quot; or &quot;Not OK&quot;. If the user chooses &quot;OK&quot;, then this string is written to the <code>outcome</code> field of the assignment, and vice versa.</para>
            </listitem>
            <listitem>
              <para><code>attachments</code> - the list of <code>CardAttchment</code> objects that were created for this assignment.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
